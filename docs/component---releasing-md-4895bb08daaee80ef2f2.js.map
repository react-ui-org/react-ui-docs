{"version":3,"sources":["webpack:///../RELEASING.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iQAMO,MAAMA,EAAe,Q,8LAE5B,MAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aACH,aACL,qBAAK,oGACS,6BAAGC,WAAW,KAAQ,CAChC,KAAQ,2BACL,2BAA+B,KACtC,qBAAK,iBACL,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,4FAErB,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAO,kBAAiB,6BAAGA,WAAW,MAAS,CAC1D,KAAQ,uBACL,2BAA+B,8BAEtC,kBAAIA,WAAW,MAAO,mCAG1B,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,uEAAsE,0BAAYA,WAAW,KAAM,UAAuB,gHAKnJ,qBAAK,qBAAoB,0BAAYA,WAAW,KAAM,qBAAkC,iBACxF,iBAAQ,CACN,GAAM,mBACH,mBACL,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,cAAuB,qFAEzE,6BAAGA,WAAW,KAAQ,CACZ,KAAQ,wCACL,gBAAoB,0EAEjC,6BAAGA,WAAW,KAAQ,CACZ,KAAQ,sDACL,wBAA4B,qFAGrC,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,WAAoB,yEACnE,0BAAYA,WAAW,KAAM,gBAA6B,QAAO,0BAAYA,WAAW,KAAM,qBAAkC,uFACpF,0BAAYA,WAAW,KAAM,gBAA6B,QACzG,0BAAYA,WAAW,KAAM,4BAAyC,iDAElE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,cAAuB,6GAEnE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAO,iGAEtB,kBAAIA,WAAW,MAAO,2DAA0D,0BAAYA,WAAW,MAAO,UAAuB,YACrI,kBAAIA,WAAW,MAAO,2DACtB,kBAAIA,WAAW,MAAO,+D,4LAQhCJ,EAAWK,gBAAiB","file":"component---releasing-md-4895bb08daaee80ef2f2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"releasing\"\n    }}>{`Releasing`}</h1>\n    <p>{`The release process is fully automated. The only condition is that contributors\nmust follow the `}<a parentName=\"p\" {...{\n        \"href\": \"/contribute/guidelines\"\n      }}>{`contributing guidelines`}</a>{`.`}</p>\n    <p>{`How it works:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Pull requests are automatically labelled based on branch name. The labels are\nused for:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`resolving next `}<a parentName=\"li\" {...{\n              \"href\": \"https://semver.org\"\n            }}>{`semantic version number`}</a>{`\n(BREAKING.FEATURE.PATCH)`}</li>\n          <li parentName=\"ul\">{`grouping changes in changelog`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Release changelog is generated as pull requests are merged into the `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{`\nbranch. Invididual PR names are listed and grouped by type based on the label\nadded to them previously.`}</p>\n      </li>\n    </ul>\n    <p>{`See the source of `}<inlineCode parentName=\"p\">{`.github/workflows`}</inlineCode>{` for details.`}</p>\n    <h2 {...{\n      \"id\": \"release-process\"\n    }}>{`Release Process`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`As you go:`}</strong>{` make sure all contributions follow the contributing\nguidelines, especially the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/contribute/guidelines#git-workflow\"\n          }}>{`Git workflow`}</a>{` (correct PR names and\nbranch names). Check out the release draft on\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/react-ui-org/react-ui/releases\"\n          }}>{`GitHub releases page`}</a>{` to\nsee what the changelog looks like and what will be the next version number.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Manual:`}</strong>{` once you are ready to publish a release, bump the version number\nin `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`package-lock.json`}</inlineCode>{`. Make sure it matches the resolved\nversion number in the release draft. Commit as `}<inlineCode parentName=\"p\">{`Bump version`}</inlineCode>{` in\n`}<inlineCode parentName=\"p\">{`release/<VERSION_NUMBER>`}</inlineCode>{` branch, create a pull request and merge it.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Automatic:`}</strong>{` once the release pull request from step 2 is merged, the\nfollowing actions are triggered automatically:`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`GitHub release draft with name corresponding to the version number from\nstep 2 is published.`}</li>\n          <li parentName=\"ol\">{`Git tag with the version number from step 2 is added to `}<inlineCode parentName=\"li\">{`master`}</inlineCode>{` branch.`}</li>\n          <li parentName=\"ol\">{`Package is built and published to npm package registry.`}</li>\n          <li parentName=\"ol\">{`Documentation is built and deployed to production.`}</li>\n        </ol>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}