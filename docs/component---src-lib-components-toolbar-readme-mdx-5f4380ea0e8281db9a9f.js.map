{"version":3,"sources":["webpack:///../src/lib/components/Toolbar/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Placeholder","CheckboxField","Button","ButtonGroup","Toolbar","ToolbarGroup","ToolbarItem","bordered","alignment","setAlignment","React","justification","setJustification","align","id","aria-labelledby","priority","aria-pressed","color","label","onClick","justify","isGroupDense","setIsGroupDense","isToolbarDense","setIsToolbarDense","checked","onChange","e","target","dense","nowrap","flexible","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-toolbar-readme-mdx-5f4380ea0e8281db9a9f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Placeholder } from '../../../docs/_components/Placeholder/Placeholder';\nimport { CheckboxField, Button, ButtonGroup, Toolbar, ToolbarGroup, ToolbarItem } from '../..';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toolbar\"\n    }}>{`Toolbar`}</h1>\n\n    <p>{`The responsive Toolbar layout is a versatile tool that allows spacing, grouping,\nand aligning inline items.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Toolbar component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Toolbar, ToolbarItem } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<Toolbar>\\n  <ToolbarItem>\\n    <Placeholder bordered>Toolbar item</Placeholder>\\n  </ToolbarItem>\\n  <ToolbarItem>\\n    <Placeholder bordered>Toolbar item</Placeholder>\\n  </ToolbarItem>\\n  <ToolbarItem>\\n    <Placeholder bordered>Toolbar item</Placeholder>\\n  </ToolbarItem>\\n</Toolbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Toolbar mdxType=\"Toolbar\">\n    <ToolbarItem mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Toolbar item</Placeholder>\n    </ToolbarItem>\n    <ToolbarItem mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Toolbar item</Placeholder>\n    </ToolbarItem>\n    <ToolbarItem mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Toolbar item</Placeholder>\n    </ToolbarItem>\n  </Toolbar>\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Toolbar is great for flexible inline layouts.`}</strong>{` For stacking your content\nvertically or building two-dimensional layouts head to the `}<a parentName=\"p\" {...{\n            \"href\": \"/components/grid\"\n          }}>{`Grid`}</a>{`\nlayout.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Wrap your items`}</strong>{` into the ToolbarItem component. This ensures your content\nis properly spaced and aligned with other Toolbar elements. Do `}<strong parentName=\"p\">{`not`}</strong>{` try to\nput any custom HTML or React components directly into the Toolbar layout\nwithout wrapping it with the ToolbarItem first.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Be careful with using Toolbar with long or dynamic items in narrow\ncontainers.`}</strong>{` Toolbar intentionally prevents its items from shrinking using\n`}<inlineCode parentName=\"p\">{`flex: none`}</inlineCode>{` which may cause overflow in case of lack of horizontal space.\nDepending on your situation, consider turning on the `}<inlineCode parentName=\"p\">{`nowrap`}</inlineCode>{` option\n(which allows shrinking of items but disables Toolbar from wrapping), using\nthe `}<a parentName=\"p\" {...{\n            \"href\": \"/components/text\"\n          }}>{`Text`}</a>{` component to precisely control text wrapping, or switching to\nthe `}<a parentName=\"p\" {...{\n            \"href\": \"/components/grid\"\n          }}>{`Grid`}</a>{` layout.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"alignment\"\n    }}>{`Alignment`}</h2>\n    <p>{`You can tweak your Toolbar layout using rich alignment options, both in\nhorizontal and vertical direction.`}</p>\n    <p>{`👉 At the current stage of development, React UI is `}<strong parentName=\"p\">{`RTL aware`}</strong>{` so switching\nto a fully RTL-compatible behavior in the future should be painless. That's why\nthe justification values are called rather `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` than `}<inlineCode parentName=\"p\">{`left`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`end`}</inlineCode>{` instead\nof `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{`.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [alignment, setAlignment] = React.useState(\\'top\\')\\n  const [justification, setJustification] = React.useState(\\'start\\')\\n  return (\\n    <div>\\n      <Toolbar>\\n        <ToolbarGroup align=\\\"baseline\\\">\\n          <ToolbarItem>\\n            <span id=\\\"alignment-label\\\">Alignment:</span>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <ButtonGroup aria-labelledby=\\\"alignment-label\\\" priority=\\\"outline\\\">\\n              <Button\\n                aria-pressed={alignment === \\'top\\'}\\n                color={alignment === \\'top\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"top\\\"\\n                onClick={() => setAlignment(\\'top\\')}\\n              />\\n              <Button\\n                aria-pressed={alignment === \\'middle\\'}\\n                color={alignment === \\'middle\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"middle\\\"\\n                onClick={() => setAlignment(\\'middle\\')}\\n              />\\n              <Button\\n                aria-pressed={alignment === \\'bottom\\'}\\n                color={alignment === \\'bottom\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"bottom\\\"\\n                onClick={() => setAlignment(\\'bottom\\')}\\n              />\\n              <Button\\n                aria-pressed={alignment === \\'baseline\\'}\\n                color={alignment === \\'baseline\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"baseline\\\"\\n                onClick={() => setAlignment(\\'baseline\\')}\\n              />\\n            </ButtonGroup>\\n          </ToolbarItem>\\n        </ToolbarGroup>\\n        <ToolbarGroup align=\\\"baseline\\\">\\n          <ToolbarItem>\\n            <span id=\\\"justification-label\\\">Justification:</span>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <ButtonGroup\\n              aria-labelledby=\\\"justification-label\\\"\\n              priority=\\\"outline\\\"\\n            >\\n              <Button\\n                aria-pressed={justification === \\'start\\'}\\n                color={justification === \\'start\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"start\\\"\\n                onClick={() => setJustification(\\'start\\')}\\n              />\\n              <Button\\n                aria-pressed={justification === \\'center\\'}\\n                color={justification === \\'center\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"center\\\"\\n                onClick={() => setJustification(\\'center\\')}\\n              />\\n              <Button\\n                aria-pressed={justification === \\'end\\'}\\n                color={justification === \\'end\\' ? \\'selected\\' : \\'secondary\\'}\\n                label=\\\"end\\\"\\n                onClick={() => setJustification(\\'end\\')}\\n              />\\n              <Button\\n                aria-pressed={justification === \\'space-between\\'}\\n                color={\\n                  justification === \\'space-between\\' ? \\'selected\\' : \\'secondary\\'\\n                }\\n                label=\\\"space-between\\\"\\n                onClick={() => setJustification(\\'space-between\\')}\\n              />\\n            </ButtonGroup>\\n          </ToolbarItem>\\n        </ToolbarGroup>\\n      </Toolbar>\\n      <Toolbar align={alignment} justify={justification}>\\n        <ToolbarItem>\\n          <Placeholder bordered>First item</Placeholder>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <Placeholder bordered>\\n            Second item\\n            <br />\\n            is taller\\n          </Placeholder>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <Placeholder bordered>Third item</Placeholder>\\n        </ToolbarItem>\\n      </Toolbar>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [alignment, setAlignment] = React.useState('top');\n        const [justification, setJustification] = React.useState('start');\n        return <div>\n        <Toolbar mdxType=\"Toolbar\">\n          <ToolbarGroup align=\"baseline\" mdxType=\"ToolbarGroup\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <span id=\"alignment-label\">Alignment:</span>\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <ButtonGroup aria-labelledby=\"alignment-label\" priority=\"outline\" mdxType=\"ButtonGroup\">\n                <Button aria-pressed={alignment === 'top'} color={alignment === 'top' ? 'selected' : 'secondary'} label=\"top\" onClick={() => setAlignment('top')} mdxType=\"Button\" />\n                <Button aria-pressed={alignment === 'middle'} color={alignment === 'middle' ? 'selected' : 'secondary'} label=\"middle\" onClick={() => setAlignment('middle')} mdxType=\"Button\" />\n                <Button aria-pressed={alignment === 'bottom'} color={alignment === 'bottom' ? 'selected' : 'secondary'} label=\"bottom\" onClick={() => setAlignment('bottom')} mdxType=\"Button\" />\n                <Button aria-pressed={alignment === 'baseline'} color={alignment === 'baseline' ? 'selected' : 'secondary'} label=\"baseline\" onClick={() => setAlignment('baseline')} mdxType=\"Button\" />\n              </ButtonGroup>\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup align=\"baseline\" mdxType=\"ToolbarGroup\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <span id=\"justification-label\">Justification:</span>\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <ButtonGroup aria-labelledby=\"justification-label\" priority=\"outline\" mdxType=\"ButtonGroup\">\n                <Button aria-pressed={justification === 'start'} color={justification === 'start' ? 'selected' : 'secondary'} label=\"start\" onClick={() => setJustification('start')} mdxType=\"Button\" />\n                <Button aria-pressed={justification === 'center'} color={justification === 'center' ? 'selected' : 'secondary'} label=\"center\" onClick={() => setJustification('center')} mdxType=\"Button\" />\n                <Button aria-pressed={justification === 'end'} color={justification === 'end' ? 'selected' : 'secondary'} label=\"end\" onClick={() => setJustification('end')} mdxType=\"Button\" />\n                <Button aria-pressed={justification === 'space-between'} color={justification === 'space-between' ? 'selected' : 'secondary'} label=\"space-between\" onClick={() => setJustification('space-between')} mdxType=\"Button\" />\n              </ButtonGroup>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <Toolbar align={alignment} justify={justification} mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <Placeholder bordered mdxType=\"Placeholder\">First item</Placeholder>\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <Placeholder bordered mdxType=\"Placeholder\">\n              Second item<br />\n              is taller\n            </Placeholder>\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <Placeholder bordered mdxType=\"Placeholder\">Third item</Placeholder>\n          </ToolbarItem>\n        </Toolbar>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"groups\"\n    }}>{`Groups`}</h2>\n    <p>{`Toolbar items can be grouped which enables you aligning related items together.\nTo provide the best possible flexibility for building your layout, the\nToolbarGroup allows you to set many options similar to the Toolbar: vertical\nalignment, `}<a parentName=\"p\" {...{\n        \"href\": \"#dense-layout\"\n      }}>{`dense spacing`}</a>{`, or `}<a parentName=\"p\" {...{\n        \"href\": \"#wrapping\"\n      }}>{`disable wrapping`}</a>{`.`}</p>\n    <Playground __position={2} __code={'<Toolbar justify=\\\"space-between\\\">\\n  <ToolbarGroup>\\n    <ToolbarItem>\\n      <Placeholder bordered>Group A</Placeholder>\\n    </ToolbarItem>\\n    <ToolbarItem>\\n      <Placeholder bordered>Group A</Placeholder>\\n    </ToolbarItem>\\n  </ToolbarGroup>\\n  <ToolbarGroup align=\\\"middle\\\">\\n    <ToolbarItem>\\n      <Placeholder bordered>Group B</Placeholder>\\n    </ToolbarItem>\\n    <ToolbarItem>\\n      <Placeholder bordered>Group B</Placeholder>\\n    </ToolbarItem>\\n  </ToolbarGroup>\\n  <ToolbarItem>\\n    <Placeholder bordered>Item</Placeholder>\\n  </ToolbarItem>\\n</Toolbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Toolbar justify=\"space-between\" mdxType=\"Toolbar\">\n    <ToolbarGroup mdxType=\"ToolbarGroup\">\n      <ToolbarItem mdxType=\"ToolbarItem\">\n        <Placeholder bordered mdxType=\"Placeholder\">Group A</Placeholder>\n      </ToolbarItem>\n      <ToolbarItem mdxType=\"ToolbarItem\">\n        <Placeholder bordered mdxType=\"Placeholder\">Group A</Placeholder>\n      </ToolbarItem>\n    </ToolbarGroup>\n    <ToolbarGroup align=\"middle\" mdxType=\"ToolbarGroup\">\n      <ToolbarItem mdxType=\"ToolbarItem\">\n        <Placeholder bordered mdxType=\"Placeholder\">Group B</Placeholder>\n      </ToolbarItem>\n      <ToolbarItem mdxType=\"ToolbarItem\">\n        <Placeholder bordered mdxType=\"Placeholder\">Group B</Placeholder>\n      </ToolbarItem>\n    </ToolbarGroup>\n    <ToolbarItem mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Item</Placeholder>\n    </ToolbarItem>\n  </Toolbar>\n    </Playground>\n    <h2 {...{\n      \"id\": \"dense-layout\"\n    }}>{`Dense Layout`}</h2>\n    <p>{`Sometimes it's useful to get related items even closer together. This can be\neasily achieved through the `}<inlineCode parentName=\"p\">{`dense`}</inlineCode>{` option which can be applied on individual\ntoolbar groups, or on the entire toolbar.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [isGroupDense, setIsGroupDense] = React.useState(false)\\n  const [isToolbarDense, setIsToolbarDense] = React.useState(false)\\n  return (\\n    <div>\\n      <Toolbar>\\n        <ToolbarItem>\\n          <CheckboxField\\n            checked={isGroupDense}\\n            label=\\\"Dense ToolbarGroup\\\"\\n            onChange={e => setIsGroupDense(e.target.checked)}\\n          />\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <CheckboxField\\n            checked={isToolbarDense}\\n            label=\\\"Dense Toolbar\\\"\\n            onChange={e => setIsToolbarDense(e.target.checked)}\\n          />\\n        </ToolbarItem>\\n      </Toolbar>\\n      <Toolbar dense={isToolbarDense}>\\n        <ToolbarGroup dense={isGroupDense}>\\n          <ToolbarItem>\\n            <Placeholder bordered>Group item</Placeholder>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <Placeholder bordered>Group item</Placeholder>\\n          </ToolbarItem>\\n        </ToolbarGroup>\\n        <ToolbarItem>\\n          <Placeholder bordered>Standalone item</Placeholder>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <Placeholder bordered>Standalone item</Placeholder>\\n        </ToolbarItem>\\n      </Toolbar>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isGroupDense, setIsGroupDense] = React.useState(false);\n        const [isToolbarDense, setIsToolbarDense] = React.useState(false);\n        return <div>\n        <Toolbar mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <CheckboxField checked={isGroupDense} label=\"Dense ToolbarGroup\" onChange={e => setIsGroupDense(e.target.checked)} mdxType=\"CheckboxField\" />\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <CheckboxField checked={isToolbarDense} label=\"Dense Toolbar\" onChange={e => setIsToolbarDense(e.target.checked)} mdxType=\"CheckboxField\" />\n          </ToolbarItem>\n        </Toolbar>\n        <Toolbar dense={isToolbarDense} mdxType=\"Toolbar\">\n          <ToolbarGroup dense={isGroupDense} mdxType=\"ToolbarGroup\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <Placeholder bordered mdxType=\"Placeholder\">Group item</Placeholder>\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <Placeholder bordered mdxType=\"Placeholder\">Group item</Placeholder>\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <Placeholder bordered mdxType=\"Placeholder\">Standalone item</Placeholder>\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <Placeholder bordered mdxType=\"Placeholder\">Standalone item</Placeholder>\n          </ToolbarItem>\n        </Toolbar>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"wrapping\"\n    }}>{`Wrapping`}</h2>\n    <p>{`By default, all toolbar items are queued up one after another in a row. The\nitems automatically wrap and create a new row. To prevent this behavior, just\nset the `}<inlineCode parentName=\"p\">{`nowrap`}</inlineCode>{` option on the Toolbar or on individual ToolbarGroups. Note that\nToolbarGroups can still wrap when the wrapping is disabled just on their parent\nToolbar.`}</p>\n    <p>{`📐 Try resizing the playground below to see how it works.`}</p>\n    <Playground __position={4} __code={'<>\\n  <p>Disabled wrapping on entire toolbar:</p>\\n  <Toolbar justify=\\\"space-between\\\" nowrap>\\n    <ToolbarGroup>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group A</Placeholder>\\n      </ToolbarItem>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group A</Placeholder>\\n      </ToolbarItem>\\n    </ToolbarGroup>\\n    <ToolbarGroup>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group B</Placeholder>\\n      </ToolbarItem>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group B</Placeholder>\\n      </ToolbarItem>\\n    </ToolbarGroup>\\n    <ToolbarItem>\\n      <Placeholder bordered>Item</Placeholder>\\n    </ToolbarItem>\\n  </Toolbar>\\n  <p>Disabled wrapping on toolbar groups:</p>\\n  <Toolbar justify=\\\"space-between\\\">\\n    <ToolbarGroup nowrap>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group A</Placeholder>\\n      </ToolbarItem>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group A</Placeholder>\\n      </ToolbarItem>\\n    </ToolbarGroup>\\n    <ToolbarGroup nowrap>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group B</Placeholder>\\n      </ToolbarItem>\\n      <ToolbarItem>\\n        <Placeholder bordered>Group B</Placeholder>\\n      </ToolbarItem>\\n    </ToolbarGroup>\\n    <ToolbarItem>\\n      <Placeholder bordered>Item</Placeholder>\\n    </ToolbarItem>\\n  </Toolbar>\\n</>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <>\n    <p>Disabled wrapping on entire toolbar:</p>\n    <Toolbar justify=\"space-between\" nowrap mdxType=\"Toolbar\">\n      <ToolbarGroup mdxType=\"ToolbarGroup\">\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group A</Placeholder>\n        </ToolbarItem>\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group A</Placeholder>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarGroup mdxType=\"ToolbarGroup\">\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group B</Placeholder>\n        </ToolbarItem>\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group B</Placeholder>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem mdxType=\"ToolbarItem\">\n        <Placeholder bordered mdxType=\"Placeholder\">Item</Placeholder>\n      </ToolbarItem>\n    </Toolbar>\n    <p>Disabled wrapping on toolbar groups:</p>\n    <Toolbar justify=\"space-between\" mdxType=\"Toolbar\">\n      <ToolbarGroup nowrap mdxType=\"ToolbarGroup\">\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group A</Placeholder>\n        </ToolbarItem>\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group A</Placeholder>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarGroup nowrap mdxType=\"ToolbarGroup\">\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group B</Placeholder>\n        </ToolbarItem>\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <Placeholder bordered mdxType=\"Placeholder\">Group B</Placeholder>\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarItem mdxType=\"ToolbarItem\">\n        <Placeholder bordered mdxType=\"Placeholder\">Item</Placeholder>\n      </ToolbarItem>\n    </Toolbar>\n  </>\n    </Playground>\n    <p>{`👉 Depending on your situation, you may need to further control wrapping of text\ncontent placed within Toolbar. The `}<a parentName=\"p\" {...{\n        \"href\": \"/components/text\"\n      }}>{`Text`}</a>{` component is designed\nspecifically for this kind of job.`}</p>\n    <h2 {...{\n      \"id\": \"flexible-items\"\n    }}>{`Flexible Items`}</h2>\n    <p>{`Toolbar items can be made flexible to grow and shrink according to the available\nspace. This is useful e.g. when you need to combine text with an action:`}</p>\n    <Playground __position={5} __code={'<Toolbar>\\n  <ToolbarItem flexible>\\n    <Placeholder bordered>My Headline</Placeholder>\\n  </ToolbarItem>\\n  <ToolbarItem>\\n    <Placeholder bordered>Action</Placeholder>\\n  </ToolbarItem>\\n</Toolbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Toolbar mdxType=\"Toolbar\">\n    <ToolbarItem flexible mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">My Headline</Placeholder>\n    </ToolbarItem>\n    <ToolbarItem mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Action</Placeholder>\n    </ToolbarItem>\n  </Toolbar>\n    </Playground>\n    <p>{`Or to build a classic media layout with image on the left and text on the right:`}</p>\n    <Playground __position={6} __code={'<Toolbar>\\n  <ToolbarItem>\\n    <Placeholder bordered>Media object</Placeholder>\\n  </ToolbarItem>\\n  <ToolbarItem flexible>\\n    <Placeholder bordered>Media body</Placeholder>\\n  </ToolbarItem>\\n</Toolbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      CheckboxField,\n      Button,\n      ButtonGroup,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Toolbar mdxType=\"Toolbar\">\n    <ToolbarItem mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Media object</Placeholder>\n    </ToolbarItem>\n    <ToolbarItem flexible mdxType=\"ToolbarItem\">\n      <Placeholder bordered mdxType=\"Placeholder\">Media body</Placeholder>\n    </ToolbarItem>\n  </Toolbar>\n    </Playground>\n    <h2 {...{\n      \"id\": \"forwarding-html-attributes\"\n    }}>{`Forwarding HTML Attributes`}</h2>\n    <p>{`In addition to the options below in the `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`component's API`}</a>{` section, you\ncan specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or `}<strong parentName=\"p\">{`any HTML attribute you like.`}</strong>{` All\nattributes that don't interfere with the API are forwarded to the root `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`\nHTML element. This enables making the component interactive and helps to improve\nits accessibility.`}</p>\n    <p>{`👉 Refer to the MDN reference for the full list of supported attributes of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div#attributes\"\n      }}>{`div`}</a>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={Toolbar} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"toolbargroup-api\"\n    }}>{`ToolbarGroup API`}</h3>\n    <p>{`A wrapper for grouping ToolbarItems together.`}</p>\n    <Props table of={ToolbarGroup} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"toolbaritem-api\"\n    }}>{`ToolbarItem API`}</h3>\n    <p>{`A wrapper for individual toolbar items.`}</p>\n    <Props table of={ToolbarItem} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Toolbar__gap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Gap between toolbar items`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Toolbar__gap--dense`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Dense gap between toolbar items`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}