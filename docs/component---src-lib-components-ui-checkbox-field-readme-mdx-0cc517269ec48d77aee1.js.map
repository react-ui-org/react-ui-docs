{"version":3,"sources":["webpack:///../src/lib/components/ui/CheckboxField/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","CheckboxField","agree","setAgree","React","changeHandler","checked","label","getNewsletter","setGetNewsletter","helpText","setChecked","isLabelVisible","labelPosition","validationState","validationText","required","disabled","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-checkbox-field-readme-mdx-0cc517269ec48d77aee1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CheckboxField } from './CheckboxField';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"checkboxfield\"\n    }}>{`CheckboxField`}</h1>\n    <p>{`CheckboxField allows users to select one or more options from a set.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the CheckboxField component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { CheckboxField } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [agree, setAgree] = React.useState(true)\\n  return (\\n    <CheckboxField\\n      changeHandler={() => setAgree(!agree)}\\n      checked={agree}\\n      label=\\\"I agree\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CheckboxField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [agree, setAgree] = React.useState(true);\n        return <CheckboxField changeHandler={() => setAgree(!agree)} checked={agree} label=\"I agree\" mdxType=\"CheckboxField\" />;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the CheckboxField when there are lists of options and the user may\n`}<strong parentName=\"p\">{`select any number of choices,`}</strong>{` including zero, one, or several. For\nselecting just a single option from the list, use either the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/radio\"\n          }}>{`Radio`}</a>{` or `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/select-field\"\n          }}>{`SelectField`}</a>{`\ncomponent.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the CheckboxField for boolean (true/false) input `}<strong parentName=\"p\">{`in forms that require\nto be confirmed`}</strong>{` by a button to become active. To toggle things on or off\nwith an immediate effect (without confirmation), use rather the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/toggle\"\n          }}>{`Toggle`}</a>{` component.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Use positive wording for the checkbox label,`}</strong>{` so that it's clear what will\nhappen when the user turns on the checkbox. Avoid negations such as ‚ÄúDon't\nsend me any emails‚Äù which would mean that the user needs to turn the\ncheckbox `}<strong parentName=\"p\">{`on`}</strong>{` in order for something `}<strong parentName=\"p\">{`not`}</strong>{` to happen.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the CheckboxField's label invisible when there is `}<strong parentName=\"p\">{`another visual\nclue`}</strong>{` to guide users through toggling the input.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Visually present groups of choices as groups,`}</strong>{` and clearly separate them\nfrom other groups on the same page.`}</p>\n      </li>\n    </ul>\n    <p>{`üìñ `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/\"\n      }}>{`Read more about checkboxes and radios at Nielsen Norman Group.`}</a></p>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify what will be the impact of\nturning the checkbox on or off.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [getNewsletter, setGetNewsletter] = React.useState(true)\\n  return (\\n    <CheckboxField\\n      changeHandler={() => setGetNewsletter(!getNewsletter)}\\n      checked={getNewsletter}\\n      helpText=\\\"We will not bother you more than once a month, we promise!\\\"\\n      label=\\\"Send me newsletter\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CheckboxField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [getNewsletter, setGetNewsletter] = React.useState(true);\n        return <CheckboxField changeHandler={() => setGetNewsletter(!getNewsletter)} checked={getNewsletter} helpText=\"We will not bother you more than once a month, we promise!\" label=\"Send me newsletter\" mdxType=\"CheckboxField\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"label-options\"\n    }}>{`Label Options`}</h2>\n    <p>{`In some cases, it may be convenient to visually hide the checkbox label. The\nlabel remains accessible to assistive technologies.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [checked, setChecked] = React.useState(true)\\n  return (\\n    <CheckboxField\\n      changeHandler={() => setChecked(!checked)}\\n      checked={checked}\\n      isLabelVisible={false}\\n      label=\\\"You cannot see this\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CheckboxField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checked, setChecked] = React.useState(true);\n        return <CheckboxField changeHandler={() => setChecked(!checked)} checked={checked} isLabelVisible={false} label=\"You cannot see this\" mdxType=\"CheckboxField\" />;\n      }}\n    </Playground>\n    <p>{`It's also possible to display label before input:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [checked, setChecked] = React.useState(true)\\n  return (\\n    <CheckboxField\\n      changeHandler={() => setChecked(!checked)}\\n      checked={checked}\\n      label=\\\"Label precedes input\\\"\\n      labelPosition=\\\"before\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CheckboxField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checked, setChecked] = React.useState(true);\n        return <CheckboxField changeHandler={() => setChecked(!checked)} checked={checked} label=\"Label precedes input\" labelPosition=\"before\" mdxType=\"CheckboxField\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide validation message for states other than valid`}</strong>{` so\nusers know what happened and what action they should take or what options they\nhave.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [agree, setAgree] = React.useState(true)\\n  return (\\n    <>\\n      <CheckboxField\\n        changeHandler={() => setAgree(!agree)}\\n        checked={agree}\\n        label=\\\"I have read and agree with terms and conditions\\\"\\n        validationState=\\\"valid\\\"\\n      />\\n      <CheckboxField\\n        changeHandler={() => setAgree(!agree)}\\n        checked={agree}\\n        label=\\\"I have read and agree with terms and conditions\\\"\\n        validationState=\\\"warning\\\"\\n        validationText=\\\"Please wait 10 minutes until we verify your data.\\\"\\n      />\\n      <CheckboxField\\n        changeHandler={() => setAgree(!agree)}\\n        checked={agree}\\n        label=\\\"I have read and agree with terms and conditions\\\"\\n        required\\n        validationState=\\\"invalid\\\"\\n        validationText=\\\"You must agree to be able to proceed.\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CheckboxField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [agree, setAgree] = React.useState(true);\n        return <>\n        <CheckboxField changeHandler={() => setAgree(!agree)} checked={agree} label=\"I have read and agree with terms and conditions\" validationState=\"valid\" mdxType=\"CheckboxField\" />\n        <CheckboxField changeHandler={() => setAgree(!agree)} checked={agree} label=\"I have read and agree with terms and conditions\" validationState=\"warning\" validationText=\"Please wait 10 minutes until we verify your data.\" mdxType=\"CheckboxField\" />\n        <CheckboxField changeHandler={() => setAgree(!agree)} checked={agree} label=\"I have read and agree with terms and conditions\" required validationState=\"invalid\" validationText=\"You must agree to be able to proceed.\" mdxType=\"CheckboxField\" />\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`Disabled state makes the input unavailable.`}</p>\n    <Playground __position={5} __code={'<CheckboxField disabled label=\\\"Disabled checkbox\\\" />\\n<CheckboxField checked disabled label=\\\"Disabled checkbox, checked\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CheckboxField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CheckboxField disabled label=\"Disabled checkbox\" mdxType=\"CheckboxField\" />\n  <CheckboxField checked disabled label=\"Disabled checkbox, checked\" mdxType=\"CheckboxField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`In addition to the options below, you can add any custom attributes that do not\ninterfere with the API, and they will be passed to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` HTML element.\nThis is useful mainly to improve component's accessibility.`}</p>\n    <Props table of={CheckboxField} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <p>{`Head to `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/forms\"\n      }}>{`Forms Theming`}</a>{` to see shared form theming\noptions. On top of that, the following options are available for CheckboxField.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--checkbox__border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input corner radius`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--checkbox--checked__background-image`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background image of checked input`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}