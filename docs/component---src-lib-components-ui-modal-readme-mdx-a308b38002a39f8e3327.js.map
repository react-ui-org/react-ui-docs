{"version":3,"sources":["webpack:///../src/lib/components/ui/Modal/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Button","Modal","ParsableModal","modalOpen","setModalOpen","React","modalSize","setModalSize","clickHandler","label","priority","title","actions","variant","closeHandler","size","modalScrollMode","setModalScrollMode","autoFocus","scrollMode","role","aria-label","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-modal-readme-mdx-a308b38002a39f8e3327.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Button } from '../Button/Button';\nimport { TranslatedModal as Modal, Modal as ParsableModal } from './Modal';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`Modal allows to prompt users to take or complete an action.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To use the Modal component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Modal } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Modal\n  title=\"Warning\"\n  actions={[{\n    label: 'Delete',\n    variant: 'danger',\n    clickHandler: () => {},\n  }]}\n  closeHandler={() => {}}\n>\n  <p>\n    Do you really want to delete the user <code>admin</code>? This cannot be\n    undone.\n  </p>\n</Modal>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use modals to `}<strong parentName=\"li\">{`confirm an action,`}</strong>{` display a `}<strong parentName=\"li\">{`blocking alert`}</strong>{`, or to\nreveal `}<strong parentName=\"li\">{`contextual options or settings`}</strong>{` that cannot be displayed inline\nwith the parent content.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`The title`}</strong>{` should communicate the `}<strong parentName=\"li\">{`purpose of the modal`}</strong>{` rather than a\ngeneric text. Eg. “Delete the user?” tells more than “Are you sure?” or\n“Warning”.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Modal actions`}</strong>{` should correspond to the modal purpose, too. Eg. “Delete”\ntells better what happens rather than “OK”.`}</li>\n      <li parentName=\"ul\">{`Modal `}<strong parentName=\"li\">{`automatically focuses the first action`}</strong>{` in footer by default. To turn\nthis feature off, set the `}<inlineCode parentName=\"li\">{`autofocus`}</inlineCode>{` prop to `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Avoid stacking`}</strong>{` of modals. While it may technically work, the modal is just\nnot designed for that.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Modal is available in three fixed-width sizes: small, medium, and large. Modals\nof any size automatically shrink when they cannot fit the screen width.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [modalSize, setModalSize] = React.useState(\\'small\\')\\n  return (\\n    <>\\n      <Button\\n        clickHandler={() => {\\n          setModalSize(\\'small\\')\\n          setModalOpen(true)\\n        }}\\n        label=\\\"Launch small modal\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <Button\\n        clickHandler={() => {\\n          setModalSize(\\'medium\\')\\n          setModalOpen(true)\\n        }}\\n        label=\\\"Launch medium modal\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <Button\\n        clickHandler={() => {\\n          setModalSize(\\'large\\')\\n          setModalOpen(true)\\n        }}\\n        label=\\\"Launch large modal\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            title=\\\"Delete the user?\\\"\\n            actions={[\\n              {\\n                clickHandler: () => setModalOpen(false),\\n                label: \\'Delete\\',\\n                variant: \\'danger\\',\\n              },\\n            ]}\\n            closeHandler={() => setModalOpen(false)}\\n            size={modalSize}\\n          >\\n            <p>\\n              Do you really want to delete the user <code>admin</code>? This\\n              cannot be undone.\\n            </p>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      Modal,\n      ParsableModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [modalSize, setModalSize] = React.useState('small');\n        return <>\n        <Button clickHandler={() => {\n            setModalSize('small');\n            setModalOpen(true);\n          }} label=\"Launch small modal\" priority=\"outline\" mdxType=\"Button\" />\n        <Button clickHandler={() => {\n            setModalSize('medium');\n            setModalOpen(true);\n          }} label=\"Launch medium modal\" priority=\"outline\" mdxType=\"Button\" />\n        <Button clickHandler={() => {\n            setModalSize('large');\n            setModalOpen(true);\n          }} label=\"Launch large modal\" priority=\"outline\" mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal title=\"Delete the user?\" actions={[{\n              clickHandler: () => setModalOpen(false),\n              label: 'Delete',\n              variant: 'danger'\n            }]} closeHandler={() => setModalOpen(false)} size={modalSize} mdxType=\"Modal\">\n              <p>\n                Do you really want to delete the user <code>admin</code>?\n                This cannot be undone.\n              </p>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <p>{`On top of that, the modal is able to adjust to the width of its content.`}</p>\n    <p>{`👉 Please note the auto width may not function correctly in combination with\nother auto layout mechanisms, eg. the auto-width\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/layout/form-layout#label-width\"\n      }}>{`FormLayout`}</a>{`. It's just too much\nmagic that doesn't work together yet 🎩.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  return (\\n    <>\\n      <Button\\n        clickHandler={() => setModalOpen(true)}\\n        label=\\\"Launch auto-width modal\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            title=\\\"Delete the user?\\\"\\n            actions={[\\n              {\\n                clickHandler: () => setModalOpen(false),\\n                label: \\'Delete\\',\\n                variant: \\'danger\\',\\n              },\\n            ]}\\n            closeHandler={() => setModalOpen(false)}\\n            size=\\\"auto\\\"\\n          >\\n            <p>\\n              Do you really want to delete the user <code>admin</code>? This\\n              cannot be undone.\\n            </p>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      Modal,\n      ParsableModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        return <>\n        <Button clickHandler={() => setModalOpen(true)} label=\"Launch auto-width modal\" priority=\"outline\" mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal title=\"Delete the user?\" actions={[{\n              clickHandler: () => setModalOpen(false),\n              label: 'Delete',\n              variant: 'danger'\n            }]} closeHandler={() => setModalOpen(false)} size=\"auto\" mdxType=\"Modal\">\n              <p>\n                Do you really want to delete the user <code>admin</code>?\n                This cannot be undone.\n              </p>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"scrolling-long-content\"\n    }}>{`Scrolling Long Content`}</h2>\n    <p>{`When modals become too long for the user's viewport or device, they scroll\nindependent of the page itself.`}</p>\n    <p>{`The inner implementation of body scrolling uses a partially\n`}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`customizable`}</a>{` instance of the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/scroll-view\"\n      }}>{`ScrollView`}</a>{`\ncomponent.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [modalScrollMode, setModalScrollMode] = React.useState(\\'body\\')\\n  return (\\n    <>\\n      <Button\\n        clickHandler={() => {\\n          setModalScrollMode(\\'body\\')\\n          setModalOpen(true)\\n        }}\\n        label=\\\"Launch modal with scrolling body\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <Button\\n        clickHandler={() => {\\n          setModalScrollMode(\\'modal\\')\\n          setModalOpen(true)\\n        }}\\n        label=\\\"Launch scrolling modal\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            title=\\\"Modal with long content\\\"\\n            actions={[\\n              {\\n                clickHandler: () => setModalOpen(false),\\n                label: \\'OK\\',\\n              },\\n            ]}\\n            autoFocus={false}\\n            closeHandler={() => setModalOpen(false)}\\n            scrollMode={modalScrollMode}\\n            size=\\\"small\\\"\\n          >\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n              commodo ligula eget dolor. Aenean massa.\\n            </p>\\n            <p>\\n              Cum sociis natoque penatibus et magnis dis parturient montes,\\n              nascetur ridiculus mus. Donec quam felis, ultricies nec,\\n              pellentesque eu, pretium quis, sem.\\n            </p>\\n            <p>\\n              Nulla consequat massa quis enim. Donec pede justo, fringilla\\n              vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\\n              ut, imperdiet a, venenatis vitae, justo.\\n            </p>\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n              commodo ligula eget dolor. Aenean massa.\\n            </p>\\n            <p>\\n              Cum sociis natoque penatibus et magnis dis parturient montes,\\n              nascetur ridiculus mus. Donec quam felis, ultricies nec,\\n              pellentesque eu, pretium quis, sem.\\n            </p>\\n            <p>\\n              Nulla consequat massa quis enim. Donec pede justo, fringilla\\n              vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\\n              ut, imperdiet a, venenatis vitae, justo.\\n            </p>\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n              commodo ligula eget dolor. Aenean massa.\\n            </p>\\n            <p>\\n              Cum sociis natoque penatibus et magnis dis parturient montes,\\n              nascetur ridiculus mus. Donec quam felis, ultricies nec,\\n              pellentesque eu, pretium quis, sem.\\n            </p>\\n            <p>\\n              Nulla consequat massa quis enim. Donec pede justo, fringilla\\n              vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\\n              ut, imperdiet a, venenatis vitae, justo.\\n            </p>\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n              commodo ligula eget dolor. Aenean massa.\\n            </p>\\n            <p>\\n              Cum sociis natoque penatibus et magnis dis parturient montes,\\n              nascetur ridiculus mus. Donec quam felis, ultricies nec,\\n              pellentesque eu, pretium quis, sem.\\n            </p>\\n            <p>\\n              Nulla consequat massa quis enim. Donec pede justo, fringilla\\n              vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\\n              ut, imperdiet a, venenatis vitae, justo.\\n            </p>\\n            <p>\\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n              commodo ligula eget dolor. Aenean massa.\\n            </p>\\n            <p>\\n              Cum sociis natoque penatibus et magnis dis parturient montes,\\n              nascetur ridiculus mus. Donec quam felis, ultricies nec,\\n              pellentesque eu, pretium quis, sem.\\n            </p>\\n            <p>\\n              Nulla consequat massa quis enim. Donec pede justo, fringilla\\n              vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\\n              ut, imperdiet a, venenatis vitae, justo.\\n            </p>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      Modal,\n      ParsableModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [modalScrollMode, setModalScrollMode] = React.useState('body');\n        return <>\n        <Button clickHandler={() => {\n            setModalScrollMode('body');\n            setModalOpen(true);\n          }} label=\"Launch modal with scrolling body\" priority=\"outline\" mdxType=\"Button\" />\n        <Button clickHandler={() => {\n            setModalScrollMode('modal');\n            setModalOpen(true);\n          }} label=\"Launch scrolling modal\" priority=\"outline\" mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal title=\"Modal with long content\" actions={[{\n              clickHandler: () => setModalOpen(false),\n              label: 'OK'\n            }]} autoFocus={false} closeHandler={() => setModalOpen(false)} scrollMode={modalScrollMode} size=\"small\" mdxType=\"Modal\">\n              <p>\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n                commodo ligula eget dolor. Aenean massa.\n              </p>\n              <p>\n                Cum sociis natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec quam felis, ultricies nec,\n                pellentesque eu, pretium quis, sem.\n              </p>\n              <p>\n                Nulla consequat massa quis enim. Donec pede justo, fringilla\n                vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n                ut, imperdiet a, venenatis vitae, justo.\n              </p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n                commodo ligula eget dolor. Aenean massa.\n              </p>\n              <p>\n                Cum sociis natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec quam felis, ultricies nec,\n                pellentesque eu, pretium quis, sem.\n              </p>\n              <p>\n                Nulla consequat massa quis enim. Donec pede justo, fringilla\n                vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n                ut, imperdiet a, venenatis vitae, justo.\n              </p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n                commodo ligula eget dolor. Aenean massa.\n              </p>\n              <p>\n                Cum sociis natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec quam felis, ultricies nec,\n                pellentesque eu, pretium quis, sem.\n              </p>\n              <p>\n                Nulla consequat massa quis enim. Donec pede justo, fringilla\n                vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n                ut, imperdiet a, venenatis vitae, justo.\n              </p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n                commodo ligula eget dolor. Aenean massa.\n              </p>\n              <p>\n                Cum sociis natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec quam felis, ultricies nec,\n                pellentesque eu, pretium quis, sem.\n              </p>\n              <p>\n                Nulla consequat massa quis enim. Donec pede justo, fringilla\n                vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n                ut, imperdiet a, venenatis vitae, justo.\n              </p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n                commodo ligula eget dolor. Aenean massa.\n              </p>\n              <p>\n                Cum sociis natoque penatibus et magnis dis parturient montes,\n                nascetur ridiculus mus. Donec quam felis, ultricies nec,\n                pellentesque eu, pretium quis, sem.\n              </p>\n              <p>\n                Nulla consequat massa quis enim. Donec pede justo, fringilla\n                vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n                ut, imperdiet a, venenatis vitae, justo.\n              </p>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"long-content-and-autofocus\"\n    }}>{`Long Content and Autofocus`}</h3>\n    <p>{`👉 If you set the `}<inlineCode parentName=\"p\">{`scrollMode`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`modal`}</inlineCode>{`, you may want to turn `}<inlineCode parentName=\"p\">{`autoFocus`}</inlineCode>{` off\nto prevent the modal from scrolling to the end immediately after being opened.`}</p>\n    <h2 {...{\n      \"id\": \"blocking-modals\"\n    }}>{`Blocking Modals`}</h2>\n    <p>{`There are situations when you need to interrupt user's flow and lock entire UI\nto prevent interaction. That's where blocking modals may come handy.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  return (\\n    <>\\n      <Button\\n        clickHandler={() => setModalOpen(true)}\\n        label=\\\"Launch blocking modal\\\"\\n        priority=\\\"outline\\\"\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal title=\\\"Update is in progress\\\" size=\\\"auto\\\">\\n            <p>\\n              <span role=\\\"img\\\" aria-label=\\\"Warning\\\">\\n                ⚠️\\n              </span>\\n              Please wait a few seconds until the firmware update is finished.\\n              Don&apos;t turn off the device!\\n            </p>\\n            <Button\\n              clickHandler={() => setModalOpen(false)}\\n              label=\\\"Close the demo\\\"\\n              priority=\\\"flat\\\"\\n            />\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      Modal,\n      ParsableModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        return <>\n        <Button clickHandler={() => setModalOpen(true)} label=\"Launch blocking modal\" priority=\"outline\" mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal title=\"Update is in progress\" size=\"auto\" mdxType=\"Modal\">\n              <p>\n                <span role=\"img\" aria-label=\"Warning\">⚠️</span>\n                Please wait a few seconds until the firmware update is finished.\n                Don&apos;t turn off the device!\n              </p>\n              <Button clickHandler={() => setModalOpen(false)} label=\"Close the demo\" priority=\"flat\" mdxType=\"Button\" />\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={ParsableModal} mdxType=\"Props\" />\n    <hr></hr>\n    <p>{`Next: `}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/radio\"\n      }}>{`Radio →`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}