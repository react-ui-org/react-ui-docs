{"version":3,"sources":["webpack:///../src/lib/components/layout/FormLayout/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Placeholder","Button","ButtonGroup","CheckboxField","FileInputField","Radio","SelectField","TextArea","TextField","Toggle","Center","Toolbar","ToolbarItem","FormLayout","FormLayoutCustomField","id","label","fieldLayout","labelWidth","setLabelWidth","React","customLabelWidth","setCustomLabelWidth","align","aria-labelledby","clickHandler","variant","changeHandler","e","target","value","inputSize","isLabelVisible","layout","bordered","height","autoWidth","innerFieldSize","placeholder","validationState","isChecked","setIsChecked","fullWidth","labelForId","dense","checked","setFieldLayout","fruit","setFruit","isDeliveryAddress","setIsDeliveryAddress","receiveNewsletter","setReceiveNewsletter","options","helpText","type","validationText","rows","required","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-layout-form-layout-readme-mdx-bceb2f5a7aa9c7de0c80.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Placeholder } from '../../../../docs/_components/Placeholder/Placeholder';\nimport { Button } from '../../ui/Button/Button';\nimport { ButtonGroup } from '../../ui/ButtonGroup/ButtonGroup';\nimport { CheckboxField } from '../../ui/CheckboxField/CheckboxField';\nimport { FileInputField } from '../../ui/FileInputField/FileInputField';\nimport { Radio } from '../../ui/Radio/Radio';\nimport { SelectField } from '../../ui/SelectField/SelectField';\nimport { TextArea } from '../../ui/TextArea/TextArea';\nimport { TextField } from '../../ui/TextField/TextField';\nimport { Toggle } from '../../ui/Toggle/Toggle';\nimport { Center } from '../Center/Center';\nimport { Toolbar } from '../Toolbar/Toolbar';\nimport { ToolbarItem } from '../Toolbar/ToolbarItem';\nimport { FormLayout } from './FormLayout';\nimport { FormLayoutCustomField } from './FormLayoutCustomField';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formlayout\"\n    }}>{`FormLayout`}</h1>\n    <p>{`The FormLayout aligns form fields into an organized grid.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the FormLayout component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { FormLayout } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<FormLayout>\\n  <TextField id=\\\"my-text-field\\\" label=\\\"A form element\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field\" label=\"A form element\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <p>{`Since all form fields in React UI are styled as inline blocks, they `}<strong parentName=\"p\">{`queue up\none after another in a row by default.`}</strong>{` The FormLayout component is there to\nmake building `}<strong parentName=\"p\">{`vertical and horizontal forms`}</strong>{` easy. It uses the right tool for\nthe job: the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\"\n      }}>{`CSS grid layout`}</a>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Put `}<strong parentName=\"p\">{`only form field components`}</strong>{` from React UI inside the FormLayout and\nmake sure they are `}<strong parentName=\"p\">{`direct descendants`}</strong>{` of it (React\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://reactjs.org/docs/fragments.html\"\n          }}>{`fragments`}</a>{`\nare supported!). All React UI form components are ready for this use case and\ndon't need to be wrapped in any `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`s. Namely, the FormLayout supports the\nfollowing React UI components:\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/checkbox-field\"\n          }}>{`CheckboxField`}</a>{`,\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/radio\"\n          }}>{`Radio`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/select-field\"\n          }}>{`SelectField`}</a>{`,\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/text-area\"\n          }}>{`TextArea`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/text-field\"\n          }}>{`TextField`}</a>{`,\nand `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/toggle\"\n          }}>{`Toggle`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the `}<a parentName=\"p\" {...{\n            \"href\": \"#custom-fields\"\n          }}>{`FormLayoutCustomField`}</a>{` component when you need to\nplace any `}<strong parentName=\"p\">{`custom content`}</strong>{` inside the FormLayout. This layout helper ensures\nyour content is properly spaced and aligned with other FormLayout elements.\nDo `}<strong parentName=\"p\">{`not`}</strong>{` try to put any custom HTML or React components directly into\nFormLayout without wrapping it with the FormLayoutCustomField first.`}</p>\n      </li>\n    </ul>\n    <p>{`👉 For usage in auto-width Modal, you may need to turn on the `}<inlineCode parentName=\"p\">{`autoWidth`}</inlineCode>{` option\nfor your FormLayout. This prevents FormLayout from unexpectedly growing in\nbrowsers that\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/issues/232\"\n      }}>{`don't support`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\"\n      }}>{`CSS subgrid`}</a>{`\nin cases when there are longer validation messages or help texts.`}</p>\n    <h2 {...{\n      \"id\": \"vertical-layout\"\n    }}>{`Vertical Layout`}</h2>\n    <p>{`Vertical FormLayout works similar to the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/layout/list\"\n      }}>{`List`}</a>{` layout\nexcept that no equivalent of ListItems is needed. It stacks the form fields\nvertically while it forces the vertical layout mode on them. To use this layout,\nsimply wrap your form fields with the FormLayout component:`}</p>\n    <Playground __position={1} __code={'<FormLayout>\\n  <TextField id=\\\"my-text-field-vertical-1\\\" label=\\\"A form element\\\" />\\n  <TextField id=\\\"my-text-field-vertical-2\\\" label=\\\"Another form element\\\" />\\n  <TextField id=\\\"my-text-field-vertical-3\\\" label=\\\"Yet another one\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-vertical-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-vertical-2\" label=\"Another form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-vertical-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`Horizontal FormLayout is designed for horizontal form fields: it nicely `}<strong parentName=\"p\">{`aligns\nlabels and inputs in an organized grid.`}</strong>{` It is applied starting from the `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`\nviewport size onward and it forces the horizontal layout on the fields.`}</p>\n    <Playground __position={2} __code={'<FormLayout fieldLayout=\\\"horizontal\\\">\\n  <TextField id=\\\"my-text-field-horizontal-1\\\" label=\\\"A form element\\\" />\\n  <TextField id=\\\"my-text-field-horizontal-2\\\" label=\\\"Another form element\\\" />\\n  <TextField id=\\\"my-text-field-horizontal-3\\\" label=\\\"Yet another one\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-horizontal-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-horizontal-2\" label=\"Another form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-horizontal-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h3 {...{\n      \"id\": \"label-width\"\n    }}>{`Label Width`}</h3>\n    <p>{`In the horizontal layout mode, it's possible to fine-tune the way how the form\nwill be aligned through the `}<inlineCode parentName=\"p\">{`labelWidth`}</inlineCode>{` option to cover various design\nrequirements. It comes with `}<strong parentName=\"p\">{`three globally shared options:`}</strong>{` default width,\nauto width, and limited width. For cases where an individual manual width works\nbetter, there is the `}<strong parentName=\"p\">{`local custom width mode`}</strong>{` which enables setting a width\nthat is applied just for the current FormLayout.`}</p>\n    <p>{`👉 All global label width options can be easily `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/overview\"\n      }}>{`customized`}</a>{`\nwith CSS custom properties.`}</p>\n    <h4 {...{\n      \"id\": \"label-width-options\"\n    }}>{`Label Width Options`}</h4>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` mode (global) sets the width of all labels to a `}<strong parentName=\"p\">{`global default\nvalue`}</strong>{` which is 10 em.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` mode (global) aligns the form `}<strong parentName=\"p\">{`according to the longest label.`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`limited`}</inlineCode>{` mode (global) works as `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` except it's intended for values\nthat `}<strong parentName=\"p\">{`set a limit for the label width.`}</strong>{` Its default value is\n`}<inlineCode parentName=\"p\">{`fitcontent(50%)`}</inlineCode>{` which also aligns the form according to the longest label\nlike `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{`, but with the difference that the labels cannot be wider than\n50 % of the FormLayout.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`custom`}</inlineCode>{` mode (local) allows you to enter any `}<strong parentName=\"p\">{`custom label width for\nindividual FormLayouts.`}</strong></p>\n      </li>\n    </ul>\n    <p>{`Try to resize the playground to see how individual options work.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [labelWidth, setLabelWidth] = React.useState(\\'default\\')\\n  const [customLabelWidth, setCustomLabelWidth] = React.useState(\\'20em\\')\\n  return (\\n    <div>\\n      <Toolbar align=\\\"baseline\\\">\\n        <ToolbarItem>\\n          <span id=\\\"label-width-options-label\\\">Label width:</span>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <ButtonGroup aria-labelledby=\\\"#label-width-options-label\\\">\\n            <Button\\n              label=\\\"default\\\"\\n              clickHandler={() => setLabelWidth(\\'default\\')}\\n              variant={labelWidth === \\'default\\' ? \\'dark\\' : \\'primary\\'}\\n            />\\n            <Button\\n              label=\\\"auto\\\"\\n              clickHandler={() => setLabelWidth(\\'auto\\')}\\n              variant={labelWidth === \\'auto\\' ? \\'dark\\' : \\'primary\\'}\\n            />\\n            <Button\\n              label=\\\"limited\\\"\\n              clickHandler={() => setLabelWidth(\\'limited\\')}\\n              variant={labelWidth === \\'limited\\' ? \\'dark\\' : \\'primary\\'}\\n            />\\n            <Button\\n              label=\\\"custom\\\"\\n              clickHandler={() => setLabelWidth(\\'custom\\')}\\n              variant={labelWidth === \\'custom\\' ? \\'dark\\' : \\'primary\\'}\\n            />\\n          </ButtonGroup>\\n        </ToolbarItem>\\n        {labelWidth === \\'custom\\' && (\\n          <ToolbarItem>\\n            <TextField\\n              changeHandler={e => setCustomLabelWidth(e.target.value)}\\n              id=\\\"form-layout-custom-label-width\\\"\\n              inputSize={5}\\n              isLabelVisible={false}\\n              label=\\\"Custom label width\\\"\\n              layout=\\\"horizontal\\\"\\n              value={customLabelWidth}\\n            />\\n          </ToolbarItem>\\n        )}\\n      </Toolbar>\\n      <FormLayout\\n        fieldLayout=\\\"horizontal\\\"\\n        labelWidth={labelWidth === \\'custom\\' ? customLabelWidth : labelWidth}\\n      >\\n        <TextField id=\\\"my-text-field-label-width-1\\\" label=\\\"A form element\\\" />\\n        <TextField\\n          id=\\\"my-text-field-label-width-2\\\"\\n          label={\\n            \\'Another form element with a very long label that is so \\' +\\n            \\'long that in the auto mode, it should make the label column \\' +\\n            \\'grow until the inputs reach the end of the line, but it will \\' +\\n            \\'not exceed 50 % of the FormLayout width in the limited label \\' +\\n            \\'width mode\\'\\n          }\\n        />\\n        <TextField id=\\\"my-text-field-label-width-3\\\" label=\\\"Yet another one\\\" />\\n      </FormLayout>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [labelWidth, setLabelWidth] = React.useState('default');\n        const [customLabelWidth, setCustomLabelWidth] = React.useState('20em');\n        return <div>\n        <Toolbar align=\"baseline\" mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <span id=\"label-width-options-label\">Label width:</span>\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <ButtonGroup aria-labelledby=\"#label-width-options-label\" mdxType=\"ButtonGroup\">\n              <Button label=\"default\" clickHandler={() => setLabelWidth('default')} variant={labelWidth === 'default' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              <Button label=\"auto\" clickHandler={() => setLabelWidth('auto')} variant={labelWidth === 'auto' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              <Button label=\"limited\" clickHandler={() => setLabelWidth('limited')} variant={labelWidth === 'limited' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              <Button label=\"custom\" clickHandler={() => setLabelWidth('custom')} variant={labelWidth === 'custom' ? 'dark' : 'primary'} mdxType=\"Button\" />\n            </ButtonGroup>\n          </ToolbarItem>\n          {labelWidth === 'custom' && <ToolbarItem mdxType=\"ToolbarItem\">\n              <TextField changeHandler={e => setCustomLabelWidth(e.target.value)} id=\"form-layout-custom-label-width\" inputSize={5} isLabelVisible={false} label=\"Custom label width\" layout=\"horizontal\" value={customLabelWidth} mdxType=\"TextField\" />\n            </ToolbarItem>}\n        </Toolbar>\n        <FormLayout fieldLayout=\"horizontal\" labelWidth={labelWidth === 'custom' ? customLabelWidth : labelWidth} mdxType=\"FormLayout\">\n          <TextField id=\"my-text-field-label-width-1\" label=\"A form element\" mdxType=\"TextField\" />\n          <TextField id=\"my-text-field-label-width-2\" label={'Another form element with a very long label that is so ' + 'long that in the auto mode, it should make the label column ' + 'grow until the inputs reach the end of the line, but it will ' + 'not exceed 50 % of the FormLayout width in the limited label ' + 'width mode'} mdxType=\"TextField\" />\n          <TextField id=\"my-text-field-label-width-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n        </FormLayout>\n      </div>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"limitations\"\n    }}>{`Limitations`}</h3>\n    <h4 {...{\n      \"id\": \"modals\"\n    }}>{`Modals`}</h4>\n    <p>{`Please note the `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`limited`}</inlineCode>{` label width options may not function\ncorrectly in combination with other auto layout mechanisms, e.g. the auto-width\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/modal\"\n      }}>{`Modal`}</a>{`. It's just too much of magic that doesn't quite\nwork together yet 🎩.`}</p>\n    <h4 {...{\n      \"id\": \"inline-form-fields\"\n    }}>{`Inline Form Fields`}</h4>\n    <p>{`CheckboxField and Toggle always display their labels after inputs inside\nFormLayout. In other words, their labels never appear in a column with other\nfields' labels even when they have `}<inlineCode parentName=\"p\">{`labelPosition`}</inlineCode>{` set to `}<inlineCode parentName=\"p\">{`before`}</inlineCode>{`. This feature\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/issues/232\"\n      }}>{`will be implemented`}</a>{`\nonce\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\"\n      }}>{`CSS subgrid`}</a>{`\nis fully supported in\n`}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/browsers-and-devices\"\n      }}>{`browsers that we support`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"alignment\"\n    }}>{`Alignment`}</h2>\n    <p>{`To align whole FormLayout to center of a container, simply wrap it with the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/layout/center\"\n      }}>{`Center`}</a>{` layout.`}</p>\n    <Playground __position={4} __code={'<Placeholder bordered height=\\\"24rem\\\">\\n  <Center>\\n    <FormLayout autoWidth>\\n      <TextField id=\\\"my-text-field-auto-width-1\\\" label=\\\"A form element\\\" />\\n      <TextField\\n        id=\\\"my-text-field-auto-width-2\\\"\\n        label=\\\"Another form element\\\"\\n      />\\n      <TextField id=\\\"my-text-field-auto-width-3\\\" label=\\\"Yet another one\\\" />\\n    </FormLayout>\\n  </Center>\\n</Placeholder>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Placeholder bordered height=\"24rem\" mdxType=\"Placeholder\">\n    <Center mdxType=\"Center\">\n      <FormLayout autoWidth mdxType=\"FormLayout\">\n        <TextField id=\"my-text-field-auto-width-1\" label=\"A form element\" mdxType=\"TextField\" />\n        <TextField id=\"my-text-field-auto-width-2\" label=\"Another form element\" mdxType=\"TextField\" />\n        <TextField id=\"my-text-field-auto-width-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n      </FormLayout>\n    </Center>\n  </Placeholder>\n    </Playground>\n    <h2 {...{\n      \"id\": \"custom-fields\"\n    }}>{`Custom Fields`}</h2>\n    <p>{`You can even place any content you need into the FormLayout — just wrap it with\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"#formlayoutcustomfield\"\n      }}>{`FormLayoutCustomField`}</a>{` component. This layout\nhelper ensures your content is properly spaced and aligned with to other\nFormLayout elements. FormLayoutCustomFields are designed to work solely inside\nthe FormLayout component.`}</p>\n    <Playground __position={5} __code={'<FormLayout fieldLayout=\\\"horizontal\\\" labelWidth=\\\"auto\\\">\\n  <TextField id=\\\"my-text-field-custom-1\\\" label=\\\"A form element\\\" />\\n  <FormLayoutCustomField label=\\\"Optional custom field label\\\">\\n    <Placeholder bordered>Custom field content</Placeholder>\\n  </FormLayoutCustomField>\\n  <TextField id=\\\"my-text-field-custom-2\\\" label=\\\"Another form element\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\" mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-custom-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <FormLayoutCustomField label=\"Optional custom field label\" mdxType=\"FormLayoutCustomField\">\n      <Placeholder bordered mdxType=\"Placeholder\">Custom field content</Placeholder>\n    </FormLayoutCustomField>\n    <TextField id=\"my-text-field-custom-2\" label=\"Another form element\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <p>{`👉 While you can set FormLayoutCustomField as `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`valid`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{`\nand its styles may affect contained form fields through CSS cascade, don't\nforget to mirror the aforementioned properties to the contained form fields too\nas API options as such are `}<strong parentName=\"p\">{`not`}</strong>{` inherited.`}</p>\n    <h3 {...{\n      \"id\": \"label-alignment\"\n    }}>{`Label Alignment`}</h3>\n    <p>{`If you are in a situation with one or more box form fields inside your\nFormLayoutCustomField, you may want to have its label aligned with the fields\ninside. Since it's\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/issues/265\"\n      }}>{`not quite possible to do this automatically`}</a>{`\ndue to limited browser support, there is `}<inlineCode parentName=\"p\">{`innerFieldSize`}</inlineCode>{` option which accepts\nany of existing box field sizes (small, medium, or large) and is intended right\nfor this task.`}</p>\n    <Playground __position={6} __code={'<FormLayout fieldLayout=\\\"horizontal\\\" labelWidth=\\\"auto\\\">\\n  <TextField id=\\\"my-text-field-custom-alignment-1\\\" label=\\\"A form element\\\" />\\n  <FormLayoutCustomField\\n    innerFieldSize=\\\"medium\\\"\\n    label=\\\"Custom field label aligned to inner text input\\\"\\n  >\\n    <TextField\\n      id=\\\"my-text-field-custom-alignment-2\\\"\\n      isLabelVisible={false}\\n      label=\\\"A form element\\\"\\n      placeholder=\\\"Text field with invisible label\\\"\\n    />\\n  </FormLayoutCustomField>\\n  <TextField\\n    id=\\\"my-text-field-custom-alignment-3\\\"\\n    label=\\\"Another form element\\\"\\n  />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\" mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-custom-alignment-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <FormLayoutCustomField innerFieldSize=\"medium\" label=\"Custom field label aligned to inner text input\" mdxType=\"FormLayoutCustomField\">\n      <TextField id=\"my-text-field-custom-alignment-2\" isLabelVisible={false} label=\"A form element\" placeholder=\"Text field with invisible label\" mdxType=\"TextField\" />\n    </FormLayoutCustomField>\n    <TextField id=\"my-text-field-custom-alignment-3\" label=\"Another form element\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Custom fields support the same validation states as regular form fields to\nprovide labels with optional feedback style.`}</p>\n    <Playground __position={7} __code={'<FormLayout fieldLayout=\\\"horizontal\\\" labelWidth=\\\"auto\\\">\\n  <TextField id=\\\"my-text-field-custom-validation-1\\\" label=\\\"A form element\\\" />\\n  <FormLayoutCustomField\\n    label=\\\"Custom field label in valid state\\\"\\n    validationState=\\\"valid\\\"\\n  >\\n    <Placeholder bordered>Custom field content</Placeholder>\\n  </FormLayoutCustomField>\\n  <TextField\\n    id=\\\"my-text-field-custom-validation-2\\\"\\n    label=\\\"Another form element\\\"\\n  />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\" mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-custom-validation-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <FormLayoutCustomField label=\"Custom field label in valid state\" validationState=\"valid\" mdxType=\"FormLayoutCustomField\">\n      <Placeholder bordered mdxType=\"Placeholder\">Custom field content</Placeholder>\n    </FormLayoutCustomField>\n    <TextField id=\"my-text-field-custom-validation-2\" label=\"Another form element\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h3 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h3>\n    <p>{`If possible, use the `}<inlineCode parentName=\"p\">{`labelForId`}</inlineCode>{` option to provide ID of contained form field\nso the field remains accessible via custom field label.`}</p>\n    <p>{`You can also specify size of contained form field so custom field label is\nproperly vertically aligned.`}</p>\n    <Playground __position={8} __code={'() => {\\n  const [isChecked, setIsChecked] = React.useState(false)\\n  return (\\n    <FormLayout fieldLayout=\\\"horizontal\\\" labelWidth=\\\"auto\\\">\\n      <TextField\\n        id=\\\"my-text-field-custom-accessibility-1\\\"\\n        label=\\\"A form element\\\"\\n      />\\n      <FormLayoutCustomField\\n        fullWidth\\n        label=\\\"Custom field label aligned with medium form field\\\"\\n        labelForId=\\\"my-text-field-custom-accessibility-2\\\"\\n        innerFieldSize=\\\"medium\\\"\\n      >\\n        <Toolbar align=\\\"middle\\\" dense>\\n          <ToolbarItem>\\n            <TextField\\n              id=\\\"my-text-field-custom-accessibility-2\\\"\\n              isLabelVisible={false}\\n              label=\\\"A form element\\\"\\n              placeholder=\\\"Text field with invisible label\\\"\\n            />\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <CheckboxField\\n              changeHandler={() => setIsChecked(!isChecked)}\\n              checked={isChecked}\\n              id=\\\"my-checkbox-field-custom-accessibility-1\\\"\\n              label=\\\"Another form field\\\"\\n            />\\n          </ToolbarItem>\\n        </Toolbar>\\n      </FormLayoutCustomField>\\n      <TextField\\n        id=\\\"my-text-field-custom-accessibility-3\\\"\\n        label=\\\"Another form element\\\"\\n      />\\n    </FormLayout>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isChecked, setIsChecked] = React.useState(false);\n        return <FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\" mdxType=\"FormLayout\">\n        <TextField id=\"my-text-field-custom-accessibility-1\" label=\"A form element\" mdxType=\"TextField\" />\n        <FormLayoutCustomField fullWidth label=\"Custom field label aligned with medium form field\" labelForId=\"my-text-field-custom-accessibility-2\" innerFieldSize=\"medium\" mdxType=\"FormLayoutCustomField\">\n          <Toolbar align=\"middle\" dense mdxType=\"Toolbar\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <TextField id=\"my-text-field-custom-accessibility-2\" isLabelVisible={false} label=\"A form element\" placeholder=\"Text field with invisible label\" mdxType=\"TextField\" />\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <CheckboxField changeHandler={() => setIsChecked(!isChecked)} checked={isChecked} id=\"my-checkbox-field-custom-accessibility-1\" label=\"Another form field\" mdxType=\"CheckboxField\" />\n            </ToolbarItem>\n          </Toolbar>\n        </FormLayoutCustomField>\n        <TextField id=\"my-text-field-custom-accessibility-3\" label=\"Another form element\" mdxType=\"TextField\" />\n      </FormLayout>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"full-example\"\n    }}>{`Full Example`}</h2>\n    <p>{`This is a demo of all components supported by FormLayout.`}</p>\n    <Playground __position={9} __code={'() => {\\n  const [fieldLayout, setFieldLayout] = React.useState(\\'vertical\\')\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const [isDeliveryAddress, setIsDeliveryAddress] = React.useState(true)\\n  const [receiveNewsletter, setReceiveNewsletter] = React.useState(true)\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <div>\\n      <Toolbar>\\n        <ToolbarItem>\\n          <ButtonGroup>\\n            <Button\\n              clickHandler={() => setFieldLayout(\\'vertical\\')}\\n              label=\\\"Vertical layout\\\"\\n              variant={fieldLayout === \\'vertical\\' ? \\'dark\\' : \\'primary\\'}\\n            />\\n            <Button\\n              clickHandler={() => setFieldLayout(\\'horizontal\\')}\\n              label=\\\"Horizontal layout\\\"\\n              variant={fieldLayout === \\'horizontal\\' ? \\'dark\\' : \\'primary\\'}\\n            />\\n          </ButtonGroup>\\n        </ToolbarItem>\\n      </Toolbar>\\n      <FormLayout fieldLayout={fieldLayout} labelWidth=\\\"auto\\\">\\n        <>\\n          <TextField\\n            changeHandler={() => {}}\\n            id=\\\"form-layout-full-example-first-name\\\"\\n            label=\\\"First Name\\\"\\n          />\\n          <TextField\\n            changeHandler={() => {}}\\n            id=\\\"form-layout-full-example-last-name\\\"\\n            label=\\\"Last Name\\\"\\n          />\\n        </>\\n        <TextField\\n          changeHandler={() => {}}\\n          helpText=\\\"Optional\\\"\\n          id=\\\"form-layout-full-example-email\\\"\\n          label=\\\"Email address\\\"\\n          type=\\\"email\\\"\\n        />\\n        <>\\n          <TextField\\n            changeHandler={() => {}}\\n            id=\\\"form-layout-full-example-address-1\\\"\\n            label=\\\"Address\\\"\\n            placeholder=\\\"Address line 1\\\"\\n          />\\n          <TextField\\n            changeHandler={() => {}}\\n            id=\\\"form-layout-full-example-address-2\\\"\\n            isLabelVisible={false}\\n            label=\\\"Address 2\\\"\\n            placeholder=\\\"Address line 2\\\"\\n          />\\n          <TextField\\n            changeHandler={() => {}}\\n            id=\\\"form-layout-full-example-zip\\\"\\n            inputSize={6}\\n            label=\\\"ZIP\\\"\\n            validationState=\\\"invalid\\\"\\n            validationText=\\\"ZIP should be 5 to 6 digits long code.\\\"\\n          />\\n          <FormLayoutCustomField\\n            id=\\\"form-layout-full-example-country\\\"\\n            label=\\\"Country\\\"\\n          >\\n            <span>Czech Republic</span>\\n          </FormLayoutCustomField>\\n          <CheckboxField\\n            changeHandler={() => setIsDeliveryAddress(!isDeliveryAddress)}\\n            checked={isDeliveryAddress}\\n            id=\\\"form-layout-full-example-delivery\\\"\\n            label=\\\"This is my delivery address\\\"\\n          />\\n        </>\\n        <SelectField\\n          changeHandler={e => setFruit(e.target.value)}\\n          id=\\\"form-layout-full-example-fruit\\\"\\n          label=\\\"Your favourite fruit\\\"\\n          options={options}\\n          value={fruit}\\n        />\\n        <TextArea\\n          changeHandler={() => {}}\\n          fullWidth\\n          id=\\\"form-layout-full-example-message\\\"\\n          label=\\\"Message\\\"\\n          rows={3}\\n        />\\n        <FileInputField\\n          changeHandler={() => {}}\\n          id=\\\"form-layout-full-attachment\\\"\\n          label=\\\"Attachment\\\"\\n        />\\n        <Toggle\\n          changeHandler={() => setReceiveNewsletter(!receiveNewsletter)}\\n          checked={receiveNewsletter}\\n          helpText=\\\"Only once per week!\\\"\\n          id=\\\"form-layout-full-example-newsletter\\\"\\n          label=\\\"Receive weekly newsletter\\\"\\n          required\\n        />\\n        <Radio\\n          changeHandler={e => setFruit(e.target.value)}\\n          id=\\\"form-layout-full-example-fruit-2\\\"\\n          label=\\\"And fruit again!\\\"\\n          options={options}\\n          value={fruit}\\n        />\\n      </FormLayout>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      FileInputField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fieldLayout, setFieldLayout] = React.useState('vertical');\n        const [fruit, setFruit] = React.useState('apple');\n        const [isDeliveryAddress, setIsDeliveryAddress] = React.useState(true);\n        const [receiveNewsletter, setReceiveNewsletter] = React.useState(true);\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <div>\n        <Toolbar mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <ButtonGroup mdxType=\"ButtonGroup\">\n              <Button clickHandler={() => setFieldLayout('vertical')} label=\"Vertical layout\" variant={fieldLayout === 'vertical' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              <Button clickHandler={() => setFieldLayout('horizontal')} label=\"Horizontal layout\" variant={fieldLayout === 'horizontal' ? 'dark' : 'primary'} mdxType=\"Button\" />\n            </ButtonGroup>\n          </ToolbarItem>\n        </Toolbar>\n        <FormLayout fieldLayout={fieldLayout} labelWidth=\"auto\" mdxType=\"FormLayout\">\n          <>\n            <TextField changeHandler={() => {}} id=\"form-layout-full-example-first-name\" label=\"First Name\" mdxType=\"TextField\" />\n            <TextField changeHandler={() => {}} id=\"form-layout-full-example-last-name\" label=\"Last Name\" mdxType=\"TextField\" />\n          </>\n          <TextField changeHandler={() => {}} helpText=\"Optional\" id=\"form-layout-full-example-email\" label=\"Email address\" type=\"email\" mdxType=\"TextField\" />\n          <>\n            <TextField changeHandler={() => {}} id=\"form-layout-full-example-address-1\" label=\"Address\" placeholder=\"Address line 1\" mdxType=\"TextField\" />\n            <TextField changeHandler={() => {}} id=\"form-layout-full-example-address-2\" isLabelVisible={false} label=\"Address 2\" placeholder=\"Address line 2\" mdxType=\"TextField\" />\n            <TextField changeHandler={() => {}} id=\"form-layout-full-example-zip\" inputSize={6} label=\"ZIP\" validationState=\"invalid\" validationText=\"ZIP should be 5 to 6 digits long code.\" mdxType=\"TextField\" />\n            <FormLayoutCustomField id=\"form-layout-full-example-country\" label=\"Country\" mdxType=\"FormLayoutCustomField\">\n              <span>Czech Republic</span>\n            </FormLayoutCustomField>\n            <CheckboxField changeHandler={() => setIsDeliveryAddress(!isDeliveryAddress)} checked={isDeliveryAddress} id=\"form-layout-full-example-delivery\" label=\"This is my delivery address\" mdxType=\"CheckboxField\" />\n          </>\n          <SelectField changeHandler={e => setFruit(e.target.value)} id=\"form-layout-full-example-fruit\" label=\"Your favourite fruit\" options={options} value={fruit} mdxType=\"SelectField\" />\n          <TextArea changeHandler={() => {}} fullWidth id=\"form-layout-full-example-message\" label=\"Message\" rows={3} mdxType=\"TextArea\" />\n          <FileInputField changeHandler={() => {}} id=\"form-layout-full-attachment\" label=\"Attachment\" mdxType=\"FileInputField\" />\n          <Toggle changeHandler={() => setReceiveNewsletter(!receiveNewsletter)} checked={receiveNewsletter} helpText=\"Only once per week!\" id=\"form-layout-full-example-newsletter\" label=\"Receive weekly newsletter\" required mdxType=\"Toggle\" />\n          <Radio changeHandler={e => setFruit(e.target.value)} id=\"form-layout-full-example-fruit-2\" label=\"And fruit again!\" options={options} value={fruit} mdxType=\"Radio\" />\n        </FormLayout>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={FormLayout} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"formlayoutcustomfield-api\"\n    }}>{`FormLayoutCustomField API`}</h3>\n    <p>{`A place for custom content inside FormLayout.`}</p>\n    <Props table of={FormLayoutCustomField} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-horizontal-label-auto-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label width in automatic layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-horizontal-label-limited-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label width in limited-width layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-horizontal-label-default-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label width in the default layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-row-gap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Gap between individual rows`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"formlayoutcustomfield-theming\"\n    }}>{`FormLayoutCustomField Theming`}</h3>\n    <p>{`FormLayoutCustomField can be styled using a small subset of\n`}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/forms\"\n      }}>{`other form fields theming options`}</a>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-custom-default-surrounding-text-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom field label color in default state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-custom-disabled-surrounding-text-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom field label color in disabled-like state`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}