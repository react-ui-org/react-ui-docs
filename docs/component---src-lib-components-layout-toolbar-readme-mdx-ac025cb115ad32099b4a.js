(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{"r+9N":function(e,o,a){"use strict";a.r(o),a.d(o,"_frontmatter",(function(){return h})),a.d(o,"default",(function(){return O}));var t=a("Fcif"),r=a("dV/x"),l=a("mXGw"),n=a("/FXl"),b=a("TjRS"),d=a("ZFoC"),c=a("s0IP"),i=a("CTg9"),p=a("8X2u"),m=a("99Eb"),u=a("0Dnc"),T=a("pRNf"),s=a("Dser");a("aD51");const h={};void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/layout/Toolbar/README.mdx"}});const j={_frontmatter:h},y=b.a;function O(e){let{components:o}=e,a=Object(r.a)(e,["components"]);return Object(n.b)(y,Object(t.a)({},j,a,{components:o,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"toolbar"},"Toolbar"),Object(n.b)("p",null,"The responsive Toolbar layout is a versatile tool that allows spacing, grouping,\nand aligning inline items."),Object(n.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(n.b)("p",null,"To implement the Toolbar component, you need to import it first:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-js"},"import { Toolbar, ToolbarItem } from '@react-ui-org/react-ui';\n")),Object(n.b)("p",null,"And use it:"),Object(n.b)(d.c,{__position:0,__code:"<Toolbar>\n  <ToolbarItem>\n    <Placeholder bordered>Toolbar item</Placeholder>\n  </ToolbarItem>\n  <ToolbarItem>\n    <Placeholder bordered>Toolbar item</Placeholder>\n  </ToolbarItem>\n  <ToolbarItem>\n    <Placeholder bordered>Toolbar item</Placeholder>\n  </ToolbarItem>\n</Toolbar>",__scope:{props:a,DefaultLayout:b.a,Playground:d.c,Props:d.d,Placeholder:c.a,CheckboxField:i.a,Button:p.a,ButtonGroup:m.a,Toolbar:u.a,ToolbarGroup:T.a,ToolbarItem:s.a,DefaultLayout:b.a,_frontmatter:h},mdxType:"Playground"},Object(n.b)(u.a,{mdxType:"Toolbar"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Toolbar item")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Toolbar item")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Toolbar item")))),Object(n.b)("p",null,"See ",Object(n.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(n.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Toolbar is great for flexible inline layouts.")," For stacking your content\nvertically, use the ",Object(n.b)("a",{parentName:"p",href:"/components/layout/list"},"List")," layout. For two-dimensional layouts head to\nthe ",Object(n.b)("a",{parentName:"p",href:"/components/layout/grid"},"Grid")," layout.")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Wrap your items")," into the ToolbarItem component. This ensures your content\nis properly spaced and aligned with other Toolbar elements. Do ",Object(n.b)("strong",{parentName:"p"},"not")," try to\nput any custom HTML or React components directly into the Toolbar layout\nwithout wrapping it with the ToolbarItem first.")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Be careful with using Toolbar with long or dynamic items in narrow\ncontainers.")," Toolbar intentionally prevents its items from shrinking using\n",Object(n.b)("inlineCode",{parentName:"p"},"flex: none")," which may cause overflow in case of lack of horizontal space.\nDepending on your situation, consider turning on the ",Object(n.b)("inlineCode",{parentName:"p"},"nowrap")," option\n(which allows shrinking of items but disables Toolbar from wrapping), using\nthe ",Object(n.b)("a",{parentName:"p",href:"/components/ui/text"},"Text")," component to precisely control text wrapping, or switching to\nthe ",Object(n.b)("a",{parentName:"p",href:"/components/layout/grid"},"Grid")," layout."))),Object(n.b)("h2",{id:"alignment"},"Alignment"),Object(n.b)("p",null,"You can tweak your Toolbar layout using rich alignment options, both in\nhorizontal and vertical direction."),Object(n.b)("p",null,"ðŸ‘‰ At the current stage of development, React UI is ",Object(n.b)("strong",{parentName:"p"},"RTL aware")," so switching\nto a fully RTL-compatible behavior in the future should be painless. That's why\nthe justification values are called rather ",Object(n.b)("inlineCode",{parentName:"p"},"start")," than ",Object(n.b)("inlineCode",{parentName:"p"},"left")," and ",Object(n.b)("inlineCode",{parentName:"p"},"end")," instead\nof ",Object(n.b)("inlineCode",{parentName:"p"},"right"),"."),Object(n.b)(d.c,{__position:1,__code:"() => {\n  const [alignment, setAlignment] = React.useState('top')\n  const [justification, setJustification] = React.useState('start')\n  return (\n    <div>\n      <Toolbar>\n        <ToolbarGroup align=\"baseline\">\n          <ToolbarItem>\n            <span id=\"alignment-label\">Alignment:</span>\n          </ToolbarItem>\n          <ToolbarItem>\n            <ButtonGroup aria-labelledby=\"#alignment-label\">\n              <Button\n                label=\"top\"\n                clickHandler={() => setAlignment('top')}\n                color={alignment === 'top' ? 'dark' : 'primary'}\n              />\n              <Button\n                label=\"middle\"\n                clickHandler={() => setAlignment('middle')}\n                color={alignment === 'middle' ? 'dark' : 'primary'}\n              />\n              <Button\n                label=\"bottom\"\n                clickHandler={() => setAlignment('bottom')}\n                color={alignment === 'bottom' ? 'dark' : 'primary'}\n              />\n              <Button\n                label=\"baseline\"\n                clickHandler={() => setAlignment('baseline')}\n                color={alignment === 'baseline' ? 'dark' : 'primary'}\n              />\n            </ButtonGroup>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup align=\"baseline\">\n          <ToolbarItem>\n            <span id=\"justification-label\">Justification:</span>\n          </ToolbarItem>\n          <ToolbarItem>\n            <ButtonGroup aria-labelledby=\"#justification-label\">\n              <Button\n                label=\"start\"\n                clickHandler={() => setJustification('start')}\n                color={justification === 'start' ? 'dark' : 'primary'}\n              />\n              <Button\n                label=\"center\"\n                clickHandler={() => setJustification('center')}\n                color={justification === 'center' ? 'dark' : 'primary'}\n              />\n              <Button\n                label=\"end\"\n                clickHandler={() => setJustification('end')}\n                color={justification === 'end' ? 'dark' : 'primary'}\n              />\n              <Button\n                label=\"space-between\"\n                clickHandler={() => setJustification('space-between')}\n                color={justification === 'space-between' ? 'dark' : 'primary'}\n              />\n            </ButtonGroup>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      <Toolbar align={alignment} justify={justification}>\n        <ToolbarItem>\n          <Placeholder bordered>First item</Placeholder>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Placeholder bordered>\n            Second item\n            <br />\n            is taller\n          </Placeholder>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Placeholder bordered>Third item</Placeholder>\n        </ToolbarItem>\n      </Toolbar>\n    </div>\n  )\n}",__scope:{props:a,DefaultLayout:b.a,Playground:d.c,Props:d.d,Placeholder:c.a,CheckboxField:i.a,Button:p.a,ButtonGroup:m.a,Toolbar:u.a,ToolbarGroup:T.a,ToolbarItem:s.a,DefaultLayout:b.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,o]=l.useState("top"),[a,t]=l.useState("start");return Object(n.b)("div",null,Object(n.b)(u.a,{mdxType:"Toolbar"},Object(n.b)(T.a,{align:"baseline",mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)("span",{id:"alignment-label"},"Alignment:")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(m.a,{"aria-labelledby":"#alignment-label",mdxType:"ButtonGroup"},Object(n.b)(p.a,{label:"top",clickHandler:()=>o("top"),color:"top"===e?"dark":"primary",mdxType:"Button"}),Object(n.b)(p.a,{label:"middle",clickHandler:()=>o("middle"),color:"middle"===e?"dark":"primary",mdxType:"Button"}),Object(n.b)(p.a,{label:"bottom",clickHandler:()=>o("bottom"),color:"bottom"===e?"dark":"primary",mdxType:"Button"}),Object(n.b)(p.a,{label:"baseline",clickHandler:()=>o("baseline"),color:"baseline"===e?"dark":"primary",mdxType:"Button"})))),Object(n.b)(T.a,{align:"baseline",mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)("span",{id:"justification-label"},"Justification:")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(m.a,{"aria-labelledby":"#justification-label",mdxType:"ButtonGroup"},Object(n.b)(p.a,{label:"start",clickHandler:()=>t("start"),color:"start"===a?"dark":"primary",mdxType:"Button"}),Object(n.b)(p.a,{label:"center",clickHandler:()=>t("center"),color:"center"===a?"dark":"primary",mdxType:"Button"}),Object(n.b)(p.a,{label:"end",clickHandler:()=>t("end"),color:"end"===a?"dark":"primary",mdxType:"Button"}),Object(n.b)(p.a,{label:"space-between",clickHandler:()=>t("space-between"),color:"space-between"===a?"dark":"primary",mdxType:"Button"}))))),Object(n.b)(u.a,{align:e,justify:a,mdxType:"Toolbar"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"First item")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Second item",Object(n.b)("br",null),"is taller")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Third item"))))}),Object(n.b)("h2",{id:"groups"},"Groups"),Object(n.b)("p",null,"Toolbar items can be grouped which enables you aligning related items together.\nTo provide the best possible flexibility for building your layout, the\nToolbarGroup allows you to set many options similar to the Toolbar: vertical\nalignment, ",Object(n.b)("a",{parentName:"p",href:"#dense-layout"},"dense spacing"),", or ",Object(n.b)("a",{parentName:"p",href:"#wrapping"},"disable wrapping"),"."),Object(n.b)(d.c,{__position:2,__code:'<Toolbar justify="space-between">\n  <ToolbarGroup>\n    <ToolbarItem>\n      <Placeholder bordered>Group A</Placeholder>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Placeholder bordered>Group A</Placeholder>\n    </ToolbarItem>\n  </ToolbarGroup>\n  <ToolbarGroup align="middle">\n    <ToolbarItem>\n      <Placeholder bordered>Group B</Placeholder>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Placeholder bordered>Group B</Placeholder>\n    </ToolbarItem>\n  </ToolbarGroup>\n  <ToolbarItem>\n    <Placeholder bordered>Item</Placeholder>\n  </ToolbarItem>\n</Toolbar>',__scope:{props:a,DefaultLayout:b.a,Playground:d.c,Props:d.d,Placeholder:c.a,CheckboxField:i.a,Button:p.a,ButtonGroup:m.a,Toolbar:u.a,ToolbarGroup:T.a,ToolbarItem:s.a,DefaultLayout:b.a,_frontmatter:h},mdxType:"Playground"},Object(n.b)(u.a,{justify:"space-between",mdxType:"Toolbar"},Object(n.b)(T.a,{mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group A")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group A"))),Object(n.b)(T.a,{align:"middle",mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group B")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group B"))),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Item")))),Object(n.b)("h2",{id:"dense-layout"},"Dense Layout"),Object(n.b)("p",null,"Sometimes it's useful to get related items even closer together. This can be\neasily achieved through the ",Object(n.b)("inlineCode",{parentName:"p"},"dense")," option which can be applied on individual\ntoolbar groups, or on the entire toolbar."),Object(n.b)(d.c,{__position:3,__code:'() => {\n  const [isGroupDense, setIsGroupDense] = React.useState(true)\n  const [isToolbarDense, setIsToolbarDense] = React.useState(false)\n  return (\n    <div>\n      <Toolbar>\n        <ToolbarItem>\n          <CheckboxField\n            label="Dense ToolbarGroup"\n            changeHandler={e => setIsGroupDense(e.target.checked)}\n            checked={isGroupDense}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <CheckboxField\n            label="Dense Toolbar"\n            changeHandler={e => setIsToolbarDense(e.target.checked)}\n            checked={isToolbarDense}\n          />\n        </ToolbarItem>\n      </Toolbar>\n      <Toolbar dense={isToolbarDense}>\n        <ToolbarGroup dense={isGroupDense}>\n          <ToolbarItem>\n            <Placeholder bordered>Group item</Placeholder>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Placeholder bordered>Group item</Placeholder>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarItem>\n          <Placeholder bordered>Standalone item</Placeholder>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Placeholder bordered>Standalone item</Placeholder>\n        </ToolbarItem>\n      </Toolbar>\n    </div>\n  )\n}',__scope:{props:a,DefaultLayout:b.a,Playground:d.c,Props:d.d,Placeholder:c.a,CheckboxField:i.a,Button:p.a,ButtonGroup:m.a,Toolbar:u.a,ToolbarGroup:T.a,ToolbarItem:s.a,DefaultLayout:b.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,o]=l.useState(!0),[a,t]=l.useState(!1);return Object(n.b)("div",null,Object(n.b)(u.a,{mdxType:"Toolbar"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(i.a,{label:"Dense ToolbarGroup",changeHandler:e=>o(e.target.checked),checked:e,mdxType:"CheckboxField"})),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(i.a,{label:"Dense Toolbar",changeHandler:e=>t(e.target.checked),checked:a,mdxType:"CheckboxField"}))),Object(n.b)(u.a,{dense:a,mdxType:"Toolbar"},Object(n.b)(T.a,{dense:e,mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group item")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group item"))),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Standalone item")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Standalone item"))))}),Object(n.b)("h2",{id:"wrapping"},"Wrapping"),Object(n.b)("p",null,"By default, all toolbar items are queued up one after another in a row. The\nitems automatically wrap and create a new row. To prevent this behavior, just\nset the ",Object(n.b)("inlineCode",{parentName:"p"},"nowrap")," option on the Toolbar or on individual ToolbarGroups. Note that\nToolbarGroups can still wrap when the wrapping is disabled just on their parent\nToolbar."),Object(n.b)("p",null,"Try resizing the playground below to see how it works."),Object(n.b)(d.c,{__position:4,__code:'<>\n  <p>Disabled wrapping on entire toolbar:</p>\n  <Toolbar justify="space-between" nowrap>\n    <ToolbarGroup>\n      <ToolbarItem>\n        <Placeholder bordered>Group A</Placeholder>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Placeholder bordered>Group A</Placeholder>\n      </ToolbarItem>\n    </ToolbarGroup>\n    <ToolbarGroup>\n      <ToolbarItem>\n        <Placeholder bordered>Group B</Placeholder>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Placeholder bordered>Group B</Placeholder>\n      </ToolbarItem>\n    </ToolbarGroup>\n    <ToolbarItem>\n      <Placeholder bordered>Item</Placeholder>\n    </ToolbarItem>\n  </Toolbar>\n  <p>Disabled wrapping on toolbar groups:</p>\n  <Toolbar justify="space-between">\n    <ToolbarGroup nowrap>\n      <ToolbarItem>\n        <Placeholder bordered>Group A</Placeholder>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Placeholder bordered>Group A</Placeholder>\n      </ToolbarItem>\n    </ToolbarGroup>\n    <ToolbarGroup nowrap>\n      <ToolbarItem>\n        <Placeholder bordered>Group B</Placeholder>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Placeholder bordered>Group B</Placeholder>\n      </ToolbarItem>\n    </ToolbarGroup>\n    <ToolbarItem>\n      <Placeholder bordered>Item</Placeholder>\n    </ToolbarItem>\n  </Toolbar>\n</>',__scope:{props:a,DefaultLayout:b.a,Playground:d.c,Props:d.d,Placeholder:c.a,CheckboxField:i.a,Button:p.a,ButtonGroup:m.a,Toolbar:u.a,ToolbarGroup:T.a,ToolbarItem:s.a,DefaultLayout:b.a,_frontmatter:h},mdxType:"Playground"},Object(n.b)(l.Fragment,null,Object(n.b)("p",null,"Disabled wrapping on entire toolbar:"),Object(n.b)(u.a,{justify:"space-between",nowrap:!0,mdxType:"Toolbar"},Object(n.b)(T.a,{mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group A")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group A"))),Object(n.b)(T.a,{mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group B")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group B"))),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Item"))),Object(n.b)("p",null,"Disabled wrapping on toolbar groups:"),Object(n.b)(u.a,{justify:"space-between",mdxType:"Toolbar"},Object(n.b)(T.a,{nowrap:!0,mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group A")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group A"))),Object(n.b)(T.a,{nowrap:!0,mdxType:"ToolbarGroup"},Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group B")),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Group B"))),Object(n.b)(s.a,{mdxType:"ToolbarItem"},Object(n.b)(c.a,{bordered:!0,mdxType:"Placeholder"},"Item"))))),Object(n.b)("p",null,"ðŸ‘‰ Depending on your situation, you may need to further control wrapping of text\ncontent placed within Toolbar. The ",Object(n.b)("a",{parentName:"p",href:"/components/ui/text"},"Text")," component is designed\nspecifically for this kind of job."),Object(n.b)("h2",{id:"api"},"API"),Object(n.b)(d.d,{table:!0,of:u.a,mdxType:"Props"}),Object(n.b)("h3",{id:"toolbargroup-api"},"ToolbarGroup API"),Object(n.b)("p",null,"A wrapper for grouping ToolbarItems together."),Object(n.b)(d.d,{table:!0,of:T.a,mdxType:"Props"}),Object(n.b)("h3",{id:"toolbaritem-api"},"ToolbarItem API"),Object(n.b)("p",null,"A wrapper for individual toolbar items."),Object(n.b)(d.d,{table:!0,of:s.a,mdxType:"Props"}),Object(n.b)("h2",{id:"theming"},"Theming"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(n.b)("th",{parentName:"tr",align:null},"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"--rui-Toolbar__gap")),Object(n.b)("td",{parentName:"tr",align:null},"Gap between toolbar items")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:null},Object(n.b)("inlineCode",{parentName:"td"},"--rui-Toolbar__gap--dense")),Object(n.b)("td",{parentName:"tr",align:null},"Dense gap between toolbar items")))))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/layout/Toolbar/README.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-layout-toolbar-readme-mdx-ac025cb115ad32099b4a.js.map