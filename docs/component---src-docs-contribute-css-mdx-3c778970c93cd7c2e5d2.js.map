{"version":3,"sources":["webpack:///../src/docs/contribute/css.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-contribute-css-mdx-3c778970c93cd7c2e5d2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"css-guidelines\"\n    }}>{`CSS Guidelines`}</h1>\n    <p>{`Basic rules to follow when authoring React UI CSS.`}</p>\n    <h2 {...{\n      \"id\": \"coding-style\"\n    }}>{`Coding Style`}</h2>\n    <p>{`React UI uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://stylelint.io\"\n      }}>{`Stylelint`}</a>{` to avoid errors in CSS and enforce unified coding\nstyle across all stylesheets.`}</p>\n    <p>{`Configurations used:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/visionappscz/stylelint-config-visionapps\"\n          }}><inlineCode parentName=\"a\">{`stylelint-config-visionapps`}</inlineCode></a>{` — a more strict\nextension of popular community preset\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/stylelint/stylelint-config-standard\"\n          }}><inlineCode parentName=\"a\">{`stylelint-config-standard`}</inlineCode></a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/visionappscz/stylelint-config-visionapps-order\"\n          }}><inlineCode parentName=\"a\">{`stylelint-config-visionapps-order`}</inlineCode></a>{` —\nan opinionated list of CSS properties order.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/pascalduez/stylelint-config-css-modules\"\n          }}><inlineCode parentName=\"a\">{`stylelint-config-css-modules`}</inlineCode></a>{` — tweak of\nStylelint rules for CSS modules.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"css-architecture\"\n    }}>{`CSS Architecture`}</h2>\n    <p>{`Without `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Web_Components\"\n      }}>{`Web Components`}</a>{`, there is no such thing as a complete encapsulation of\na component. Inside browser window, a React app is still a bunch of HTML and CSS\n(and JS, of course) living in the same global context. Developers can fight\nagainst CSS cascade, inheritance and specificity, or accept these principles,\nand even benefit from them. Understanding how CSS works and making use of this\nknowledge leads towards smaller stylesheets, easier maintenance, and better\nperformance.`}</p>\n    <p>{`To be able to handle CSS at such a large scale of a UI library, React UI works\n`}<strong parentName=\"p\">{`in harmony with fundamental CSS principles.`}</strong>{` Most importantly, all CSS is\nwritten in specificity order, i.e. from lowest to highest specificity. This idea\nwas most famously shaped and popularized by Harry Roberts in his `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/\"\n      }}>{`ITCSS`}</a>{`\narchitecture. React UI draws inspiration from ITCSS which can be seen the best\nin the `}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/usage#foundation-css\"\n      }}>{`foundation CSS layer`}</a>{` (and its `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/foundation.scss\"\n      }}>{`source`}</a>{`).`}</p>\n    <h3 {...{\n      \"id\": \"file-structure\"\n    }}>{`File Structure`}</h3>\n    <p>{`There are three simple rules to follow when organizing React UI CSS:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Component styles must be placed in component's directory.`}</li>\n      <li parentName=\"ol\">{`Components must not import other component's styles.`}</li>\n      <li parentName=\"ol\">{`Any CSS that needs to be shared across multiple components and/or global\nstyles must be placed in the `}<inlineCode parentName=\"li\">{`src/lib/styles`}</inlineCode>{` directory.`}</li>\n    </ol>\n    <p>{`👉 All React UI CSS is written in Sass.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#preprocessing-with-sass\"\n      }}>{`Learn more about preprocessing with Sass.`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`├── src\n    ├── …\n    └── lib                       Main source directory, contains global Sass endpoints\n        ├── components            React components with their stylesheets\n            ├── *\n                ├── <Component>\n                    ├── …\n                    ├── _settings.scss    Component's non-themeable Sass variables\n                    ├── _theme.scss       Component's Sass interface to its CSS custom properties in \\`theme.scss\\`\n                    ├── _tools.scss       Component's Sass mixins and functions\n                    ├── Component.scss    Component's main stylesheet\n                    └── …\n        ├── …\n        ├── styles                Partials for top-level Sass endpoints and shared styles\n            ├── elements          Styles for unclassed HTML elements (type selectors)\n            ├── generic           Global ground-zero styles\n            ├── helpers           Helper classes\n            ├── settings          Sass variables shared across global styles and/or multiple components\n            ├── theme             Sass interface to \\`theme.scss\\`, used in global styles or across multiple components\n            ├── theme-constants   Sass variables for use only within \\`theme.scss\\`\n            ├── tools             Sass mixins and functions shared across global styles and/or multiple components\n            └── _utilities.scss   Sass loop that generates utility classes from \\`settings/_utilities.scss\\` config\n        ├── …\n        ├── foundation.scss       Mandatory themeable CSS layer, ground-zero for React components\n        ├── helpers.scss          Optional set of helper and utility classes\n        └── theme.scss            Default theme, a collection of hundreds of CSS custom properties\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"css-modules\"\n    }}>{`CSS Modules`}</h2>\n    <p>{`React UI leverages `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules\"\n      }}>{`CSS modules`}</a>{` (not to be confused with `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/What_is_CSS#css_modules\"\n      }}>{`modular CSS\nspecification`}</a>{` of the same name) to take advantage of writing native CSS\n(meaning “not JSS or CSS in JS”). Together with\n`}<a parentName=\"p\" {...{\n        \"href\": \"#preprocessing-with-sass\"\n      }}>{`Sass`}</a>{`, CSS modules represent flexibility and popular\nprogramming features needed to author modern stylesheets perfectly familiar to\ntraditional CSS developers.`}</p>\n    <h3 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h3>\n    <p>{`CSS modules help keeping source class names short and clear. The same class name\ncan be used in another component with different styling. Final class names\nare converted by tooling and composed of component name, original class name,\nand a random suffix which makes them unique in global context of the whole web\napp.`}</p>\n    <p>{`For example, this JSX:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Button.jsx\n\n<button className={styles.root}>\n  <span className={styles.beforeLabel}>{beforeLabel}</span>\n  <span className={styles.label}>{label}</span>\n  <span className={styles.afterLabel}>{afterLabel}</span>\n</button>\n`}</code></pre>\n    <p>{`… with this SCSS:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Button.scss\n\n.root {\n // …\n}\n\n.beforeLabel {\n // …\n}\n\n.afterLabel {\n // …\n}\n\n.label {\n  // …\n}\n`}</code></pre>\n    <p>{`… produces following CSS class names:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Button__root__2yVxr5IZ`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Button__beforeLabel__1rrmrrWj`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Button__afterLabel__38eMTilM`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Button__label__23iTNlfS`}</inlineCode></li>\n    </ul>\n    <p>{`Resulting CSS class names are both unique and human-readable at the same time\nwhich is convenient for development. Class names are further shortened and\nobfuscated for production environments.`}</p>\n    <h3 {...{\n      \"id\": \"helpers-and-utilities\"\n    }}>{`Helpers and Utilities`}</h3>\n    <p>{`There are also global helper and utility classes (both documented as CSS Helpers\nfor the sake of comprehensibility for non-CSS guys) that can be used by\ndevelopers and thus remain unaltered by CSS modules. For example,\n`}<inlineCode parentName=\"p\">{`:global(.display-block)`}</inlineCode>{` selector produces `}<inlineCode parentName=\"p\">{`display-block`}</inlineCode>{` CSS class.`}</p>\n    <h2 {...{\n      \"id\": \"class-naming-rules\"\n    }}>{`Class Naming Rules`}</h2>\n    <p>{`Following rules make it clear both in JSX and CSS what is affected by a CSS\nclass.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Class names must use camelCase notation`}</strong>{` to be usable in JavaScript\ncontext.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Short, preferably single-word names should be chosen for all component\nelements.`}</strong>{` No naming convention like BEM or SUIT CSS needs to be applied\nsince class names are unique in the global scope thanks to CSS modules.\nConventions for modifier classes are covered by the rules below.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Component's top-level HTML element must have `}<inlineCode parentName=\"strong\">{`root`}</inlineCode>{` class name.`}</strong>{`\nHowever, this rule has a few exceptions:`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`When the component is a subcomponent, it's usually better to use\nsubcomponent's name, e.g. `}<inlineCode parentName=\"p\">{`item`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`group`}</inlineCode>{`. This enables us to keep\nrelated CSS of both the main component and its subcomponents in a single\nfile and see the big picture during development.`}</p>\n          </li>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`When no CSS on the root element is necessary and styling only takes place\nonce a visual modification is invoked by component props, `}<inlineCode parentName=\"p\">{`root`}</inlineCode>{` class\nname can be omitted entirely.`}</p>\n          </li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Modifier class names related to the current HTML element must start with\n`}<inlineCode parentName=\"strong\">{`is`}</inlineCode></strong>{` and contain the name of the target element, e.g. `}<inlineCode parentName=\"p\">{`isRootLoading`}</inlineCode>{`\n(modifies `}<inlineCode parentName=\"p\">{`root`}</inlineCode>{`) or `}<inlineCode parentName=\"p\">{`isLabelHidden`}</inlineCode>{` (modifies `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{`). However, child\nelements may be modified as well, e.g. by a CSS selector like\n`}<inlineCode parentName=\"p\">{`.isRootRequired > .label`}</inlineCode>{` (root is marked as required but the label is what\nneeds to be visually modified).`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Modifier class names related to child elements must start with `}<inlineCode parentName=\"strong\">{`has`}</inlineCode></strong>{`\nand refer to the element in question, e.g. `}<inlineCode parentName=\"p\">{`hasRootSmallInput`}</inlineCode>{` (applies\nstyling on `}<inlineCode parentName=\"p\">{`root`}</inlineCode>{` but relates to `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`).`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"custom-properties\"\n    }}>{`Custom Properties`}</h2>\n    <p>{`React UI takes advantage of supporting `}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/browsers-and-devices\"\n      }}>{`modern browsers`}</a>{` and uses\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n      }}>{`CSS custom properties`}</a>{` to make writing and maintaining CSS more efficient.`}</p>\n    <p>{`There are three kinds of custom properties used:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`--rui-local-*`}</inlineCode>{` for internal (component-scoped, local) custom properties.\nMay reuse other custom property types.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`--rui-custom-*`}</inlineCode>{` for any custom properties whose value comes from component's\nAPI. May reuse other custom property types.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`--rui-*`}</inlineCode>{` (unscoped for the sake of brevity) for theme-related custom\nproperties. Part of public API, designed to be customized. Must not reuse\nother custom property types. Refer to the `}{`[theming overview]`}{` to learn how\ntheir names are created.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"preprocessing-with-sass\"\n    }}>{`Preprocessing with Sass`}</h2>\n    <p>{`All React UI CSS source is written in SCSS syntax of `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com\"\n      }}>{`Sass`}</a>{` preprocessor.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Sass variables, mixins and functions must use kebab-case notation.`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Only `}<a parentName=\"strong\" {...{\n              \"href\": \"https://sass-lang.com/blog/the-module-system-is-launched\"\n            }}>{`Sass modules`}</a>{` must be used to organize`}</strong>{` Sass source files, `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{`\nis deprecated. Using scoped variables, mixins and functions (those starting\nwith `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{`) is highly recommended whenever appropriate.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><a parentName=\"strong\" {...{\n              \"href\": \"https://sass-lang.com/documentation/modules\"\n            }}>{`Built-in Sass modules`}</a>{` should be preferred`}</strong>{` over older Sass functions that\nare deprecated, e.g. `}<inlineCode parentName=\"p\">{`map.get()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`map-get()`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Mixins that lead to duplicate CSS should be avoided.`}</strong>{` If possible, combine\nmultiple CSS selectors for the desired rule set to achieve the same result.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Extend functionality should be avoided entirely`}</strong>{` due to its hardly\npredictable behavior.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Classes that are automatically generated by Sass loops should be handled\nwith care.`}</strong>{` With loops, it's easy to produce a lot of CSS and negatively\nimpact performance.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"postprocessing-with-postcss\"\n    }}>{`Postprocessing with PostCSS`}</h2>\n    <p>{`All styles are automatically prefixed by `}<a parentName=\"p\" {...{\n        \"href\": \"https://autoprefixer.github.io\"\n      }}>{`Autoprefixer`}</a>{` plugin for `}<a parentName=\"p\" {...{\n        \"href\": \"https://postcss.org\"\n      }}>{`PostCSS`}</a>{`\naccording to `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/browserslist/browserslist\"\n      }}>{`Browserslist`}</a>{` configuration stored in `}<inlineCode parentName=\"p\">{`.browserslistrc`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}