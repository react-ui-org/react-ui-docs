{"version":3,"sources":["webpack:///../RELEASING.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iQAMO,MAAMA,EAAe,Q,8LAE5B,MAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aACH,aACL,qBAAK,8GACsB,0BAAYC,WAAW,KAAM,gBAA6B,iHAErF,qBAAK,+EACP,6BAAGA,WAAW,KAAQ,CAChB,KAAQ,2BACL,2BAA+B,KACtC,iBAAQ,CACN,GAAM,gBACH,gBACL,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,uFAErB,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAO,kBAAiB,6BAAGA,WAAW,MAAS,CAC1D,KAAQ,uBACL,2BAA+B,+BAEtC,kBAAIA,WAAW,MAAO,oCAG1B,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,mFACvB,0BAAYA,WAAW,KAAM,UAAuB,8GAItD,qBAAK,qBAAoB,0BAAYA,WAAW,KAAM,qBAAkC,iBACxF,iBAAQ,CACN,GAAM,mBACH,mBACL,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,cAAuB,qFAEzE,6BAAGA,WAAW,KAAQ,CACZ,KAAQ,wCACL,gBAAoB,0EAEjC,6BAAGA,WAAW,KAAQ,CACZ,KAAQ,sDACL,wBAA4B,qFAEzC,sBAAQA,WAAW,KAAM,mEAA4E,gFAClC,0BAAYA,WAAW,KAAM,UAAuB,MAEnH,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,WAAoB,6CAChE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,2BAAoC,OAAM,0BAAYA,WAAW,KAAM,gBAA6B,QAAO,0BAAYA,WAAW,KAAM,qBAAkC,8EAEhO,sBAAQA,WAAW,KAAM,mDAA4D,mDAG7E,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,oBAAmB,sBAAQA,WAAW,KAAM,0HACH,qEAExE,0BAAYA,WAAW,KAAM,gBAA6B,iHACD,kBAAIA,WAAW,KAAM,cAAmB,aACzF,sBAAQA,WAAW,KAAM,kBAA2B,UAEpD,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,oDAAmD,0BAAYA,WAAW,KAAM,gBAA6B,QAC5I,0BAAYA,WAAW,KAAM,4BAAyC,oDAIlE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAM,cAAuB,+GAEnE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAO,iGAEtB,kBAAIA,WAAW,MAAO,2DAA0D,0BAAYA,WAAW,MAAO,UAAuB,YACrI,kBAAIA,WAAW,MAAO,2DACtB,kBAAIA,WAAW,MAAO,+D,4LAQhCJ,EAAWK,gBAAiB","file":"component---releasing-md-76015d7b88d6152615a0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"releasing\"\n    }}>{`Releasing`}</h1>\n    <p>{`The release process is fully automated so you can release a new version just\nby bumping version number in `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`. However, there are several chances\nto adjust both version and changelog if you wish to do so for a reason.`}</p>\n    <p>{`In order for the automation to work properly, contributors must follow the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/contribute/guidelines\"\n      }}>{`contributing guidelines`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How It Works`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Pull requests are automatically labelled by branch name. Labels are then used\nfor:`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`resolving next `}<a parentName=\"li\" {...{\n              \"href\": \"https://semver.org\"\n            }}>{`semantic version number`}</a>{`\n(BREAKING.FEATURE.PATCH),`}</li>\n          <li parentName=\"ol\">{`grouping changes in changelog.`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Release draft with changelog is generated as pull requests are merged into\nthe `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{` branch. Invididual PR names are listed and grouped by type based\non label(s) added to them previously.`}</p>\n      </li>\n    </ol>\n    <p>{`See the source of `}<inlineCode parentName=\"p\">{`.github/workflows`}</inlineCode>{` for details.`}</p>\n    <h2 {...{\n      \"id\": \"release-process\"\n    }}>{`Release Process`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`As you go:`}</strong>{` make sure all contributions follow the contributing\nguidelines, especially the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/contribute/guidelines#git-workflow\"\n          }}>{`Git workflow`}</a>{` (correct PR names and\nbranch names). Check out the release draft on\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/react-ui-org/react-ui/releases\"\n          }}>{`GitHub releases page`}</a>{` to\nsee what the changelog looks like and what will be the next version number.\n`}<strong parentName=\"p\">{`Don't edit manually until you are ready to publish the release.`}</strong>{` Release\ndraft is automatically overwritten everytime a change is merged to `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Manual:`}</strong>{` once you are ready to publish a release:`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`Bump the version number`}</strong>{` in `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`package-lock.json`}</inlineCode>{`.\nMake sure it matches the intended version number in the release draft.\n`}<strong parentName=\"p\">{`Don't combine this step with any other changes,`}</strong>{` they wouldn't be\nreflected in the changelog.`}</p>\n          </li>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`Now is also your `}<strong parentName=\"p\">{`chance to review and adjust (if necessary) the intended\nversion and actual changelog before the release is published.`}</strong>{`\nAutomatic release drafting is skipped when a version change in\n`}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` is  detected so this time your changes will not be\noverwritten. Save your changes in release draft with the `}<em parentName=\"p\">{`Save draft`}</em>{`\nbutton, `}<strong parentName=\"p\">{`do not publish`}</strong>{` yet!`}</p>\n          </li>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`Get back to the repository, commit both files as `}<inlineCode parentName=\"p\">{`Bump version`}</inlineCode>{` in\n`}<inlineCode parentName=\"p\">{`release/<VERSION_NUMBER>`}</inlineCode>{` branch, create a pull request, and merge it.`}</p>\n          </li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Automatic:`}</strong>{` once the release pull request from step 2.3 is merged, the\nfollowing actions are triggered automatically:`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`GitHub release draft with name corresponding to the version number from\nstep 2 is published.`}</li>\n          <li parentName=\"ol\">{`Git tag with the version number from step 2 is added to `}<inlineCode parentName=\"li\">{`master`}</inlineCode>{` branch.`}</li>\n          <li parentName=\"ol\">{`Package is built and published to npm package registry.`}</li>\n          <li parentName=\"ol\">{`Documentation is built and deployed to production.`}</li>\n        </ol>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}