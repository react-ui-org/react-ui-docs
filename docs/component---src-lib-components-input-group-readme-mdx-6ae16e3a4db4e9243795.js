(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{MDqQ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return d})),n.d(t,"default",(function(){return h}));var a=n("Fcif"),l=n("dV/x"),o=n("mXGw"),i=n("/FXl"),r=n("TjRS"),p=n("ZFoC"),b=n("R5VZ"),u=n("nBnF");n("aD51");const s=["components"],d={};void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!Object.prototype.hasOwnProperty.call(d,"__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/InputGroup/README.mdx"}});const c={_frontmatter:d},m=r.a;function h(e){let{components:t}=e,n=Object(l.a)(e,s);return Object(i.b)(m,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"inputgroup"},"InputGroup"),Object(i.b)("p",null,"InputGroup visually groups related form fields and actions together."),Object(i.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(i.b)("p",null,"To implement the InputGroup component, you need to import it first:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { InputGroup } from '@react-ui-org/react-ui';\n")),Object(i.b)("p",null,"And use it:"),Object(i.b)(p.c,{__position:0,__code:"() => {\n  const [fruit, setFruit] = React.useState('apple')\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Pear',\n      value: 'pear',\n    },\n    {\n      label: 'Cherry',\n      value: 'cherry',\n    },\n  ]\n  return (\n    <InputGroup label=\"Your favourite fruit\">\n      <SelectField\n        label=\"Your favourite fruit\"\n        onChange={e => setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      />\n      <TextField label=\"Variety\" placeholder=\"Eg. Golden delicious\" />\n      <Button label=\"Submit\" />\n    </InputGroup>\n  )\n}",__scope:{props:n,DefaultLayout:r.a,Playground:p.c,Props:p.d,Icon:b.a,Button:u.c,InputGroup:u.n,SelectField:u.A,TextField:u.G,DefaultLayout:r.a,_frontmatter:d},mdxType:"Playground"},()=>{const[e,t]=o.useState("apple");return Object(i.b)(u.n,{label:"Your favourite fruit",mdxType:"InputGroup"},Object(i.b)(u.A,{label:"Your favourite fruit",onChange:e=>t(e.target.value),options:[{label:"Apple",value:"apple"},{label:"Pear",value:"pear"},{label:"Cherry",value:"cherry"}],value:e,mdxType:"SelectField"}),Object(i.b)(u.G,{label:"Variety",placeholder:"Eg. Golden delicious",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"}))}),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(i.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use input group to group ",Object(i.b)("strong",{parentName:"p"},"related fields and actions")," that a user can take.\nInput fields and buttons should not be grouped just to save space on the\nscreen.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"While the number of child inputs is not limited, keep in mind the layout of\nInputGroup is currently ",Object(i.b)("strong",{parentName:"p"},"not responsive: the inputs do not shrink nor wrap"),".\nMake sure your inputs fit their container, especially on small screens.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"In the background, InputGroup uses the ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset"},Object(i.b)("inlineCode",{parentName:"a"},"fieldset"))," element. Not\nonly it improves the ",Object(i.b)("a",{parentName:"p",href:"https://www.w3.org/WAI/tutorials/forms/grouping/"},"accessibility")," of the group, it also allows you to make\nuse of its built-in features like disabling all nested inputs or pairing the\ngroup with a form outside. Consult ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset"},"the MDN docs")," to learn more.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"InputGroup currently ",Object(i.b)("strong",{parentName:"p"},"supports grouping of"),"\n",Object(i.b)("a",{parentName:"p",href:"/components/text-field"},"TextField"),", ",Object(i.b)("a",{parentName:"p",href:"/components/select-field"},"SelectField"),",\nand ",Object(i.b)("a",{parentName:"p",href:"/components/button"},"Button")," components.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"To group ",Object(i.b)("a",{parentName:"p",href:"/components/button"},"Buttons")," only, use the\n",Object(i.b)("a",{parentName:"p",href:"/components/button-group"},"ButtonGroup")," component which is designed\nspecifically for that purpose."))),Object(i.b)("h2",{id:"sizes"},"Sizes"),Object(i.b)("p",null,"All existing field and button sizes are also available on the input group level:\nsmall, medium, and large."),Object(i.b)(p.c,{__position:1,__code:'<InputGroup label="Small size" size="small">\n  <TextField label="Input" />\n  <Button label="Submit" />\n</InputGroup>\n<InputGroup label="Medium size">\n  <TextField label="Input" />\n  <Button label="Submit" />\n</InputGroup>\n<InputGroup label="Large size" size="large">\n  <TextField label="Input" />\n  <Button label="Submit" />\n</InputGroup>',__scope:{props:n,DefaultLayout:r.a,Playground:p.c,Props:p.d,Icon:b.a,Button:u.c,InputGroup:u.n,SelectField:u.A,TextField:u.G,DefaultLayout:r.a,_frontmatter:d},mdxType:"Playground"},Object(i.b)(u.n,{label:"Small size",size:"small",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"Input",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"})),Object(i.b)(u.n,{label:"Medium size",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"Input",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"})),Object(i.b)(u.n,{label:"Large size",size:"large",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"Input",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"}))),Object(i.b)("h3",{id:"shared-property"},"Shared Property"),Object(i.b)("p",null,"You can set the ",Object(i.b)("inlineCode",{parentName:"p"},"size")," property directly on InputGroup to be shared for all\nfields and buttons inside the group. This property is then passed over to\nindividual elements. At the same time, it ",Object(i.b)("strong",{parentName:"p"},"cannot be overridden")," on the\nfields' or buttons' level. While technically possible, from the design point of\nview it's undesirable to group elements of totally different types or sizes."),Object(i.b)("h2",{id:"invisible-label"},"Invisible Label"),Object(i.b)("p",null,"In some cases, it may be convenient to visually hide the group label. The label\nremains accessible to assistive technologies. Labels of individual inputs are\nalways visually hidden."),Object(i.b)("p",null,"While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should ",Object(i.b)("strong",{parentName:"p"},"provide another visual clue")," so users know what to fill into\nthe input."),Object(i.b)(p.c,{__position:2,__code:'<InputGroup isLabelVisible={false} label="First and last name">\n  <TextField label="First name" placeholder="Eg. John" />\n  <TextField label="Last name" placeholder="Eg. Doe" />\n  <Button label="Submit" />\n</InputGroup>',__scope:{props:n,DefaultLayout:r.a,Playground:p.c,Props:p.d,Icon:b.a,Button:u.c,InputGroup:u.n,SelectField:u.A,TextField:u.G,DefaultLayout:r.a,_frontmatter:d},mdxType:"Playground"},Object(i.b)(u.n,{isLabelVisible:!1,label:"First and last name",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"First name",placeholder:"Eg. John",mdxType:"TextField"}),Object(i.b)(u.G,{label:"Last name",placeholder:"Eg. Doe",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"}))),Object(i.b)("h2",{id:"horizontal-layout"},"Horizontal layout"),Object(i.b)("p",null,"The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better â€” and that's why React UI\nsupports this kind of layout as well."),Object(i.b)(p.c,{__position:3,__code:'<InputGroup label="Horizontal layout" layout="horizontal">\n  <TextField label="Label" />\n  <Button label="Submit" />\n</InputGroup>',__scope:{props:n,DefaultLayout:r.a,Playground:p.c,Props:p.d,Icon:b.a,Button:u.c,InputGroup:u.n,SelectField:u.A,TextField:u.G,DefaultLayout:r.a,_frontmatter:d},mdxType:"Playground"},Object(i.b)(u.n,{label:"Horizontal layout",layout:"horizontal",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"Label",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"}))),Object(i.b)("h2",{id:"states"},"States"),Object(i.b)("h3",{id:"disabled-state"},"Disabled State"),Object(i.b)("p",null,"Disables all fields and buttons inside the group."),Object(i.b)(p.c,{__position:4,__code:'<InputGroup disabled label="Disabled group">\n  <TextField label="Label" />\n  <Button label="Submit" />\n</InputGroup>',__scope:{props:n,DefaultLayout:r.a,Playground:p.c,Props:p.d,Icon:b.a,Button:u.c,InputGroup:u.n,SelectField:u.A,TextField:u.G,DefaultLayout:r.a,_frontmatter:d},mdxType:"Playground"},Object(i.b)(u.n,{disabled:!0,label:"Disabled group",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"Label",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"}))),Object(i.b)("h3",{id:"validation-states"},"Validation States"),Object(i.b)("p",null,"Validation states visually present the result of validation of the grouped\ninputs. Input group's validation state is taken from its child inputs. You\nshould always ",Object(i.b)("strong",{parentName:"p"},"provide validation messages for states other than valid"),"\ndirectly through ",Object(i.b)("inlineCode",{parentName:"p"},"validationTexts")," prop so users know what happened and what\naction they should take or what options they have. These messages are not\nsemantically tied to the ",Object(i.b)("inlineCode",{parentName:"p"},"children")," elements, the connection should be expressed\nin textual form in the actual message. The individual ",Object(i.b)("inlineCode",{parentName:"p"},"children")," elements must\nnot show any ",Object(i.b)("inlineCode",{parentName:"p"},"validationText"),", they only show their respective ",Object(i.b)("inlineCode",{parentName:"p"},"validationState"),".\nValidation messages passed to input elements' ",Object(i.b)("inlineCode",{parentName:"p"},"validationText")," prop will be\nignored."),Object(i.b)(p.c,{__position:5,__code:'<InputGroup\n  label="First and last name"\n  validationTexts={[\n    \'First name must be filled in.\',\n    \'Last name must be filled in.\',\n  ]}\n>\n  <TextField\n    label="First name"\n    placeholder="Eg. John"\n    validationState="invalid"\n  />\n  <TextField\n    label="Last name"\n    placeholder="Eg. Doe"\n    validationState="invalid"\n  />\n  <Button label="Submit" />\n</InputGroup>\n<InputGroup\n  label="First and last name"\n  validationTexts={[\'Last name should not include any digits.\']}\n>\n  <TextField label="First name" placeholder="Eg. John" value="John" />\n  <TextField\n    label="Last name"\n    placeholder="Eg. Doe"\n    validationState="warning"\n    value="123Doe"\n  />\n  <Button label="Submit" />\n</InputGroup>\n<InputGroup label="First and last name">\n  <TextField\n    label="First name"\n    placeholder="Eg. John"\n    validationState="valid"\n    value="John"\n  />\n  <TextField\n    label="Last name"\n    placeholder="Eg. Doe"\n    validationState="valid"\n    value="Doe"\n  />\n  <Button label="Submit" />\n</InputGroup>',__scope:{props:n,DefaultLayout:r.a,Playground:p.c,Props:p.d,Icon:b.a,Button:u.c,InputGroup:u.n,SelectField:u.A,TextField:u.G,DefaultLayout:r.a,_frontmatter:d},mdxType:"Playground"},Object(i.b)(u.n,{label:"First and last name",validationTexts:["First name must be filled in.","Last name must be filled in."],mdxType:"InputGroup"},Object(i.b)(u.G,{label:"First name",placeholder:"Eg. John",validationState:"invalid",mdxType:"TextField"}),Object(i.b)(u.G,{label:"Last name",placeholder:"Eg. Doe",validationState:"invalid",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"})),Object(i.b)(u.n,{label:"First and last name",validationTexts:["Last name should not include any digits."],mdxType:"InputGroup"},Object(i.b)(u.G,{label:"First name",placeholder:"Eg. John",value:"John",mdxType:"TextField"}),Object(i.b)(u.G,{label:"Last name",placeholder:"Eg. Doe",validationState:"warning",value:"123Doe",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"})),Object(i.b)(u.n,{label:"First and last name",mdxType:"InputGroup"},Object(i.b)(u.G,{label:"First name",placeholder:"Eg. John",validationState:"valid",value:"John",mdxType:"TextField"}),Object(i.b)(u.G,{label:"Last name",placeholder:"Eg. Doe",validationState:"valid",value:"Doe",mdxType:"TextField"}),Object(i.b)(u.c,{label:"Submit",mdxType:"Button"}))),Object(i.b)("h2",{id:"forwarding-html-attributes"},"Forwarding HTML Attributes"),Object(i.b)("p",null,"In addition to the options below in the ",Object(i.b)("a",{parentName:"p",href:"#api"},"component's API")," section, you\ncan specify ",Object(i.b)("a",{parentName:"p",href:"https://reactjs.org/docs/events.html"},"React synthetic events")," or ",Object(i.b)("strong",{parentName:"p"},"any HTML attribute you like.")," All\nattributes that don't interfere with the API are forwarded to the ",Object(i.b)("inlineCode",{parentName:"p"},"<div>")," HTML\nelement which wraps elements to be grouped. This enables making the component\ninteractive and helps to improve its accessibility."),Object(i.b)("p",null,"ðŸ‘‰ Refer to the MDN reference for the full list of supported attributes of the\n",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div#attributes"},"div")," element."),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)(p.d,{table:!0,of:u.n,mdxType:"Props"}),Object(i.b)("h2",{id:"theming"},"Theming"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-InputGroup__gap")),Object(i.b)("td",{parentName:"tr",align:null},"Gap between elements")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-InputGroup__inner-border-radius")),Object(i.b)("td",{parentName:"tr",align:null},"Inner border radius of elements")))))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!Object.prototype.hasOwnProperty.call(h,"__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/InputGroup/README.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-input-group-readme-mdx-6ae16e3a4db4e9243795.js.map