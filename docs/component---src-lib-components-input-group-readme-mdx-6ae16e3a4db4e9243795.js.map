{"version":3,"sources":["webpack:///../src/lib/components/InputGroup/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Icon","Button","InputGroup","SelectField","TextField","fruit","setFruit","React","label","onChange","e","target","value","options","placeholder","size","isLabelVisible","layout","disabled","validationTexts","validationState","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-input-group-readme-mdx-6ae16e3a4db4e9243795.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Icon from '../../../docs/_components/Icon';\nimport { Button, InputGroup, SelectField, TextField } from '../..';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"inputgroup\"\n    }}>{`InputGroup`}</h1>\n    <p>{`InputGroup visually groups related form fields and actions together.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the InputGroup component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { InputGroup } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Pear\\',\\n      value: \\'pear\\',\\n    },\\n    {\\n      label: \\'Cherry\\',\\n      value: \\'cherry\\',\\n    },\\n  ]\\n  return (\\n    <InputGroup label=\\\"Your favourite fruit\\\">\\n      <SelectField\\n        label=\\\"Your favourite fruit\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        value={fruit}\\n      />\\n      <TextField label=\\\"Variety\\\" placeholder=\\\"Eg. Golden delicious\\\" />\\n      <Button label=\\\"Submit\\\" />\\n    </InputGroup>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Button,\n      InputGroup,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Pear',\n          value: 'pear'\n        }, {\n          label: 'Cherry',\n          value: 'cherry'\n        }];\n        return <InputGroup label=\"Your favourite fruit\" mdxType=\"InputGroup\">\n        <SelectField label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        <TextField label=\"Variety\" placeholder=\"Eg. Golden delicious\" mdxType=\"TextField\" />\n        <Button label=\"Submit\" mdxType=\"Button\" />\n      </InputGroup>;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use input group to group `}<strong parentName=\"p\">{`related fields and actions`}</strong>{` that a user can take.\nInput fields and buttons should not be grouped just to save space on the\nscreen.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`While the number of child inputs is not limited, keep in mind the layout of\nInputGroup is currently `}<strong parentName=\"p\">{`not responsive: the inputs do not shrink nor wrap`}</strong>{`.\nMake sure your inputs fit their container, especially on small screens.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`In the background, InputGroup uses the `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"\n          }}><inlineCode parentName=\"a\">{`fieldset`}</inlineCode></a>{` element. Not\nonly it improves the `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.w3.org/WAI/tutorials/forms/grouping/\"\n          }}>{`accessibility`}</a>{` of the group, it also allows you to make\nuse of its built-in features like disabling all nested inputs or pairing the\ngroup with a form outside. Consult `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"\n          }}>{`the MDN docs`}</a>{` to learn more.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`InputGroup currently `}<strong parentName=\"p\">{`supports grouping of`}</strong>{`\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/text-field\"\n          }}>{`TextField`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"/components/select-field\"\n          }}>{`SelectField`}</a>{`,\nand `}<a parentName=\"p\" {...{\n            \"href\": \"/components/button\"\n          }}>{`Button`}</a>{` components.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To group `}<a parentName=\"p\" {...{\n            \"href\": \"/components/button\"\n          }}>{`Buttons`}</a>{` only, use the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/button-group\"\n          }}>{`ButtonGroup`}</a>{` component which is designed\nspecifically for that purpose.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`All existing field and button sizes are also available on the input group level:\nsmall, medium, and large.`}</p>\n    <Playground __position={1} __code={'<InputGroup label=\\\"Small size\\\" size=\\\"small\\\">\\n  <TextField label=\\\"Input\\\" />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>\\n<InputGroup label=\\\"Medium size\\\">\\n  <TextField label=\\\"Input\\\" />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>\\n<InputGroup label=\\\"Large size\\\" size=\\\"large\\\">\\n  <TextField label=\\\"Input\\\" />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Button,\n      InputGroup,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup label=\"Small size\" size=\"small\" mdxType=\"InputGroup\">\n    <TextField label=\"Input\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n  <InputGroup label=\"Medium size\" mdxType=\"InputGroup\">\n    <TextField label=\"Input\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n  <InputGroup label=\"Large size\" size=\"large\" mdxType=\"InputGroup\">\n    <TextField label=\"Input\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n    </Playground>\n    <h3 {...{\n      \"id\": \"shared-property\"\n    }}>{`Shared Property`}</h3>\n    <p>{`You can set the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` property directly on InputGroup to be shared for all\nfields and buttons inside the group. This property is then passed over to\nindividual elements. At the same time, it `}<strong parentName=\"p\">{`cannot be overridden`}</strong>{` on the\nfields' or buttons' level. While technically possible, from the design point of\nview it's undesirable to group elements of totally different types or sizes.`}</p>\n    <h2 {...{\n      \"id\": \"invisible-label\"\n    }}>{`Invisible Label`}</h2>\n    <p>{`In some cases, it may be convenient to visually hide the group label. The label\nremains accessible to assistive technologies. Labels of individual inputs are\nalways visually hidden.`}</p>\n    <p>{`While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should `}<strong parentName=\"p\">{`provide another visual clue`}</strong>{` so users know what to fill into\nthe input.`}</p>\n    <Playground __position={2} __code={'<InputGroup isLabelVisible={false} label=\\\"First and last name\\\">\\n  <TextField label=\\\"First name\\\" placeholder=\\\"Eg. John\\\" />\\n  <TextField label=\\\"Last name\\\" placeholder=\\\"Eg. Doe\\\" />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Button,\n      InputGroup,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup isLabelVisible={false} label=\"First and last name\" mdxType=\"InputGroup\">\n    <TextField label=\"First name\" placeholder=\"Eg. John\" mdxType=\"TextField\" />\n    <TextField label=\"Last name\" placeholder=\"Eg. Doe\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal layout`}</h2>\n    <p>{`The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better — and that's why React UI\nsupports this kind of layout as well.`}</p>\n    <Playground __position={3} __code={'<InputGroup label=\\\"Horizontal layout\\\" layout=\\\"horizontal\\\">\\n  <TextField label=\\\"Label\\\" />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Button,\n      InputGroup,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup label=\"Horizontal layout\" layout=\"horizontal\" mdxType=\"InputGroup\">\n    <TextField label=\"Label\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`Disables all fields and buttons inside the group.`}</p>\n    <Playground __position={4} __code={'<InputGroup disabled label=\\\"Disabled group\\\">\\n  <TextField label=\\\"Label\\\" />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Button,\n      InputGroup,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup disabled label=\"Disabled group\" mdxType=\"InputGroup\">\n    <TextField label=\"Label\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n    </Playground>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the grouped\ninputs. Input group's validation state is taken from its child inputs. You\nshould always `}<strong parentName=\"p\">{`provide validation messages for states other than valid`}</strong>{`\ndirectly through `}<inlineCode parentName=\"p\">{`validationTexts`}</inlineCode>{` prop so users know what happened and what\naction they should take or what options they have. These messages are not\nsemantically tied to the `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` elements, the connection should be expressed\nin textual form in the actual message. The individual `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` elements must\nnot show any `}<inlineCode parentName=\"p\">{`validationText`}</inlineCode>{`, they only show their respective `}<inlineCode parentName=\"p\">{`validationState`}</inlineCode>{`.\nValidation messages passed to input elements' `}<inlineCode parentName=\"p\">{`validationText`}</inlineCode>{` prop will be\nignored.`}</p>\n    <Playground __position={5} __code={'<InputGroup\\n  label=\\\"First and last name\\\"\\n  validationTexts={[\\n    \\'First name must be filled in.\\',\\n    \\'Last name must be filled in.\\',\\n  ]}\\n>\\n  <TextField\\n    label=\\\"First name\\\"\\n    placeholder=\\\"Eg. John\\\"\\n    validationState=\\\"invalid\\\"\\n  />\\n  <TextField\\n    label=\\\"Last name\\\"\\n    placeholder=\\\"Eg. Doe\\\"\\n    validationState=\\\"invalid\\\"\\n  />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>\\n<InputGroup\\n  label=\\\"First and last name\\\"\\n  validationTexts={[\\'Last name should not include any digits.\\']}\\n>\\n  <TextField label=\\\"First name\\\" placeholder=\\\"Eg. John\\\" value=\\\"John\\\" />\\n  <TextField\\n    label=\\\"Last name\\\"\\n    placeholder=\\\"Eg. Doe\\\"\\n    validationState=\\\"warning\\\"\\n    value=\\\"123Doe\\\"\\n  />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>\\n<InputGroup label=\\\"First and last name\\\">\\n  <TextField\\n    label=\\\"First name\\\"\\n    placeholder=\\\"Eg. John\\\"\\n    validationState=\\\"valid\\\"\\n    value=\\\"John\\\"\\n  />\\n  <TextField\\n    label=\\\"Last name\\\"\\n    placeholder=\\\"Eg. Doe\\\"\\n    validationState=\\\"valid\\\"\\n    value=\\\"Doe\\\"\\n  />\\n  <Button label=\\\"Submit\\\" />\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      Button,\n      InputGroup,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup label=\"First and last name\" validationTexts={[\"First name must be filled in.\", \"Last name must be filled in.\"]} mdxType=\"InputGroup\">\n    <TextField label=\"First name\" placeholder=\"Eg. John\" validationState=\"invalid\" mdxType=\"TextField\" />\n    <TextField label=\"Last name\" placeholder=\"Eg. Doe\" validationState=\"invalid\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n  <InputGroup label=\"First and last name\" validationTexts={[\"Last name should not include any digits.\"]} mdxType=\"InputGroup\">\n    <TextField label=\"First name\" placeholder=\"Eg. John\" value=\"John\" mdxType=\"TextField\" />\n    <TextField label=\"Last name\" placeholder=\"Eg. Doe\" validationState=\"warning\" value=\"123Doe\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n  <InputGroup label=\"First and last name\" mdxType=\"InputGroup\">\n    <TextField label=\"First name\" placeholder=\"Eg. John\" validationState=\"valid\" value=\"John\" mdxType=\"TextField\" />\n    <TextField label=\"Last name\" placeholder=\"Eg. Doe\" validationState=\"valid\" value=\"Doe\" mdxType=\"TextField\" />\n    <Button label=\"Submit\" mdxType=\"Button\" />\n  </InputGroup>\n    </Playground>\n    <h2 {...{\n      \"id\": \"forwarding-html-attributes\"\n    }}>{`Forwarding HTML Attributes`}</h2>\n    <p>{`In addition to the options below in the `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`component's API`}</a>{` section, you\ncan specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or `}<strong parentName=\"p\">{`any HTML attribute you like.`}</strong>{` All\nattributes that don't interfere with the API are forwarded to the `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` HTML\nelement which wraps elements to be grouped. This enables making the component\ninteractive and helps to improve its accessibility.`}</p>\n    <p>{`👉 Refer to the MDN reference for the full list of supported attributes of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div#attributes\"\n      }}>{`div`}</a>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={InputGroup} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-InputGroup__gap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Gap between elements`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-InputGroup__inner-border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Inner border radius of elements`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}