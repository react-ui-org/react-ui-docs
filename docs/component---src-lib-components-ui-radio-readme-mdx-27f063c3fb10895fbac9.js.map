{"version":3,"sources":["webpack:///../src/lib/components/ui/Radio/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Radio","fruit","setFruit","React","changeHandler","e","target","value","id","label","options","frequency","setFrequency","isLabelVisible","helpText","required","validationState","validationText","disabled","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-radio-readme-mdx-27f063c3fb10895fbac9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Radio } from './Radio';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"radio\"\n    }}>{`Radio`}</h1>\n    <p>{`Radio allows users to select one option from a set.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Radio component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Radio } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  return (\\n    <Radio\\n      changeHandler={e => setFruit(e.target.value)}\\n      id=\\\"my-radio\\\"\\n      label=\\\"Your favourite fruit\\\"\\n      options={[\\n        {\\n          label: \\'Apple\\',\\n          value: \\'apple\\',\\n        },\\n        {\\n          label: \\'Banana\\',\\n          value: \\'banana\\',\\n        },\\n        {\\n          label: \\'Grapefruit\\',\\n          value: \\'grapefruit\\',\\n        },\\n      ]}\\n      value={fruit}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        return <Radio changeHandler={e => setFruit(e.target.value)} id=\"my-radio\" label=\"Your favourite fruit\" options={[{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }]} value={fruit} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use Radio for `}<strong parentName=\"p\">{`just a few options`}</strong>{`. For larger sets of many options (say 4\nand more) consider using the `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/select-field\"\n          }}>{`SelectField`}</a>{`\ncomponent. This will help keep your UI clean and uncluttered and prevent your\nusers from being overwhelmed by too many options.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Don't use for boolean`}</strong>{` (true/false) selection or to toggle things on and\noff. `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/checkbox-field\"\n          }}>{`CheckboxField`}</a>{` and\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/toggle\"\n          }}>{`Toggle`}</a>{` are more suitable for such cases.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`short and descriptive labels`}</strong>{`, ideally nouns rather than seemingly\npolite phrases like `}<em parentName=\"p\">{`Please select your favourite fruit`}</em>{`. Short labels will\nhelp your users accomplish their task faster.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the Radio's label invisible when there is `}<strong parentName=\"p\">{`another visual\nclue`}</strong>{` to guide users through filling the input.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered.`}</p>\n      </li>\n    </ul>\n    <p>{`ðŸ“– `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/\"\n      }}>{`Read more about checkboxes and radios at Nielsen Norman Group.`}</a></p>\n    <h2 {...{\n      \"id\": \"invisible-label\"\n    }}>{`Invisible Label`}</h2>\n    <p>{`While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should `}<strong parentName=\"p\">{`provide another visual clue`}</strong>{` so users know what to fill into\nthe input.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [frequency, setFrequency] = React.useState(\\'weekly\\')\\n  return (\\n    <Radio\\n      changeHandler={e => setFrequency(e.target.value)}\\n      id=\\\"my-radio-hidden-label\\\"\\n      isLabelVisible={false}\\n      label=\\\"Newsletter frequency\\\"\\n      options={[\\n        {\\n          label: \\'I want to subscribe to the weekly newsletter\\',\\n          value: \\'weekly\\',\\n        },\\n        {\\n          label: \\'I want to subscribe to the monthly newsletter\\',\\n          value: \\'monthly\\',\\n        },\\n        {\\n          label: \\\"I don\\'t wish to receive anything\\\",\\n          value: \\'never\\',\\n        },\\n      ]}\\n      value={frequency}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [frequency, setFrequency] = React.useState('weekly');\n        return <Radio changeHandler={e => setFrequency(e.target.value)} id=\"my-radio-hidden-label\" isLabelVisible={false} label=\"Newsletter frequency\" options={[{\n          label: 'I want to subscribe to the weekly newsletter',\n          value: 'weekly'\n        }, {\n          label: 'I want to subscribe to the monthly newsletter',\n          value: 'monthly'\n        }, {\n          label: \"I don't wish to receive anything\",\n          value: 'never'\n        }]} value={frequency} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify how the input should be\nfilled.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  return (\\n    <Radio\\n      changeHandler={e => setFruit(e.target.value)}\\n      helpText=\\\"What do you prefer?\\\"\\n      id=\\\"my-radio-help-text\\\"\\n      label=\\\"Your favourite fruit\\\"\\n      options={[\\n        {\\n          label: \\'Apple\\',\\n          value: \\'apple\\',\\n        },\\n        {\\n          label: \\'Banana\\',\\n          value: \\'banana\\',\\n        },\\n        {\\n          label: \\'Grapefruit\\',\\n          value: \\'grapefruit\\',\\n        },\\n      ]}\\n      value={fruit}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        return <Radio changeHandler={e => setFruit(e.target.value)} helpText=\"What do you prefer?\" id=\"my-radio-help-text\" label=\"Your favourite fruit\" options={[{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }]} value={fruit} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide a validation message for states other than valid`}</strong>{` so\nusers know what happened and what action they should take or what options they\nhave.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <Radio\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"my-radio-success\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        required\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"Great, they\\'re in stock!\\\"\\n        value={fruit}\\n      />\\n      <Radio\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"my-radio-warning\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        required\\n        validationState=\\\"warning\\\"\\n        validationText=\\\"Oh, really?\\\"\\n        value={fruit}\\n      />\\n      <Radio\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"my-radio-error\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        required\\n        validationState=\\\"invalid\\\"\\n        validationText=\\\"You must select one kind of fruit.\\\"\\n        value={fruit}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <Radio changeHandler={e => setFruit(e.target.value)} id=\"my-radio-success\" label=\"Your favourite fruit\" options={options} required validationState=\"valid\" validationText=\"Great, they're in stock!\" value={fruit} mdxType=\"Radio\" />\n        <Radio changeHandler={e => setFruit(e.target.value)} id=\"my-radio-warning\" label=\"Your favourite fruit\" options={options} required validationState=\"warning\" validationText=\"Oh, really?\" value={fruit} mdxType=\"Radio\" />\n        <Radio changeHandler={e => setFruit(e.target.value)} id=\"my-radio-error\" label=\"Your favourite fruit\" options={options} required validationState=\"invalid\" validationText=\"You must select one kind of fruit.\" value={fruit} mdxType=\"Radio\" />\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`It's possible to disable just some options or the whole set.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      disabled: true,\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <Radio\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"my-radio-disabled-option\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        value={fruit}\\n      />\\n      <Radio\\n        changeHandler={e => setFruit(e.target.value)}\\n        disabled\\n        id=\\\"my-radio-disabled\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        value=\\\"apple\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          disabled: true,\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <Radio changeHandler={e => setFruit(e.target.value)} id=\"my-radio-disabled-option\" label=\"Your favourite fruit\" options={options} value={fruit} mdxType=\"Radio\" />\n        <Radio changeHandler={e => setFruit(e.target.value)} disabled id=\"my-radio-disabled\" label=\"Your favourite fruit\" options={options} value=\"apple\" mdxType=\"Radio\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`In addition to the options below, you can add any custom attributes that do not\ninterfere with the API, and they will be passed to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` HTML element.\nThis is useful mainly to improve component's accessibility.`}</p>\n    <Props of={Radio} mdxType=\"Props\" />\n    <hr></hr>\n    <p>{`Next: `}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/scroll-view\"\n      }}>{`ScrollView â†’`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}