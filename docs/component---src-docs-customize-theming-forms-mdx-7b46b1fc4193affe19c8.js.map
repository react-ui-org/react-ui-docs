{"version":3,"sources":["webpack:///../src/docs/customize/theming/forms.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","CheckboxField","Radio","SelectField","TextField","Toggle","fruit","setFruit","React","options","label","value","type","id","variant","onChange","e","target","className","agree","setAgree","studioQuality","setStudioQuality","checked","validationState","validationText","disabled","isMDXComponent"],"mappings":"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","file":"component---src-docs-customize-theming-forms-mdx-7b46b1fc4193affe19c8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { CheckboxField, Radio, SelectField, TextField, Toggle } from '../../../lib';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"forms-theming\"\n    }}>{`Forms Theming`}</h1>\n\n    <p>{`To make forms theming easy and robust, form components have many theming\noptions in common.`}</p>\n    <p>{`General naming convention for CSS custom properties looks as follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-FormField--[<TYPE>]--[<MODIFICATION>]__[<ELEMENT>--[<ELEMENT\nTYPE]]--[<INTERACTION STATE>]__<PROPERTY>`}</inlineCode></p>\n    <p>{`Items in brackets are optional. As you read on you will notice some theming\noption groups may have less complicated conventions (that are still subset of\nthe naming system above).`}</p>\n    <h2 {...{\n      \"id\": \"basic-theming\"\n    }}>{`Basic Theming`}</h2>\n    <p>{`The following theme options define basic appearance of all form fields.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField__label__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label text color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField__label__font-size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label font size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField__help-text__font-size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Help text font size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField__help-text__font-style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Help text font style, e.g. italic`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField__help-text__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Help text color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--required__label__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Color of required input labels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--required__sign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text appended to required input labels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--required__sign__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Color of text appended to required input labels`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`Options for fields that support horizontal layout.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal__label__text-align`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text alignment of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal__label__min-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Minimum width of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal__label__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default width of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal__label__padding-y`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Top and bottom padding to tweak vertical alignment of labels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal__label__vertical-alignment`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Vertical box alignment of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal__field__vertical-alignment`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Vertical box alignment of fields in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--horizontal--full-width__label__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default width of labels in full-width horizontal layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"box-fields\"\n    }}>{`Box Fields`}</h2>\n    <p>{`Options shared by box form controls. This includes\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/text-field\"\n      }}>{`TextField`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/text-area\"\n      }}>{`TextArea`}</a>{`, and\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/select-field\"\n      }}>{`SelectField`}</a>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--box__border-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Control border width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--box__border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Control corner radius`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--box__input__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default text input and select box width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--box__input__min-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Minimum text input and select box width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--box__placeholder__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Placeholder text color`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Example:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n        .example--themed-form-fields {\\n          --rui-FormField--box__border-width: 2px;\\n          --rui-FormField--box__border-radius: 0.5rem;\\n          --rui-FormField--box__input__width: 300px;\\n        }\\n      `}\\n      </style>\\n      <TextField\\n        id=\\\"default-outline-text-field\\\"\\n        label=\\\"Default outline text field\\\"\\n      />\\n      <TextField\\n        id=\\\"default-filled-text-field\\\"\\n        label=\\\"Default filled text field\\\"\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        id=\\\"default-outline-select-field\\\"\\n        label=\\\"Default outline select field\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-fields mt-6\\\">\\n        <TextField\\n          id=\\\"themed-outline-text-field\\\"\\n          label=\\\"Themed outline text field\\\"\\n        />\\n        <TextField\\n          id=\\\"themed-filled-text-field\\\"\\n          label=\\\"Themed filled text field\\\"\\n          variant=\\\"filled\\\"\\n        />\\n        <SelectField\\n          id=\\\"themed-outline-select-field\\\"\\n          label=\\\"Themed outline select field\\\"\\n          onChange={e => setFruit(e.target.value)}\\n          options={options}\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextField,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <style type=\"text/css\">\n          {`\n          .example--themed-form-fields {\n            --rui-FormField--box__border-width: 2px;\n            --rui-FormField--box__border-radius: 0.5rem;\n            --rui-FormField--box__input__width: 300px;\n          }\n        `}\n        </style>\n        <TextField id=\"default-outline-text-field\" label=\"Default outline text field\" mdxType=\"TextField\" />\n        <TextField id=\"default-filled-text-field\" label=\"Default filled text field\" variant=\"filled\" mdxType=\"TextField\" />\n        <SelectField id=\"default-outline-select-field\" label=\"Default outline select field\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        <div className=\"example example--themed-form-fields mt-6\">\n          <TextField id=\"themed-outline-text-field\" label=\"Themed outline text field\" mdxType=\"TextField\" />\n          <TextField id=\"themed-filled-text-field\" label=\"Themed filled text field\" variant=\"filled\" mdxType=\"TextField\" />\n          <SelectField id=\"themed-outline-select-field\" label=\"Themed outline select field\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"box-field-variants\"\n    }}>{`Box Field Variants`}</h3>\n    <p>{`Theming options for box form controls. Naming convention looks as follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-FormField--box--<VISUAL VARIANT>--<INTERACTION STATE>__<PROPERTY>`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<VISUAL VARIANT>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`filled`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`outline`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<INTERACTION STATE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`hover`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`focus`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<PROPERTY>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`border-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box-shadow`}</inlineCode>{`, or\n`}<inlineCode parentName=\"li\">{`surrounding-text-color`}</inlineCode>{` (the last one being available only for `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{` and\n`}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{` interaction states).`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n      .example--themed-form-field-variants {\\n        --rui-FormField--box__border-width: 0px;\\n        --rui-FormField--box--outline--default__box-shadow:\\n          0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\\n        --rui-FormField--box--outline--hover__box-shadow:\\n          0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\\n        --rui-FormField--box--outline--focus__box-shadow:\\n          inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\\n      }\\n    `}\\n      </style>\\n      <TextField\\n        id=\\\"default-outline-text-field\\\"\\n        label=\\\"Default outline text field\\\"\\n      />\\n      <SelectField\\n        id=\\\"default-outline-select-field\\\"\\n        label=\\\"Default outline select field\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-field-variants mt-6\\\">\\n        <TextField\\n          id=\\\"themed-outline-text-field\\\"\\n          label=\\\"Themed outline text field\\\"\\n        />\\n        <SelectField\\n          id=\\\"themed-outline-select-field\\\"\\n          label=\\\"Themed outline select field\\\"\\n          onChange={e => setFruit(e.target.value)}\\n          options={options}\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextField,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <style type=\"text/css\">\n          {`\n        .example--themed-form-field-variants {\n          --rui-FormField--box__border-width: 0px;\n          --rui-FormField--box--outline--default__box-shadow:\n            0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n          --rui-FormField--box--outline--hover__box-shadow:\n            0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n          --rui-FormField--box--outline--focus__box-shadow:\n            inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n        }\n      `}\n        </style>\n        <TextField id=\"default-outline-text-field\" label=\"Default outline text field\" mdxType=\"TextField\" />\n        <SelectField id=\"default-outline-select-field\" label=\"Default outline select field\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        <div className=\"example example--themed-form-field-variants mt-6\">\n          <TextField id=\"themed-outline-text-field\" label=\"Themed outline text field\" mdxType=\"TextField\" />\n          <SelectField id=\"themed-outline-select-field\" label=\"Themed outline select field\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"box-field-sizes\"\n    }}>{`Box Field Sizes`}</h3>\n    <p>{`Available sizes can be adjusted as follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-FormField--box--<SIZE>__<PROPERTY>`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<SIZE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`small`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`medium`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`large`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<PROPERTY>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`height`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding-x`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding-y`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`font-size`}</inlineCode></li>\n    </ul>\n    <p>{`👉 Box field sizes are linked to\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/button#theming-sizes\"\n      }}>{`Button sizes`}</a>{` so they align nicely when\nplaced in row.`}</p>\n    <p>{`Example:`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n      .example--themed-form-field-sizes {\\n        --rui-FormField--box--medium__height: 3rem;\\n        --rui-FormField--box--medium__padding-x: 1.25rem;\\n      }\\n    `}\\n      </style>\\n      <TextField\\n        id=\\\"default-medium-text-field\\\"\\n        label=\\\"Default medium text field\\\"\\n      />\\n      <SelectField\\n        id=\\\"default-medium-select-field\\\"\\n        label=\\\"Default medium select field\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-field-sizes mt-6\\\">\\n        <TextField\\n          id=\\\"themed-medium-text-field\\\"\\n          label=\\\"Themed medium text field\\\"\\n        />\\n        <SelectField\\n          id=\\\"themed-medium-select-field\\\"\\n          label=\\\"Themed medium select field\\\"\\n          onChange={e => setFruit(e.target.value)}\\n          options={options}\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextField,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <style type=\"text/css\">\n          {`\n        .example--themed-form-field-sizes {\n          --rui-FormField--box--medium__height: 3rem;\n          --rui-FormField--box--medium__padding-x: 1.25rem;\n        }\n      `}\n        </style>\n        <TextField id=\"default-medium-text-field\" label=\"Default medium text field\" mdxType=\"TextField\" />\n        <SelectField id=\"default-medium-select-field\" label=\"Default medium select field\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        <div className=\"example example--themed-form-field-sizes mt-6\">\n          <TextField id=\"themed-medium-text-field\" label=\"Themed medium text field\" mdxType=\"TextField\" />\n          <SelectField id=\"themed-medium-select-field\" label=\"Themed medium select field\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"SelectField\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"check-fields\"\n    }}>{`Check Fields`}</h2>\n    <p>{`Options shared by checkable form controls. This includes\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/checkbox-field\"\n      }}>{`CheckboxField`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/components/radio\"\n      }}>{`Radio`}</a>{`,\nand `}<a parentName=\"p\" {...{\n        \"href\": \"/components/toggle\"\n      }}>{`Toggle`}</a>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input__size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Size of check inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input__border-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border width of check inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--focus__box-shadow`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Box shadow to highlight focused inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__tap-target-size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Minimum tap target size`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Interaction states:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--default__border-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border color of unchecked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--default__check-background-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background color of unchecked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--checked__border-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border color of checked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--checked__check-background-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background color of checked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--disabled__border-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border color of disabled unchecked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--disabled__check-background-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background color of disabled unchecked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--checked-disabled__border-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border color of disabled checked inputs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check--checked-disabled__check-background-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background color of disabled checked inputs`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Example:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [agree, setAgree] = React.useState(true)\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n          .example--themed-check-fields {\\n            --rui-FormField--check__input__border-width: 2px;\\n            --rui-FormField--check--checked__border-color: LightSeaGreen;\\n            --rui-FormField--check--checked__check-background-color: MediumAquamarine;\\n          }\\n        `}\\n      </style>\\n      <Radio\\n        id=\\\"default-radio\\\"\\n        label=\\\"Default radio\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={[\\n          {\\n            label: \\'Apple\\',\\n            value: \\'apple\\',\\n          },\\n          {\\n            label: \\'Banana\\',\\n            value: \\'banana\\',\\n          },\\n          {\\n            label: \\'Grapefruit\\',\\n            value: \\'grapefruit\\',\\n          },\\n        ]}\\n        value={fruit}\\n      />\\n      <CheckboxField\\n        checked={agree}\\n        id=\\\"default-checkbox\\\"\\n        label=\\\"Default checkbox\\\"\\n        onChange={() => setAgree(!agree)}\\n      />\\n      <Toggle\\n        checked={studioQuality}\\n        id=\\\"default-toggle\\\"\\n        label=\\\"Default toggle\\\"\\n        onChange={() => setStudioQuality(!studioQuality)}\\n      />\\n      <div className=\\\"example example--themed-check-fields mt-6\\\">\\n        <Radio\\n          id=\\\"themed-radio\\\"\\n          label=\\\"Themed radio\\\"\\n          onChange={e => setFruit(e.target.value)}\\n          options={[\\n            {\\n              label: \\'Apple\\',\\n              value: \\'apple\\',\\n            },\\n            {\\n              label: \\'Banana\\',\\n              value: \\'banana\\',\\n            },\\n            {\\n              label: \\'Grapefruit\\',\\n              value: \\'grapefruit\\',\\n            },\\n          ]}\\n          value={fruit}\\n        />\\n        <CheckboxField\\n          checked={agree}\\n          id=\\\"themed-checkbox\\\"\\n          label=\\\"Themed checkbox\\\"\\n          onChange={() => setAgree(!agree)}\\n        />\\n        <Toggle\\n          checked={studioQuality}\\n          id=\\\"themed-toggle\\\"\\n          label=\\\"Themed toggle\\\"\\n          onChange={() => setStudioQuality(!studioQuality)}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextField,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [agree, setAgree] = React.useState(true);\n        const [fruit, setFruit] = React.useState('apple');\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        return <>\n        <style type=\"text/css\">\n          {`\n            .example--themed-check-fields {\n              --rui-FormField--check__input__border-width: 2px;\n              --rui-FormField--check--checked__border-color: LightSeaGreen;\n              --rui-FormField--check--checked__check-background-color: MediumAquamarine;\n            }\n          `}\n        </style>\n        <Radio id=\"default-radio\" label=\"Default radio\" onChange={e => setFruit(e.target.value)} options={[{\n            label: 'Apple',\n            value: 'apple'\n          }, {\n            label: 'Banana',\n            value: 'banana'\n          }, {\n            label: 'Grapefruit',\n            value: 'grapefruit'\n          }]} value={fruit} mdxType=\"Radio\" />\n        <CheckboxField checked={agree} id=\"default-checkbox\" label=\"Default checkbox\" onChange={() => setAgree(!agree)} mdxType=\"CheckboxField\" />\n        <Toggle checked={studioQuality} id=\"default-toggle\" label=\"Default toggle\" onChange={() => setStudioQuality(!studioQuality)} mdxType=\"Toggle\" />\n        <div className=\"example example--themed-check-fields mt-6\">\n          <Radio id=\"themed-radio\" label=\"Themed radio\" onChange={e => setFruit(e.target.value)} options={[{\n              label: 'Apple',\n              value: 'apple'\n            }, {\n              label: 'Banana',\n              value: 'banana'\n            }, {\n              label: 'Grapefruit',\n              value: 'grapefruit'\n            }]} value={fruit} mdxType=\"Radio\" />\n          <CheckboxField checked={agree} id=\"themed-checkbox\" label=\"Themed checkbox\" onChange={() => setAgree(!agree)} mdxType=\"CheckboxField\" />\n          <Toggle checked={studioQuality} id=\"themed-toggle\" label=\"Themed toggle\" onChange={() => setStudioQuality(!studioQuality)} mdxType=\"Toggle\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h2>\n    <p>{`Theming options for validation states are shared by all form components. Naming\nconvention looks as follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-FormField--<VALIDATION STATE>--<INTERACTION STATE>__<PROPERTY>`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<VALIDATION STATE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`invalid`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`valid`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`warning`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<INTERACTION STATE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`checked`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`, or\n`}<inlineCode parentName=\"li\">{`checked-disabled`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<PROPERTY>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`border-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`check-background-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box-shadow`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`surrounding-text-color`}</inlineCode></li>\n    </ul>\n    <p>{`Not all properties are used by all components, this varies from component to\ncomponent. Also, `}<inlineCode parentName=\"p\">{`hover`}</inlineCode>{` interaction state is unavailable for validation states\neverywhere — `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` state appearance is retained on hovering. For box fields,\n`}<inlineCode parentName=\"p\">{`focus`}</inlineCode>{` state for validation states is inherited from default form field\nappearance (i.e. as if no validation state was set).`}</p>\n    <p>{`Example:`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [agree, setAgree] = React.useState(true)\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n      .example--themed-form-field-validation-states {\\n        --rui-FormField--valid--default__color: white;\\n        --rui-FormField--valid--default__border-color: LightSeaGreen;\\n        --rui-FormField--valid--default__background: MediumAquamarine;\\n        --rui-FormField--valid--default__check-background-color: MediumAquamarine;\\n        --rui-FormField--valid--default__surrounding-text-color: DarkSlateGray;\\n        --rui-FormField--valid--checked__check-background-color: MediumAquamarine;\\n      }\\n    `}\\n      </style>\\n      <TextField\\n        id=\\\"default-valid-text-field\\\"\\n        label=\\\"Default valid text field\\\"\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n      />\\n      <SelectField\\n        id=\\\"default-valid-select-field\\\"\\n        label=\\\"Default valid select field\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n        value={fruit}\\n      />\\n      <Radio\\n        id=\\\"default-valid-radio\\\"\\n        label=\\\"Default valid radio\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={[\\n          {\\n            label: \\'Apple\\',\\n            value: \\'apple\\',\\n          },\\n          {\\n            label: \\'Banana\\',\\n            value: \\'banana\\',\\n          },\\n          {\\n            label: \\'Grapefruit\\',\\n            value: \\'grapefruit\\',\\n          },\\n        ]}\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n        value={fruit}\\n      />\\n      <CheckboxField\\n        checked={agree}\\n        id=\\\"default-valid-checkbox\\\"\\n        label=\\\"Default valid checkbox\\\"\\n        onChange={() => setAgree(!agree)}\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n      />\\n      <Toggle\\n        checked={studioQuality}\\n        id=\\\"default-valid-toggle\\\"\\n        label=\\\"Default valid toggle\\\"\\n        onChange={() => setStudioQuality(!studioQuality)}\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n      />\\n      <div className=\\\"example example--themed-form-field-validation-states mt-6\\\">\\n        <TextField\\n          id=\\\"themed-valid-text-field\\\"\\n          label=\\\"Themed valid text field\\\"\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n        />\\n        <SelectField\\n          id=\\\"themed-valid-select-field\\\"\\n          label=\\\"Themed valid select field\\\"\\n          onChange={e => setFruit(e.target.value)}\\n          options={options}\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n          value={fruit}\\n        />\\n        <Radio\\n          id=\\\"themed-valid-radio\\\"\\n          label=\\\"Themed valid radio\\\"\\n          onChange={e => setFruit(e.target.value)}\\n          options={[\\n            {\\n              label: \\'Apple\\',\\n              value: \\'apple\\',\\n            },\\n            {\\n              label: \\'Banana\\',\\n              value: \\'banana\\',\\n            },\\n            {\\n              label: \\'Grapefruit\\',\\n              value: \\'grapefruit\\',\\n            },\\n          ]}\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n          value={fruit}\\n        />\\n        <CheckboxField\\n          checked={agree}\\n          id=\\\"themed-valid-checkbox\\\"\\n          label=\\\"Themed valid checkbox\\\"\\n          onChange={() => setAgree(!agree)}\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n        />\\n        <Toggle\\n          onChange={() => setStudioQuality(!studioQuality)}\\n          checked={studioQuality}\\n          id=\\\"themed-valid-toggle\\\"\\n          label=\\\"Themed valid toggle\\\"\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextField,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [agree, setAgree] = React.useState(true);\n        const [fruit, setFruit] = React.useState('apple');\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <style type=\"text/css\">\n          {`\n        .example--themed-form-field-validation-states {\n          --rui-FormField--valid--default__color: white;\n          --rui-FormField--valid--default__border-color: LightSeaGreen;\n          --rui-FormField--valid--default__background: MediumAquamarine;\n          --rui-FormField--valid--default__check-background-color: MediumAquamarine;\n          --rui-FormField--valid--default__surrounding-text-color: DarkSlateGray;\n          --rui-FormField--valid--checked__check-background-color: MediumAquamarine;\n        }\n      `}\n        </style>\n        <TextField id=\"default-valid-text-field\" label=\"Default valid text field\" validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"TextField\" />\n        <SelectField id=\"default-valid-select-field\" label=\"Default valid select field\" onChange={e => setFruit(e.target.value)} options={options} validationState=\"valid\" validationText=\"This field is valid\" value={fruit} mdxType=\"SelectField\" />\n        <Radio id=\"default-valid-radio\" label=\"Default valid radio\" onChange={e => setFruit(e.target.value)} options={[{\n            label: 'Apple',\n            value: 'apple'\n          }, {\n            label: 'Banana',\n            value: 'banana'\n          }, {\n            label: 'Grapefruit',\n            value: 'grapefruit'\n          }]} validationState=\"valid\" validationText=\"This field is valid\" value={fruit} mdxType=\"Radio\" />\n        <CheckboxField checked={agree} id=\"default-valid-checkbox\" label=\"Default valid checkbox\" onChange={() => setAgree(!agree)} validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"CheckboxField\" />\n        <Toggle checked={studioQuality} id=\"default-valid-toggle\" label=\"Default valid toggle\" onChange={() => setStudioQuality(!studioQuality)} validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"Toggle\" />\n        <div className=\"example example--themed-form-field-validation-states mt-6\">\n          <TextField id=\"themed-valid-text-field\" label=\"Themed valid text field\" validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"TextField\" />\n          <SelectField id=\"themed-valid-select-field\" label=\"Themed valid select field\" onChange={e => setFruit(e.target.value)} options={options} validationState=\"valid\" validationText=\"This field is valid\" value={fruit} mdxType=\"SelectField\" />\n          <Radio id=\"themed-valid-radio\" label=\"Themed valid radio\" onChange={e => setFruit(e.target.value)} options={[{\n              label: 'Apple',\n              value: 'apple'\n            }, {\n              label: 'Banana',\n              value: 'banana'\n            }, {\n              label: 'Grapefruit',\n              value: 'grapefruit'\n            }]} validationState=\"valid\" validationText=\"This field is valid\" value={fruit} mdxType=\"Radio\" />\n          <CheckboxField checked={agree} id=\"themed-valid-checkbox\" label=\"Themed valid checkbox\" onChange={() => setAgree(!agree)} validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"CheckboxField\" />\n          <Toggle onChange={() => setStudioQuality(!studioQuality)} checked={studioQuality} id=\"themed-valid-toggle\" label=\"Themed valid toggle\" validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"Toggle\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h2>\n    <p>{`By default, all disabled form fields are semi-transparent and change mouse\ncursor on hover so users know the fields cannot be used.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--disabled__cursor`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Cursor to show on hovering disabled form fields`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--disabled__opacity`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Opacity of disabled form fields (inc. label and help text)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Should your design require custom styling of disabled fields, individual field\ntypes and validation states can be fine-tuned by several theming options\navailable. All you need is to define all necessary custom properties following\nthe naming conventions documented in previous sections (for simplicity, the\nproperties do not exist in the default theme, we only use transparency to mark\ndisabled fields by default). Namely, you will be interested in `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`checked-disabled`}</inlineCode>{` interaction states and properties that are available for\nstyling of these states.`}</p>\n    <p>{`Example:`}</p>\n    <Playground __position={5} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n        .example--themed-form-field-disabled-state {\\n          /*_Common_*/\\n          --rui-FormField--disabled__opacity: 1;\\n          /*_Check fields_*/\\n          --rui-FormField--check--disabled__border-color: silver;\\n          --rui-FormField--check--disabled__check-background-color: gainsboro;\\n          --rui-FormField--check--disabled__surrounding-text-color: silver;\\n          --rui-FormField--check--checked-disabled__border-color: silver;\\n          --rui-FormField--check--checked-disabled__check-background-color: gainsboro;\\n          /*_Outline box fields_*/\\n          --rui-FormField--box--outline--disabled__color: DarkGray;\\n          --rui-FormField--box--outline--disabled__border-color: silver;\\n          --rui-FormField--box--outline--disabled__background: gainsboro;\\n          --rui-FormField--box--outline--disabled__surrounding-text-color: silver;\\n          /*_Invalid state_*/\\n          --rui-FormField--invalid--disabled__color: DarkGray;\\n          --rui-FormField--invalid--disabled__border-color: silver;\\n          --rui-FormField--invalid--disabled__background: gainsboro;\\n          --rui-FormField--invalid--disabled__check-background-color: gainsboro;\\n          --rui-FormField--invalid--disabled__surrounding-text-color: silver;\\n          --rui-FormField--invalid--checked-disabled__check-background-color:\\n          gainsboro;\\n          /*_Warning state_*/\\n          --rui-FormField--warning--disabled__color: DarkGray;\\n          --rui-FormField--warning--disabled__border-color: silver;\\n          --rui-FormField--warning--disabled__background: gainsboro;\\n          --rui-FormField--warning--disabled__check-background-color: gainsboro;\\n          --rui-FormField--warning--disabled__surrounding-text-color: silver;\\n          --rui-FormField--warning--checked-disabled__check-background-color:\\n          gainsboro;\\n          /*_Valid state_*/\\n          --rui-FormField--valid--disabled__color: DarkGray;\\n          --rui-FormField--valid--disabled__border-color: silver;\\n          --rui-FormField--valid--disabled__background: gainsboro;\\n          --rui-FormField--valid--disabled__check-background-color: gainsboro;\\n          --rui-FormField--valid--disabled__surrounding-text-color: silver;\\n          --rui-FormField--valid--checked-disabled__check-background-color: gainsboro;\\n        }\\n      `}\\n      </style>\\n      <TextField\\n        disabled\\n        id=\\\"default-disabled-text-field\\\"\\n        label=\\\"Default disabled text field\\\"\\n      />\\n      <SelectField\\n        disabled\\n        id=\\\"default-disabled-select-field\\\"\\n        label=\\\"Default disabled select field\\\"\\n        options={options}\\n        value=\\\"apple\\\"\\n      />\\n      <TextField\\n        disabled\\n        id=\\\"default-disabled-invalid-text-field\\\"\\n        label=\\\"Default disabled invalid text field\\\"\\n        validationState=\\\"invalid\\\"\\n      />\\n      <Radio\\n        disabled\\n        id=\\\"default-disabled-radio\\\"\\n        label=\\\"Default disabled radio\\\"\\n        options={[\\n          {\\n            label: \\'Apple\\',\\n            value: \\'apple\\',\\n          },\\n          {\\n            label: \\'Banana\\',\\n            value: \\'banana\\',\\n          },\\n          {\\n            label: \\'Grapefruit\\',\\n            value: \\'grapefruit\\',\\n          },\\n        ]}\\n        value=\\\"apple\\\"\\n      />\\n      <CheckboxField\\n        checked\\n        disabled\\n        id=\\\"default-disabled-checkbox\\\"\\n        label=\\\"Default disabled checkbox\\\"\\n      />\\n      <Toggle\\n        checked\\n        disabled\\n        id=\\\"default-disabled-toggle\\\"\\n        label=\\\"Default disabled toggle\\\"\\n      />\\n      <CheckboxField\\n        disabled\\n        id=\\\"default-disabled-warning-checkbox\\\"\\n        label=\\\"Default disabled warning checkbox\\\"\\n        validationState=\\\"warning\\\"\\n      />\\n      <Toggle\\n        checked\\n        disabled\\n        id=\\\"default-disabled-valid-toggle\\\"\\n        label=\\\"Default disabled valid toggle\\\"\\n        validationState=\\\"valid\\\"\\n      />\\n      <div className=\\\"example example--themed-form-field-disabled-state mt-6\\\">\\n        <TextField\\n          disabled\\n          id=\\\"themed-disabled-text-field\\\"\\n          label=\\\"Themed disabled text field\\\"\\n        />\\n        <SelectField\\n          disabled\\n          id=\\\"themed-disabled-select-field\\\"\\n          label=\\\"Themed disabled select field\\\"\\n          options={options}\\n          value=\\\"apple\\\"\\n        />\\n        <TextField\\n          disabled\\n          id=\\\"themed-disabled-invalid-text-field\\\"\\n          label=\\\"Themed disabled invalid text field\\\"\\n          validationState=\\\"invalid\\\"\\n        />\\n        <Radio\\n          disabled\\n          id=\\\"themed-disabled-radio\\\"\\n          label=\\\"Themed disabled radio\\\"\\n          options={[\\n            {\\n              label: \\'Apple\\',\\n              value: \\'apple\\',\\n            },\\n            {\\n              label: \\'Banana\\',\\n              value: \\'banana\\',\\n            },\\n            {\\n              label: \\'Grapefruit\\',\\n              value: \\'grapefruit\\',\\n            },\\n          ]}\\n          value=\\\"apple\\\"\\n        />\\n        <CheckboxField\\n          checked\\n          disabled\\n          id=\\\"themed-disabled-checkbox\\\"\\n          label=\\\"Themed disabled checkbox\\\"\\n        />\\n        <Toggle\\n          checked\\n          disabled\\n          id=\\\"themed-disabled-toggle\\\"\\n          label=\\\"Themed disabled toggle\\\"\\n        />\\n        <CheckboxField\\n          disabled\\n          id=\\\"themed-disabled-warning-checkbox\\\"\\n          label=\\\"Themed disabled warning checkbox\\\"\\n          validationState=\\\"warning\\\"\\n        />\\n        <Toggle\\n          checked\\n          disabled\\n          id=\\\"themed-disabled-valid-toggle\\\"\\n          label=\\\"Themed disabled valid toggle\\\"\\n          validationState=\\\"valid\\\"\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextField,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <style type=\"text/css\">\n          {`\n          .example--themed-form-field-disabled-state {\n            /*_Common_*/\n            --rui-FormField--disabled__opacity: 1;\n            /*_Check fields_*/\n            --rui-FormField--check--disabled__border-color: silver;\n            --rui-FormField--check--disabled__check-background-color: gainsboro;\n            --rui-FormField--check--disabled__surrounding-text-color: silver;\n            --rui-FormField--check--checked-disabled__border-color: silver;\n            --rui-FormField--check--checked-disabled__check-background-color: gainsboro;\n            /*_Outline box fields_*/\n            --rui-FormField--box--outline--disabled__color: DarkGray;\n            --rui-FormField--box--outline--disabled__border-color: silver;\n            --rui-FormField--box--outline--disabled__background: gainsboro;\n            --rui-FormField--box--outline--disabled__surrounding-text-color: silver;\n            /*_Invalid state_*/\n            --rui-FormField--invalid--disabled__color: DarkGray;\n            --rui-FormField--invalid--disabled__border-color: silver;\n            --rui-FormField--invalid--disabled__background: gainsboro;\n            --rui-FormField--invalid--disabled__check-background-color: gainsboro;\n            --rui-FormField--invalid--disabled__surrounding-text-color: silver;\n            --rui-FormField--invalid--checked-disabled__check-background-color:\n            gainsboro;\n            /*_Warning state_*/\n            --rui-FormField--warning--disabled__color: DarkGray;\n            --rui-FormField--warning--disabled__border-color: silver;\n            --rui-FormField--warning--disabled__background: gainsboro;\n            --rui-FormField--warning--disabled__check-background-color: gainsboro;\n            --rui-FormField--warning--disabled__surrounding-text-color: silver;\n            --rui-FormField--warning--checked-disabled__check-background-color:\n            gainsboro;\n            /*_Valid state_*/\n            --rui-FormField--valid--disabled__color: DarkGray;\n            --rui-FormField--valid--disabled__border-color: silver;\n            --rui-FormField--valid--disabled__background: gainsboro;\n            --rui-FormField--valid--disabled__check-background-color: gainsboro;\n            --rui-FormField--valid--disabled__surrounding-text-color: silver;\n            --rui-FormField--valid--checked-disabled__check-background-color: gainsboro;\n          }\n        `}\n        </style>\n        <TextField disabled id=\"default-disabled-text-field\" label=\"Default disabled text field\" mdxType=\"TextField\" />\n        <SelectField disabled id=\"default-disabled-select-field\" label=\"Default disabled select field\" options={options} value=\"apple\" mdxType=\"SelectField\" />\n        <TextField disabled id=\"default-disabled-invalid-text-field\" label=\"Default disabled invalid text field\" validationState=\"invalid\" mdxType=\"TextField\" />\n        <Radio disabled id=\"default-disabled-radio\" label=\"Default disabled radio\" options={[{\n            label: 'Apple',\n            value: 'apple'\n          }, {\n            label: 'Banana',\n            value: 'banana'\n          }, {\n            label: 'Grapefruit',\n            value: 'grapefruit'\n          }]} value=\"apple\" mdxType=\"Radio\" />\n        <CheckboxField checked disabled id=\"default-disabled-checkbox\" label=\"Default disabled checkbox\" mdxType=\"CheckboxField\" />\n        <Toggle checked disabled id=\"default-disabled-toggle\" label=\"Default disabled toggle\" mdxType=\"Toggle\" />\n        <CheckboxField disabled id=\"default-disabled-warning-checkbox\" label=\"Default disabled warning checkbox\" validationState=\"warning\" mdxType=\"CheckboxField\" />\n        <Toggle checked disabled id=\"default-disabled-valid-toggle\" label=\"Default disabled valid toggle\" validationState=\"valid\" mdxType=\"Toggle\" />\n        <div className=\"example example--themed-form-field-disabled-state mt-6\">\n          <TextField disabled id=\"themed-disabled-text-field\" label=\"Themed disabled text field\" mdxType=\"TextField\" />\n          <SelectField disabled id=\"themed-disabled-select-field\" label=\"Themed disabled select field\" options={options} value=\"apple\" mdxType=\"SelectField\" />\n          <TextField disabled id=\"themed-disabled-invalid-text-field\" label=\"Themed disabled invalid text field\" validationState=\"invalid\" mdxType=\"TextField\" />\n          <Radio disabled id=\"themed-disabled-radio\" label=\"Themed disabled radio\" options={[{\n              label: 'Apple',\n              value: 'apple'\n            }, {\n              label: 'Banana',\n              value: 'banana'\n            }, {\n              label: 'Grapefruit',\n              value: 'grapefruit'\n            }]} value=\"apple\" mdxType=\"Radio\" />\n          <CheckboxField checked disabled id=\"themed-disabled-checkbox\" label=\"Themed disabled checkbox\" mdxType=\"CheckboxField\" />\n          <Toggle checked disabled id=\"themed-disabled-toggle\" label=\"Themed disabled toggle\" mdxType=\"Toggle\" />\n          <CheckboxField disabled id=\"themed-disabled-warning-checkbox\" label=\"Themed disabled warning checkbox\" validationState=\"warning\" mdxType=\"CheckboxField\" />\n          <Toggle checked disabled id=\"themed-disabled-valid-toggle\" label=\"Themed disabled valid toggle\" validationState=\"valid\" mdxType=\"Toggle\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}