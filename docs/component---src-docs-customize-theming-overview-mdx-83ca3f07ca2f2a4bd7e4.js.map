{"version":3,"sources":["webpack:///../src/docs/customize/theming/overview.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kQAQO,MAAMA,EAAe,Q,yNAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,WACH,WACL,qBAAK,uLAGL,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAO,yCAAwC,sBAAQA,WAAW,KAAM,cAAuB,yHAI/G,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAO,gEAA+D,sBAAQA,WAAW,KAAM,gCAC1F,OAGvB,kBACE,GAAM,mBACH,mBACL,qBAAK,gJACsD,0BAAYA,WAAW,KAAM,QAAqB,0EAE7G,qBAAK,sFAEL,sBACE,kBAAIA,WAAW,MAAO,kBACtB,kBAAIA,WAAW,MAAO,sBACtB,kBAAIA,WAAW,MAAO,mBAExB,qBAAK,gEACP,iBAAGA,WAAW,IACR,KAAQ,2EACL,iBAAqB,8CAE5B,kBACE,GAAM,iBACH,iBACL,qBAAK,yIAEL,qBAAK,kGAEL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBACV,wOAWP,qBAAK,wBAAuB,sBAAQA,WAAW,KAAM,+CAAwD,kCAE/G,iBAAGA,WAAW,IACR,KAAQ,0DACL,uCAA2C,kDAElD,kBACE,GAAM,6BACH,6BACL,qBAAK,uHAEL,qBAAK,0JAEL,qBAAG,0BAAYA,WAAW,KAAM,+GAChC,qBAAK,UACL,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,mBAAgC,2CAA0C,0BAAYA,WAAW,MAAO,UAAuB,MACrL,0BAAYA,WAAW,MAAO,aAA0B,gHACb,0BAAYA,WAAW,MAAO,aAA0B,aAC/F,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,sBAAmC,6DACzF,0BAAYA,WAAW,MAAO,WAAwB,KAAI,0BAAYA,WAAW,MAAO,UAAuB,KAAI,0BAAYA,WAAW,MAAO,OAAoB,2BAA0B,0BAAYA,WAAW,MAAO,WAAwB,KAAI,0BAAYA,WAAW,MAAO,SAAsB,MAC7S,0BAAYA,WAAW,MAAO,SAAsB,KAAI,0BAAYA,WAAW,MAAO,UAAuB,KAAI,0BAAYA,WAAW,MAAO,YAAyB,MACpK,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,aAA0B,kDAC5E,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,cAA2B,oCAAmC,0BAAYA,WAAW,MAAO,SAAsB,KAAI,0BAAYA,WAAW,MAAO,cAA2B,MACrO,0BAAYA,WAAW,MAAO,oBAAiC,KAAI,0BAAYA,WAAW,MAAO,SAAsB,KAAI,0BAAYA,WAAW,MAAO,cAA2B,uFACpI,0BAAYA,WAAW,MAAO,kBAA+B,MAC7G,0BAAYA,WAAW,MAAO,0BAAuC,KAAI,0BAAYA,WAAW,MAAO,mBAAgC,OAErI,qBAAK,sCACL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBACV,mnBAWP,kBACE,GAAM,eACH,iBACL,qBAAK,oDAAmD,0BAAYA,WAAW,KAAM,cAA2B,2DAEhH,sBACE,kBAAIA,WAAW,MAAO,4CACtB,kBAAIA,WAAW,MAAO,gEACtB,kBAAIA,WAAW,MAAO,QAAO,0BAAYA,WAAW,MAAO,cAA2B,gCAExF,qBAAK,sFACF,0BAAYA,WAAW,KAAM,cAA2B,QAAO,0BAAYA,WAAW,KAAM,aAA0B,8GAEzH,qBAAK,uCACP,iBAAGA,WAAW,IACR,KAAQ,uFACL,mBAAuB,iDACY,0BAAYA,WAAW,KAAM,cAA2B,2GAEpG,0BAAYA,WAAW,KAAM,cAA2B,0FACnC,0BAAYA,WAAW,KAAM,2BAAwC,QAC1F,0BAAYA,WAAW,KAAM,0EAAuF,+CAElH,kBACE,GAAM,kBACH,kBACL,qBAAK,2CAA0C,sBAAQA,WAAW,KAAM,uBAAgC,sKAGxG,qBAAK,kEAAiE,sBAAQA,WAAW,KAAM,wEACnC,oKAG5D,qBAAK,kFACP,sBAAQA,WAAW,KAAM,uCAAgD,e,uNAK3EJ,EAAWK,gBAAiB","file":"component---src-docs-customize-theming-overview-mdx-83ca3f07ca2f2a4bd7e4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <p>{`From the very beginning, React UI has been designed with a great emphasis on\ncustomizability. We decided to leverage CSS custom properties for this feature\nfor two main reasons:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`We take advantage of possibilities of `}<strong parentName=\"p\">{`native CSS`}</strong>{`. Preprocessors are still\na thing, but it's not necessary to go as far as for CSS-in-JS to make a UI\ncustomizable.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Thanks to its JavaScript API, CSS custom properties are both `}<strong parentName=\"p\">{`readable and\nwritable by JS`}</strong>{`.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"theming-options\"\n    }}>{`Theming Options`}</h2>\n    <p>{`CSS custom properties are used to define common visual properties like colors,\nfonts, borders, shadows, or spacing. They come prefixed with `}<inlineCode parentName=\"p\">{`rui-`}</inlineCode>{` so they\ndon't get in way of other custom properties in your project.`}</p>\n    <p>{`Theming options come grouped into three sections according to what they\ndescribe:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`design tokens,`}</li>\n      <li parentName=\"ol\">{`layout components,`}</li>\n      <li parentName=\"ol\">{`UI components.`}</li>\n    </ol>\n    <p>{`You can adjust any of these options in your styles. See the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/theme.scss\"\n      }}>{`default theme`}</a>{`\nfor the full list of available settings.`}</p>\n    <h3 {...{\n      \"id\": \"design-tokens\"\n    }}>{`Design Tokens`}</h3>\n    <p>{`Design tokens are special variables that define the smallest pieces of a design\nlanguage, especially colors, typography, or spacing.`}</p>\n    <p>{`Design token names shouldn't be complex nor long so they are simply lowercase\nand hyphenated:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`:root {\n  --rui-spacing-0: 0;\n  --rui-spacing-1: 0.25rem;\n  --rui-spacing-2: 0.5rem;\n  --rui-spacing-3: 0.75rem;\n  --rui-spacing-4: 1rem;\n  --rui-spacing-5: 1.5rem;\n  --rui-spacing-6: 2rem;\n  --rui-spacing-7: 3rem;\n}\n`}</code></pre>\n    <p>{`Ô∏èüëâ Please note that `}<strong parentName=\"p\">{`breakpoint values are exported as read-only`}</strong>{` since CSS\ncustom properties\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/css-variables-1/#using-variables\"\n      }}>{`cannot be used within media queries`}</a>{`\n(because media query is not a CSS property).`}</p>\n    <h3 {...{\n      \"id\": \"layouts-and-ui-components\"\n    }}>{`Layouts and UI Components`}</h3>\n    <p>{`It is also possible to adjust some properties on individual components level,\npreferably by reusing design tokens.`}</p>\n    <p>{`Layouts and UI component names use naming convention that is familiar to many\nweb developers because it looks like BEM (or SUIT CSS, more precisely):`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-<ComponentName>--[<modification(s)>]__[<element>]--[<modification(s)>]__<property>--[<modification>]`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<ComponentName>`}</inlineCode>{` stands for actual component name (e.g. `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`FormField`}</inlineCode>{` etc.) with a reasonable exception to form fields whose settings\nare widely shared and therefore grouped as `}<inlineCode parentName=\"li\">{`FormField`}</inlineCode>{` options.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<modifications(s)>`}</inlineCode>{` can be one or more modifiers, typically a variant (e.g.\n`}<inlineCode parentName=\"li\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`filled`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box`}</inlineCode>{`) or interaction state (`}<inlineCode parentName=\"li\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`hover`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`focus`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`active`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<element>`}</inlineCode>{` stands for a nested element of the component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<property>`}</inlineCode>{` is usually a CSS property (e.g. `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`background-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box-shadow`}</inlineCode>{`), or a brief property description\nwhere a CSS property wouldn't tell enough (e.g. `}<inlineCode parentName=\"li\">{`initial-offset`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`check-background-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`tap-target-size`}</inlineCode>{`).`}</li>\n    </ul>\n    <p>{`Example component theming options:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`:root {\n  --rui-Button--filled--primary--default__color: var(--rui-color-on-primary);\n  --rui-Button--filled--primary--default__border-color: var(--rui-color-primary);\n  --rui-Button--filled--primary--default__background: var(--rui-color-primary);\n  --rui-Button--filled--primary--default__box-shadow: none;\n  --rui-Button--filled--primary--hover__color: var(--rui-color-on-primary);\n  --rui-Button--filled--primary--hover__border-color: var(--rui-color-primary-dark);\n  --rui-Button--filled--primary--hover__background: var(--rui-color-primary-dark);\n  --rui-Button--filled--primary--hover__box-shadow: none;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"css-or-scss\"\n    }}>{`CSS, or SCSS?`}</h3>\n    <p>{`Colors, breakpoints, and SVG definitions used in `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{` are preprocessed\nwith SCSS first. This enables us to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`generate color palette programmatically,`}</li>\n      <li parentName=\"ul\">{`keep actual breakpoint values in a single place in the code,`}</li>\n      <li parentName=\"ul\">{`keep `}<inlineCode parentName=\"li\">{`theme.scss`}</inlineCode>{` uncluttered by inline SVG.`}</li>\n    </ul>\n    <p>{`It's entirely up to you what format you decide to use for storing the theme.\nBoth `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`theme.css`}</inlineCode>{` will work equally well, it only matters if\nthe custom properties make it from the theme file to browser.`}</p>\n    <p>{`üëâ Just remember everything in the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/styles/theme-constants\"\n      }}>{`theme constants`}</a>{`\ndirectory is intended only for usage within `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{`. Otherwise, the theming\nsystem may not work as expected. We recommend calling custom properties from\n`}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{` either directly in your stylesheet, or through an intermediate,\nshareable layer like `}<inlineCode parentName=\"p\">{`MyComponent/_theme.scss`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`styles/shared-by-components/_my-sass-variables-referring-to-theme.scss`}</inlineCode>{`\n(latter of which is the approach we use).`}</p>\n    <h2 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best Practices`}</h2>\n    <p>{`It's a good idea to start with changing `}<strong parentName=\"p\">{`design tokens first`}</strong>{`. Widely reused\nsettings such as colors, typography, borders, or spacing values should be\nadjusted first because they define basic appearance of all components.`}</p>\n    <p>{`Having finished the customization at the global level, you can `}<strong parentName=\"p\">{`then proceed to\ncustomizing the appearance of individual components`}</strong>{` ‚Äî if necessary at all.\nEven then you should also reuse existing design tokens as much as possible to\nensure that your UI is consistent and works as a system.`}</p>\n    <p>{`For the same reason, if you have any custom components in your UI, you should\n`}<strong parentName=\"p\">{`reuse design tokens in your own CSS`}</strong>{` too.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}