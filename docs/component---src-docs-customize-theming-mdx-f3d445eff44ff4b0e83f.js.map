{"version":3,"sources":["webpack:///../src/docs/customize/theming.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","SelectField","TextField","fruit","setFruit","React","options","label","value","type","id","variant","changeHandler","e","target","className","validationState","validationText","isMDXComponent"],"mappings":"sSAWO,MAAMA,EAAe,Q,gNAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,WADR,WAIA,4MAGA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,iBAAqC,sBAAQA,WAAW,KAAnB,uBAArC,wHAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gEAAoF,sBAAQA,WAAW,KAAnB,uCAApF,OAIJ,kBACE,GAAM,mBADR,mBAGA,qKAC2D,0BAAYA,WAAW,KAAvB,QAD3D,0EAGA,gCAAe,0BAAYA,WAAW,KAAvB,cAAf,KACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,0fAgBL,kJAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,6MASL,qFACF,iBAAGA,WAAW,IACR,KAAQ,2EADd,iBADE,8CAKA,6CAA4B,sBAAQA,WAAW,KAAnB,+CAA5B,kCAEF,iBAAGA,WAAW,IACR,KAAQ,0DADd,uCAFE,kDAMA,kBACE,GAAM,SADR,SAGA,kBACE,GAAM,iBADR,iBAGA,gKAEA,kBACE,GAAM,kBADR,kBAGA,uEACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,mBAGA,kBAAIA,WAAW,KACb,MAAS,MADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,iCACH,kBAAIA,WAAW,KACb,MAAS,MADX,qBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,qCACH,kBAAIA,WAAW,KACb,MAAS,MADX,oBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,yCACH,kBAAIA,WAAW,KACb,MAAS,MADX,wBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,0CACH,kBAAIA,WAAW,KACb,MAAS,MADX,qCAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,qCACH,kBAAIA,WAAW,KACb,MAAS,MADX,oBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,mCACH,kBAAIA,WAAW,KACb,MAAS,MADX,2CAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,yCACH,kBAAIA,WAAW,KACb,MAAS,MADX,oDAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,qCACH,kBAAIA,WAAW,KACb,MAAS,MADX,oDAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,sCACH,kBAAIA,WAAW,KACb,MAAS,MADX,+DAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,gDACH,kBAAIA,WAAW,KACb,MAAS,MADX,kDAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,gDACH,kBAAIA,WAAW,KACb,MAAS,MADX,iDAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,4CACH,kBAAIA,WAAW,KACb,MAAS,MADX,iDAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,uDACH,kBAAIA,WAAW,KACb,MAAS,MADX,8DAMN,kBACE,GAAM,qDADR,sDAGA,0EACF,iBAAGA,WAAW,IACR,KAAQ,6BADd,aADE,MAIF,iBAAGA,WAAW,IACR,KAAQ,4BADd,YAJE,UAOF,iBAAGA,WAAW,IACR,KAAQ,+BADd,eAPE,KAUA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,mBAGA,kBAAIA,WAAW,KACb,MAAS,MADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,iCACH,kBAAIA,WAAW,KACb,MAAS,MADX,4CAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,qCACH,kBAAIA,WAAW,KACb,MAAS,MADX,4CAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,kCACH,kBAAIA,WAAW,KACb,MAAS,MADX,yBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,mCACH,kBAAIA,WAAW,KACb,MAAS,MADX,0BAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,uCACH,kBAAIA,WAAW,KACb,MAAS,MADX,6BAMN,kBACE,GAAM,gCADR,gCAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,mBAGA,kBAAIA,WAAW,KACb,MAAS,MADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,wCACH,kBAAIA,WAAW,KACb,MAAS,MADX,+CAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,sCACH,kBAAIA,WAAW,KACb,MAAS,MADX,iCAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,kDACH,kBAAIA,WAAW,KACb,MAAS,MADX,iDAMN,kBACE,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yqDAA0sDC,QAAS,CACpvDL,QACAH,kBACAS,eACAC,gBACAC,cACAX,kBACAH,gBACCO,QAAQ,cACR,KACC,MAAOQ,EAAOC,GAAYC,WAAe,SACnCC,EAAU,CAAC,CACfC,MAAO,QACPC,MAAO,SACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,aACPC,MAAO,eAET,OAAO,4BACT,qBAAOC,KAAK,YAAZ,sRAUA,YAAC,IAAD,CAAWC,GAAG,6BAA6BH,MAAM,6BAA6BZ,QAAQ,cACtF,YAAC,IAAD,CAAWe,GAAG,4BAA4BH,MAAM,4BAA4BI,QAAQ,SAAShB,QAAQ,cACrG,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,+BAA+BH,MAAM,+BAA+BD,QAASA,EAASE,MAAOL,EAAOR,QAAQ,gBAC1K,mBAAKoB,UAAU,uCACb,YAAC,IAAD,CAAWL,GAAG,4BAA4BH,MAAM,4BAA4BZ,QAAQ,cACpF,YAAC,IAAD,CAAWe,GAAG,2BAA2BH,MAAM,2BAA2BI,QAAQ,SAAShB,QAAQ,cACnG,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,8BAA8BH,MAAM,8BAA8BD,QAASA,EAASE,MAAOL,EAAOR,QAAQ,oBAK5K,kBACE,GAAM,qBADR,qBAGA,iIAEA,qBAAG,0BAAYC,WAAW,KAAvB,uEACH,+BACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,cAAkG,0BAAYA,WAAW,MAAvB,WAAlG,KAA4J,0BAAYA,WAAW,MAAvB,SAA5J,QAAuN,0BAAYA,WAAW,MAAvB,YACvN,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBAApB,cAAmG,0BAAYA,WAAW,MAAvB,WAAnG,OAA+J,0BAAYA,WAAW,MAAvB,aAC/J,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,cAA0F,0BAAYA,WAAW,MAAvB,SAA1F,KAAkJ,0BAAYA,WAAW,MAAvB,gBAAlJ,KAAiN,0BAAYA,WAAW,MAAvB,cAAjN,KAA8Q,0BAAYA,WAAW,MAAvB,cAA9Q,SACJ,0BAAYA,WAAW,MAAvB,4BAEE,uHACe,0BAAYA,WAAW,KAAvB,SADf,6DAEF,0BAAYA,WAAW,KAAvB,WAFE,8CAEgG,0BAAYA,WAAW,KAAvB,SAFhG,qGAIA,iCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0pDAA+rDC,QAAS,CACzuDL,QACAH,kBACAS,eACAC,gBACAC,cACAX,kBACAH,gBACCO,QAAQ,cACR,KACC,MAAOQ,EAAOC,GAAYC,WAAe,SACnCC,EAAU,CAAC,CACfC,MAAO,QACPC,MAAO,SACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,aACPC,MAAO,eAET,OAAO,4BACT,qBAAOC,KAAK,YAAZ,wNAQA,YAAC,IAAD,CAAWC,GAAG,2BAA2BH,MAAM,2BAA2BS,gBAAgB,QAAQC,eAAe,sBAAsBtB,QAAQ,cAC/I,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,6BAA6BH,MAAM,6BAA6BD,QAASA,EAASU,gBAAgB,QAAQC,eAAe,sBAAsBT,MAAOL,EAAOR,QAAQ,gBACnO,mBAAKoB,UAAU,wDACb,YAAC,IAAD,CAAWL,GAAG,0BAA0BH,MAAM,0BAA0BS,gBAAgB,QAAQC,eAAe,sBAAsBtB,QAAQ,cAC7I,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,4BAA4BH,MAAM,4BAA4BD,QAASA,EAASU,gBAAgB,QAAQC,eAAe,sBAAsBT,MAAOL,EAAOR,QAAQ,oBAKrO,kBACE,GAAM,wCADR,wCAGA,gFACF,iBAAGC,WAAW,IACR,KAAQ,6BADd,aADE,MAIF,iBAAGA,WAAW,IACR,KAAQ,4BADd,YAJE,UAOF,iBAAGA,WAAW,IACR,KAAQ,+BADd,eAPE,0DAWA,qBAAG,0BAAYA,WAAW,KAAvB,qEACH,+BACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,cAAgG,0BAAYA,WAAW,MAAvB,UAAhG,OAA2J,0BAAYA,WAAW,MAAvB,YAC3J,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBAApB,cAAmG,0BAAYA,WAAW,MAAvB,WAAnG,KAA6J,0BAAYA,WAAW,MAAvB,SAA7J,KAAqN,0BAAYA,WAAW,MAAvB,SAArN,QAAgR,0BAAYA,WAAW,MAAvB,aAChR,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,cAA0F,0BAAYA,WAAW,MAAvB,SAA1F,KAAkJ,0BAAYA,WAAW,MAAvB,gBAAlJ,KAAiN,0BAAYA,WAAW,MAAvB,cAAjN,KAA8Q,0BAAYA,WAAW,MAAvB,cAA9Q,SACJ,0BAAYA,WAAW,MAAvB,0BADI,4CAEJ,0BAAYA,WAAW,MAAvB,WAFI,QAEyD,0BAAYA,WAAW,MAAvB,YAFzD,yBAIF,iCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sjDAA2kDC,QAAS,CACrnDL,QACAH,kBACAS,eACAC,gBACAC,cACAX,kBACAH,gBACCO,QAAQ,cACR,KACC,MAAOQ,EAAOC,GAAYC,WAAe,SACnCC,EAAU,CAAC,CACfC,MAAO,QACPC,MAAO,SACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,aACPC,MAAO,eAET,OAAO,4BACT,qBAAOC,KAAK,YAAZ,2bAaA,YAAC,IAAD,CAAWC,GAAG,6BAA6BH,MAAM,6BAA6BZ,QAAQ,cACtF,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,+BAA+BH,MAAM,+BAA+BD,QAASA,EAASE,MAAOL,EAAOR,QAAQ,gBAC1K,mBAAKoB,UAAU,+CACb,YAAC,IAAD,CAAWL,GAAG,4BAA4BH,MAAM,4BAA4BZ,QAAQ,cACpF,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,8BAA8BH,MAAM,8BAA8BD,QAASA,EAASE,MAAOL,EAAOR,QAAQ,oBAK5K,kBACE,GAAM,oBADR,oBAGA,oEACA,qBAAG,0BAAYC,WAAW,KAAvB,uCACH,+BACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,cAAsF,0BAAYA,WAAW,MAAvB,SAAtF,KAA8I,0BAAYA,WAAW,MAAvB,UAA9I,QAA0M,0BAAYA,WAAW,MAAvB,UAC1M,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,cAA0F,0BAAYA,WAAW,MAAvB,UAA1F,KAAmJ,0BAAYA,WAAW,MAAvB,aAAnJ,KAA+M,0BAAYA,WAAW,MAAvB,aAA/M,QAA8Q,0BAAYA,WAAW,MAAvB,eAEhR,iCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,44CAAi6CC,QAAS,CAC38CL,QACAH,kBACAS,eACAC,gBACAC,cACAX,kBACAH,gBACCO,QAAQ,cACR,KACC,MAAOQ,EAAOC,GAAYC,WAAe,SACnCC,EAAU,CAAC,CACfC,MAAO,QACPC,MAAO,SACN,CACDD,MAAO,SACPC,MAAO,UACN,CACDD,MAAO,aACPC,MAAO,eAET,OAAO,4BACT,qBAAOC,KAAK,YAAZ,sRAUA,YAAC,IAAD,CAAWC,GAAG,4BAA4BH,MAAM,4BAA4BZ,QAAQ,cACpF,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,8BAA8BH,MAAM,8BAA8BD,QAASA,EAASE,MAAOL,EAAOR,QAAQ,gBACxK,mBAAKoB,UAAU,4CACb,YAAC,IAAD,CAAWL,GAAG,2BAA2BH,MAAM,2BAA2BZ,QAAQ,cAClF,YAAC,IAAD,CAAaiB,cAAeC,GAAKT,EAASS,EAAEC,OAAON,OAAQE,GAAG,6BAA6BH,MAAM,6BAA6BD,QAASA,EAASE,MAAOL,EAAOR,QAAQ,oBAK1K,kBACE,GAAM,eADR,eAGA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,mBAGA,kBAAIA,WAAW,KACb,MAAS,MADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,kDACH,kBAAIA,WAAW,KACb,MAAS,MADX,8CAEkD,0BAAYA,WAAW,MAAvB,QAFlD,YAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,qDACH,kBAAIA,WAAW,KACb,MAAS,MADX,8CAEkD,0BAAYA,WAAW,MAAvB,WAFlD,YAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,qDACH,kBAAIA,WAAW,KACb,MAAS,MADX,8CAEkD,0BAAYA,WAAW,MAAvB,WAFlD,cAMN,kBACE,GAAM,kBADR,kBAGA,oEAAmD,sBAAQA,WAAW,KAAnB,yBAAnD,yKAGA,uFAAsE,sBAAQA,WAAW,KAAnB,sEAAtE,sKAIA,uGACF,sBAAQA,WAAW,KAAnB,oDADE,gB,8MAMJJ,EAAW0B,gBAAiB","file":"component---src-docs-customize-theming-mdx-f3d445eff44ff4b0e83f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { SelectField } from '../../lib/components/ui/SelectField/SelectField';\nimport { TextField } from '../../lib/components/ui/TextField/TextField';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n\n    <p>{`From the very beginning, React UI has been designed with a great emphasis on\ncustomizability. We decided to leverage CSS custom properties for this feature\nfor two main reasons:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`We believe in `}<strong parentName=\"p\">{`power of native CSS`}</strong>{`. Preprocessors are still a thing, but\nit's not necessary to go as far as for CSS-in-JS to make a UI customizable.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Thanks to its JavaScript API, CSS custom properties are both `}<strong parentName=\"p\">{`readable and\nwritable from JS code`}</strong>{`.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"theming-options\"\n    }}>{`Theming Options`}</h2>\n    <p>{`CSS custom properties are used to define common visual properties like colors,\nfonts, borders, shadows, or spacing. They come prefixed with `}<inlineCode parentName=\"p\">{`rui-`}</inlineCode>{` so they\ndon't get in way of other custom properties in your project.`}</p>\n    <p>{`Example `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:root {\n  // Brand colors\n  --rui-color-primary: #00778b;\n  --rui-color-primary-light: #{lighten(#00778b, 70%)};\n  --rui-color-primary-dark: #{darken(#00778b, 4%)};\n  --rui-color-primary-darker: #{darken(#00778b, 8%)};\n  --rui-color-on-primary: #fff;\n  --rui-color-secondary: #fa4616;\n  --rui-color-secondary-light: #{lighten(#fa4616, 45%)};\n  --rui-color-secondary-dark: #{darken(#fa4616, 4%)};\n  --rui-color-secondary-darker: #{darken(#fa4616, 8%)};\n  --rui-color-on-secondary: #fff;\n}\n`}</code></pre>\n    <p>{`It is also possible to adjust some properties on individual components level,\npreferably by reusing the global settings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:root {\n  // Alerts: common properties\n  --rui-alert-border-width: var(--rui-border-width);\n  --rui-alert-border-radius: var(--rui-border-radius);\n  --rui-alert-padding: var(--rui-spacing-2);\n}\n`}</code></pre>\n    <p>{`You can adjust any of these options in your styles. See the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/theme.scss\"\n      }}>{`default theme`}</a>{`\nfor the full list of available settings.`}</p>\n    <p>{`️👉 Please note that `}<strong parentName=\"p\">{`breakpoint values are exported as read-only`}</strong>{` since CSS\ncustom properties\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/css-variables-1/#using-variables\"\n      }}>{`cannot be used within media queries`}</a>{`\n(because media query is not a CSS property).`}</p>\n    <h2 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h2>\n    <h3 {...{\n      \"id\": \"basic-theming\"\n    }}>{`Basic Theming`}</h3>\n    <p>{`The following theme options define basic appearance of form fields. The options\ncan be divided into three groups by their specificity:`}</p>\n    <h4 {...{\n      \"id\": \"common-options\"\n    }}>{`Common Options`}</h4>\n    <p>{`Theming options affecting all form components.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-label-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label text color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-label-font-size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label font size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-help-text-font-size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Help text font size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-help-text-font-style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Help text font style, eg. italic`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-help-text-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Help text color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-required-sign`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text appended to required input labels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-required-sign-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Color of text appended to required input labels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-disabled-cursor`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Cursor to show on hovering disabled form fields`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-disabled-opacity`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Opacity of disabled form fields (inc. label and help text)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-horizontal-label-alignment`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text alignment of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-horizontal-label-min-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Minimum width of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-horizontal-label-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default width of labels in horizontal layout`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-horizontal-full-width-label-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default width of labels in full-width horizontal layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"shared-textfield-textarea-and-selectfield-options\"\n    }}>{`Shared TextField, TextArea and SelectField Options`}</h4>\n    <p>{`Options shared by some components. This includes\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/text-field\"\n      }}>{`TextField`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/text-area\"\n      }}>{`TextArea`}</a>{`, and\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/select-field\"\n      }}>{`SelectField`}</a>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-input-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default text input and select box width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-input-min-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Minimum text input and select box width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-border-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Control border width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Control corner radius`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-placeholder-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Placeholder text color`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"selectfield-specific-options\"\n    }}>{`SelectField Specific Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-caret-border-style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SelectField arrow border style (eg. solid)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-caret-background`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SelectField arrow background`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-field-disabled-select-option-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text color of disabled SelectField options`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <Playground __position={0} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n        .example--themed-form-fields {\\n          --rui-form-field-input-width: 300px;\\n          --rui-form-field-border-width: 2px;\\n          --rui-form-field-border-radius: 0.5rem;\\n          --rui-form-field-caret-border-style: solid;\\n        }\\n      `}\\n      </style>\\n      <TextField\\n        id=\\\"default-outline-text-field\\\"\\n        label=\\\"Default outline text field\\\"\\n      />\\n      <TextField\\n        id=\\\"default-filled-text-field\\\"\\n        label=\\\"Default filled text field\\\"\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"default-outline-select-field\\\"\\n        label=\\\"Default outline select field\\\"\\n        options={options}\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-fields\\\">\\n        <TextField\\n          id=\\\"themed-outline-text-field\\\"\\n          label=\\\"Themed outline text field\\\"\\n        />\\n        <TextField\\n          id=\\\"themed-filled-text-field\\\"\\n          label=\\\"Themed filled text field\\\"\\n          variant=\\\"filled\\\"\\n        />\\n        <SelectField\\n          changeHandler={e => setFruit(e.target.value)}\\n          id=\\\"themed-outline-select-field\\\"\\n          label=\\\"Themed outline select field\\\"\\n          options={options}\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n      <style type=\"text/css\">\n        {`\n          .example--themed-form-fields {\n            --rui-form-field-input-width: 300px;\n            --rui-form-field-border-width: 2px;\n            --rui-form-field-border-radius: 0.5rem;\n            --rui-form-field-caret-border-style: solid;\n          }\n        `}\n      </style>\n      <TextField id=\"default-outline-text-field\" label=\"Default outline text field\" mdxType=\"TextField\" />\n      <TextField id=\"default-filled-text-field\" label=\"Default filled text field\" variant=\"filled\" mdxType=\"TextField\" />\n      <SelectField changeHandler={e => setFruit(e.target.value)} id=\"default-outline-select-field\" label=\"Default outline select field\" options={options} value={fruit} mdxType=\"SelectField\" />\n      <div className=\"example example--themed-form-fields\">\n        <TextField id=\"themed-outline-text-field\" label=\"Themed outline text field\" mdxType=\"TextField\" />\n        <TextField id=\"themed-filled-text-field\" label=\"Themed filled text field\" variant=\"filled\" mdxType=\"TextField\" />\n        <SelectField changeHandler={e => setFruit(e.target.value)} id=\"themed-outline-select-field\" label=\"Themed outline select field\" options={options} value={fruit} mdxType=\"SelectField\" />\n      </div>\n    </>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h4>\n    <p>{`Theming options for validation states are shared by all components. Naming\nconvention looks as follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-form-field-<VALIDATION STATE>-<INTERACTION STATE>-<PROPERTY>`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<VALIDATION STATE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`invalid`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`valid`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`warning`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<INTERACTION STATE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<PROPERTY>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`border-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box-shadow`}</inlineCode>{`, or\n`}<inlineCode parentName=\"li\">{`surrounding-text-color`}</inlineCode></li>\n    </ul>\n    <p>{`Not all properties are used by all components, this varies from component to\ncomponent. Also, `}<inlineCode parentName=\"p\">{`hover`}</inlineCode>{` interaction state is unavailable for validation states,\n`}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` state appearance is retained on hovering. `}<inlineCode parentName=\"p\">{`focus`}</inlineCode>{` state is inherited\nfrom default form field appearance (i.e. as if no validation state was set).`}</p>\n    <p>{`Example:`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n      .example--themed-form-field-validation-states {\\n        --rui-form-field-valid-default-color: white;\\n        --rui-form-field-valid-default-background: var(--rui-color-success);\\n      }\\n    `}\\n      </style>\\n      <TextField\\n        id=\\\"default-valid-text-field\\\"\\n        label=\\\"Default valid text field\\\"\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n      />\\n      <SelectField\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"default-valid-select-field\\\"\\n        label=\\\"Default valid select field\\\"\\n        options={options}\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"This field is valid\\\"\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-field-validation-states\\\">\\n        <TextField\\n          id=\\\"themed-valid-text-field\\\"\\n          label=\\\"Themed valid text field\\\"\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n        />\\n        <SelectField\\n          changeHandler={e => setFruit(e.target.value)}\\n          id=\\\"themed-valid-select-field\\\"\\n          label=\\\"Themed valid select field\\\"\\n          options={options}\\n          validationState=\\\"valid\\\"\\n          validationText=\\\"This field is valid\\\"\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n      <style type=\"text/css\">\n        {`\n        .example--themed-form-field-validation-states {\n          --rui-form-field-valid-default-color: white;\n          --rui-form-field-valid-default-background: var(--rui-color-success);\n        }\n      `}\n      </style>\n      <TextField id=\"default-valid-text-field\" label=\"Default valid text field\" validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"TextField\" />\n      <SelectField changeHandler={e => setFruit(e.target.value)} id=\"default-valid-select-field\" label=\"Default valid select field\" options={options} validationState=\"valid\" validationText=\"This field is valid\" value={fruit} mdxType=\"SelectField\" />\n      <div className=\"example example--themed-form-field-validation-states\">\n        <TextField id=\"themed-valid-text-field\" label=\"Themed valid text field\" validationState=\"valid\" validationText=\"This field is valid\" mdxType=\"TextField\" />\n        <SelectField changeHandler={e => setFruit(e.target.value)} id=\"themed-valid-select-field\" label=\"Themed valid select field\" options={options} validationState=\"valid\" validationText=\"This field is valid\" value={fruit} mdxType=\"SelectField\" />\n      </div>\n    </>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"text-control-and-select-box-variants\"\n    }}>{`Text Control and Select Box Variants`}</h4>\n    <p>{`Theming options for textual controls and select boxes:\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/text-field\"\n      }}>{`TextField`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/text-area\"\n      }}>{`TextArea`}</a>{`, and\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/select-field\"\n      }}>{`SelectField`}</a>{`.\nNaming is very similar to validation state options:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-form-field-<VISUAL VARIANT>-<INTERACTION STATE>-<PROPERTY>`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<VISUAL VARIANT>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`filled`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`outline`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<INTERACTION STATE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`hover`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`focus`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<PROPERTY>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`border-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box-shadow`}</inlineCode>{`, or\n`}<inlineCode parentName=\"li\">{`surrounding-text-color`}</inlineCode>{` (the last one being available only for\n`}<inlineCode parentName=\"li\">{`default`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{` interaction states)`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n      .example--themed-form-field-variants {\\n        --rui-form-field-border-width: 0px;\\n        --rui-form-field-outline-default-box-shadow:\\n          0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\\n        --rui-form-field-outline-hover-box-shadow:\\n          0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\\n        --rui-form-field-outline-focus-box-shadow:\\n          inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\\n      }\\n    `}\\n      </style>\\n      <TextField\\n        id=\\\"default-outline-text-field\\\"\\n        label=\\\"Default outline text field\\\"\\n      />\\n      <SelectField\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"default-outline-select-field\\\"\\n        label=\\\"Default outline select field\\\"\\n        options={options}\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-field-variants\\\">\\n        <TextField\\n          id=\\\"themed-outline-text-field\\\"\\n          label=\\\"Themed outline text field\\\"\\n        />\\n        <SelectField\\n          changeHandler={e => setFruit(e.target.value)}\\n          id=\\\"themed-outline-select-field\\\"\\n          label=\\\"Themed outline select field\\\"\\n          options={options}\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n      <style type=\"text/css\">\n        {`\n        .example--themed-form-field-variants {\n          --rui-form-field-border-width: 0px;\n          --rui-form-field-outline-default-box-shadow:\n            0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n          --rui-form-field-outline-hover-box-shadow:\n            0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n          --rui-form-field-outline-focus-box-shadow:\n            inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n        }\n      `}\n      </style>\n      <TextField id=\"default-outline-text-field\" label=\"Default outline text field\" mdxType=\"TextField\" />\n      <SelectField changeHandler={e => setFruit(e.target.value)} id=\"default-outline-select-field\" label=\"Default outline select field\" options={options} value={fruit} mdxType=\"SelectField\" />\n      <div className=\"example example--themed-form-field-variants\">\n        <TextField id=\"themed-outline-text-field\" label=\"Themed outline text field\" mdxType=\"TextField\" />\n        <SelectField changeHandler={e => setFruit(e.target.value)} id=\"themed-outline-select-field\" label=\"Themed outline select field\" options={options} value={fruit} mdxType=\"SelectField\" />\n      </div>\n    </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"form-field-sizes\"\n    }}>{`Form Field Sizes`}</h3>\n    <p>{`Available sizes can be adjusted as follows:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-form-field-<SIZE>-<PROPERTY>`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<SIZE>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`small`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`medium`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`large`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<PROPERTY>`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`height`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding-x`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding-y`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`font-size`}</inlineCode></li>\n    </ul>\n    <p>{`Example:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <style type=\\\"text/css\\\">\\n        {`\\n      .example--themed-form-field-sizes {\\n        --rui-form-field-border-radius: 0.5rem;\\n        --rui-form-field-medium-height: 3rem;\\n        --rui-form-field-medium-padding-x: 1.25rem;\\n        --rui-form-field-caret-border-style: solid;\\n      }\\n    `}\\n      </style>\\n      <TextField\\n        id=\\\"default-medium-text-field\\\"\\n        label=\\\"Default medium text field\\\"\\n      />\\n      <SelectField\\n        changeHandler={e => setFruit(e.target.value)}\\n        id=\\\"default-medium-select-field\\\"\\n        label=\\\"Default medium select field\\\"\\n        options={options}\\n        value={fruit}\\n      />\\n      <div className=\\\"example example--themed-form-field-sizes\\\">\\n        <TextField\\n          id=\\\"themed-medium-text-field\\\"\\n          label=\\\"Themed medium text field\\\"\\n        />\\n        <SelectField\\n          changeHandler={e => setFruit(e.target.value)}\\n          id=\\\"themed-medium-select-field\\\"\\n          label=\\\"Themed medium select field\\\"\\n          options={options}\\n          value={fruit}\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n      <style type=\"text/css\">\n        {`\n        .example--themed-form-field-sizes {\n          --rui-form-field-border-radius: 0.5rem;\n          --rui-form-field-medium-height: 3rem;\n          --rui-form-field-medium-padding-x: 1.25rem;\n          --rui-form-field-caret-border-style: solid;\n        }\n      `}\n      </style>\n      <TextField id=\"default-medium-text-field\" label=\"Default medium text field\" mdxType=\"TextField\" />\n      <SelectField changeHandler={e => setFruit(e.target.value)} id=\"default-medium-select-field\" label=\"Default medium select field\" options={options} value={fruit} mdxType=\"SelectField\" />\n      <div className=\"example example--themed-form-field-sizes\">\n        <TextField id=\"themed-medium-text-field\" label=\"Themed medium text field\" mdxType=\"TextField\" />\n        <SelectField changeHandler={e => setFruit(e.target.value)} id=\"themed-medium-select-field\" label=\"Themed medium select field\" options={options} value={fruit} mdxType=\"SelectField\" />\n      </div>\n    </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"form-layout\"\n    }}>{`Form Layout`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-horizontal-label-auto-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of labels in horizontal form layout, `}<inlineCode parentName=\"td\">{`auto`}</inlineCode>{` sizing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-horizontal-label-limited-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of labels in horizontal form layout, `}<inlineCode parentName=\"td\">{`limited`}</inlineCode>{` sizing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-form-layout-horizontal-label-default-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of labels in horizontal form layout, `}<inlineCode parentName=\"td\">{`default`}</inlineCode>{` sizing`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best Practices`}</h2>\n    <p>{`It's a good idea to start with changing the `}<strong parentName=\"p\">{`global settings first`}</strong>{`. Widely\nreused settings such as colors, typography, borders or spacing values should be\nadjusted first because they define the basic appearance of all components.`}</p>\n    <p>{`Having finished the customization at the global level, you can `}<strong parentName=\"p\">{`then proceed to\ncustomize the appearance of individual components`}</strong>{` — if necessary at all. Even\nthen you should also reuse existing global settings as much as possible to\nensure that your UI is consistent and works as a system.`}</p>\n    <p>{`For the same reason, if you have any custom components in your UI, you should\n`}<strong parentName=\"p\">{`reuse the global theming options in your own CSS`}</strong>{`, too.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}