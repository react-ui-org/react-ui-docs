(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"d8+s":function(e,l,a){"use strict";a.r(l),a.d(l,"_frontmatter",(function(){return h})),a.d(l,"default",(function(){return v}));var t=a("Fcif"),n=a("dV/x"),i=a("mXGw"),d=a("/FXl"),o=a("TjRS"),r=a("ZFoC"),b=a("YBnK"),c=a("SdXv"),u=a("j3Hi"),s=a("ET+1"),m=a("fRCu");a("aD51");const p=["components"],h={};void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/customize/theming/forms.mdx"}});const f={_frontmatter:h},g=o.a;function v(e){let{components:l}=e,a=Object(n.a)(e,p);return Object(d.b)(g,Object(t.a)({},f,a,{components:l,mdxType:"MDXLayout"}),Object(d.b)("h1",{id:"forms-theming"},"Forms Theming"),Object(d.b)("p",null,"To make forms theming easy and robust, form components have many theming\noptions in common."),Object(d.b)("p",null,"General naming convention for CSS custom properties looks as follows:"),Object(d.b)("p",null,Object(d.b)("inlineCode",{parentName:"p"},"--rui-FormField--[<TYPE>]--[<MODIFICATION>]__[<ELEMENT>--[<ELEMENT\nTYPE]]--[<INTERACTION STATE>]__<PROPERTY>")),Object(d.b)("p",null,"Items in brackets are optional. As you read on you will notice some theming\noption groups may have less complicated conventions (that are still subset of\nthe naming system above)."),Object(d.b)("h2",{id:"basic-theming"},"Basic Theming"),Object(d.b)("p",null,"The following theme options define basic appearance of all form fields."),Object(d.b)("table",null,Object(d.b)("thead",{parentName:"table"},Object(d.b)("tr",{parentName:"thead"},Object(d.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(d.b)("th",{parentName:"tr",align:null},"Description"))),Object(d.b)("tbody",{parentName:"table"},Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField__label__color")),Object(d.b)("td",{parentName:"tr",align:null},"Label text color")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField__label__font-size")),Object(d.b)("td",{parentName:"tr",align:null},"Label font size")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField__help-text__font-size")),Object(d.b)("td",{parentName:"tr",align:null},"Help text font size")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField__help-text__font-style")),Object(d.b)("td",{parentName:"tr",align:null},"Help text font style, e.g. italic")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField__help-text__color")),Object(d.b)("td",{parentName:"tr",align:null},"Help text color")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--required__sign")),Object(d.b)("td",{parentName:"tr",align:null},"Text appended to required input labels")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--required__sign__color")),Object(d.b)("td",{parentName:"tr",align:null},"Color of text appended to required input labels")))),Object(d.b)("h2",{id:"horizontal-layout"},"Horizontal Layout"),Object(d.b)("p",null,"Options for fields that support horizontal layout."),Object(d.b)("table",null,Object(d.b)("thead",{parentName:"table"},Object(d.b)("tr",{parentName:"thead"},Object(d.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(d.b)("th",{parentName:"tr",align:null},"Description"))),Object(d.b)("tbody",{parentName:"table"},Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal__label__text-align")),Object(d.b)("td",{parentName:"tr",align:null},"Text alignment of labels in horizontal layout")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal__label__min-width")),Object(d.b)("td",{parentName:"tr",align:null},"Minimum width of labels in horizontal layout")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal__label__width")),Object(d.b)("td",{parentName:"tr",align:null},"Default width of labels in horizontal layout")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal__label__padding-y")),Object(d.b)("td",{parentName:"tr",align:null},"Top and bottom padding to tweak vertical alignment of labels")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal__label__vertical-alignment")),Object(d.b)("td",{parentName:"tr",align:null},"Vertical box alignment of labels in horizontal layout")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal__field__vertical-alignment")),Object(d.b)("td",{parentName:"tr",align:null},"Vertical box alignment of fields in horizontal layout")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--horizontal--full-width__label__width")),Object(d.b)("td",{parentName:"tr",align:null},"Default width of labels in full-width horizontal layout")))),Object(d.b)("h2",{id:"box-fields"},"Box Fields"),Object(d.b)("p",null,"Options shared by box form controls. This includes\n",Object(d.b)("a",{parentName:"p",href:"/components/text-field"},"TextField"),",\n",Object(d.b)("a",{parentName:"p",href:"/components/text-area"},"TextArea"),", and\n",Object(d.b)("a",{parentName:"p",href:"/components/select-field"},"SelectField"),"."),Object(d.b)("table",null,Object(d.b)("thead",{parentName:"table"},Object(d.b)("tr",{parentName:"thead"},Object(d.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(d.b)("th",{parentName:"tr",align:null},"Description"))),Object(d.b)("tbody",{parentName:"table"},Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--box__border-width")),Object(d.b)("td",{parentName:"tr",align:null},"Control border width")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--box__border-radius")),Object(d.b)("td",{parentName:"tr",align:null},"Control corner radius")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--box__input__width")),Object(d.b)("td",{parentName:"tr",align:null},"Default text input and select box width")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--box__input__min-width")),Object(d.b)("td",{parentName:"tr",align:null},"Minimum text input and select box width")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--box__placeholder__color")),Object(d.b)("td",{parentName:"tr",align:null},"Placeholder text color")))),Object(d.b)("p",null,"Example:"),Object(d.b)(r.c,{__position:0,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n        .example--themed-form-fields {\n          --rui-FormField--box__border-width: 2px;\n          --rui-FormField--box__border-radius: 0.5rem;\n          --rui-FormField--box__input__width: 300px;\n        }\n      `}\n      </style>\n      <TextField\n        id="default-outline-text-field"\n        label="Default outline text field"\n      />\n      <TextField\n        id="default-filled-text-field"\n        label="Default filled text field"\n        variant="filled"\n      />\n      <SelectField\n        id="default-outline-select-field"\n        label="Default outline select field"\n        onChange={e => setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      />\n      <div className="example example--themed-form-fields mt-6">\n        <TextField\n          id="themed-outline-text-field"\n          label="Themed outline text field"\n        />\n        <TextField\n          id="themed-filled-text-field"\n          label="Themed filled text field"\n          variant="filled"\n        />\n        <SelectField\n          id="themed-outline-select-field"\n          label="Themed outline select field"\n          onChange={e => setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,CheckboxField:b.a,Radio:c.a,SelectField:u.a,TextField:s.a,Toggle:m.a,DefaultLayout:o.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,l]=i.useState("apple"),a=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(d.b)(i.Fragment,null,Object(d.b)("style",{type:"text/css"},"\n          .example--themed-form-fields {\n            --rui-FormField--box__border-width: 2px;\n            --rui-FormField--box__border-radius: 0.5rem;\n            --rui-FormField--box__input__width: 300px;\n          }\n        "),Object(d.b)(s.a,{id:"default-outline-text-field",label:"Default outline text field",mdxType:"TextField"}),Object(d.b)(s.a,{id:"default-filled-text-field",label:"Default filled text field",variant:"filled",mdxType:"TextField"}),Object(d.b)(u.a,{id:"default-outline-select-field",label:"Default outline select field",onChange:e=>l(e.target.value),options:a,value:e,mdxType:"SelectField"}),Object(d.b)("div",{className:"example example--themed-form-fields mt-6"},Object(d.b)(s.a,{id:"themed-outline-text-field",label:"Themed outline text field",mdxType:"TextField"}),Object(d.b)(s.a,{id:"themed-filled-text-field",label:"Themed filled text field",variant:"filled",mdxType:"TextField"}),Object(d.b)(u.a,{id:"themed-outline-select-field",label:"Themed outline select field",onChange:e=>l(e.target.value),options:a,value:e,mdxType:"SelectField"})))}),Object(d.b)("h3",{id:"box-field-variants"},"Box Field Variants"),Object(d.b)("p",null,"Theming options for box form controls. Naming convention looks as follows:"),Object(d.b)("p",null,Object(d.b)("inlineCode",{parentName:"p"},"--rui-FormField--box--<VISUAL VARIANT>--<INTERACTION STATE>__<PROPERTY>")),Object(d.b)("p",null,"Where:"),Object(d.b)("ul",null,Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<VISUAL VARIANT>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"filled")," or ",Object(d.b)("inlineCode",{parentName:"li"},"outline"),","),Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<INTERACTION STATE>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"default"),", ",Object(d.b)("inlineCode",{parentName:"li"},"hover"),", ",Object(d.b)("inlineCode",{parentName:"li"},"focus"),", or ",Object(d.b)("inlineCode",{parentName:"li"},"disabled"),","),Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<PROPERTY>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"color"),", ",Object(d.b)("inlineCode",{parentName:"li"},"border-color"),", ",Object(d.b)("inlineCode",{parentName:"li"},"background"),", ",Object(d.b)("inlineCode",{parentName:"li"},"box-shadow"),", or\n",Object(d.b)("inlineCode",{parentName:"li"},"surrounding-text-color")," (the last one being available only for ",Object(d.b)("inlineCode",{parentName:"li"},"default")," and\n",Object(d.b)("inlineCode",{parentName:"li"},"disabled")," interaction states).")),Object(d.b)("p",null,"Example:"),Object(d.b)(r.c,{__position:1,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n      .example--themed-form-field-variants {\n        --rui-FormField--box__border-width: 0px;\n        --rui-FormField--box--outline--default__box-shadow:\n          0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n        --rui-FormField--box--outline--hover__box-shadow:\n          0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n        --rui-FormField--box--outline--focus__box-shadow:\n          inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n      }\n    `}\n      </style>\n      <TextField\n        id="default-outline-text-field"\n        label="Default outline text field"\n      />\n      <SelectField\n        id="default-outline-select-field"\n        label="Default outline select field"\n        onChange={e => setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      />\n      <div className="example example--themed-form-field-variants mt-6">\n        <TextField\n          id="themed-outline-text-field"\n          label="Themed outline text field"\n        />\n        <SelectField\n          id="themed-outline-select-field"\n          label="Themed outline select field"\n          onChange={e => setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,CheckboxField:b.a,Radio:c.a,SelectField:u.a,TextField:s.a,Toggle:m.a,DefaultLayout:o.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,l]=i.useState("apple"),a=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(d.b)(i.Fragment,null,Object(d.b)("style",{type:"text/css"},"\n        .example--themed-form-field-variants {\n          --rui-FormField--box__border-width: 0px;\n          --rui-FormField--box--outline--default__box-shadow:\n            0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n          --rui-FormField--box--outline--hover__box-shadow:\n            0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n          --rui-FormField--box--outline--focus__box-shadow:\n            inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n        }\n      "),Object(d.b)(s.a,{id:"default-outline-text-field",label:"Default outline text field",mdxType:"TextField"}),Object(d.b)(u.a,{id:"default-outline-select-field",label:"Default outline select field",onChange:e=>l(e.target.value),options:a,value:e,mdxType:"SelectField"}),Object(d.b)("div",{className:"example example--themed-form-field-variants mt-6"},Object(d.b)(s.a,{id:"themed-outline-text-field",label:"Themed outline text field",mdxType:"TextField"}),Object(d.b)(u.a,{id:"themed-outline-select-field",label:"Themed outline select field",onChange:e=>l(e.target.value),options:a,value:e,mdxType:"SelectField"})))}),Object(d.b)("h3",{id:"box-field-sizes"},"Box Field Sizes"),Object(d.b)("p",null,"Available sizes can be adjusted as follows:"),Object(d.b)("p",null,Object(d.b)("inlineCode",{parentName:"p"},"--rui-FormField--box--<SIZE>__<PROPERTY>")),Object(d.b)("p",null,"Where:"),Object(d.b)("ul",null,Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<SIZE>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"small"),", ",Object(d.b)("inlineCode",{parentName:"li"},"medium"),", or ",Object(d.b)("inlineCode",{parentName:"li"},"large")),Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<PROPERTY>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"height"),", ",Object(d.b)("inlineCode",{parentName:"li"},"padding-x"),", ",Object(d.b)("inlineCode",{parentName:"li"},"padding-y"),", or ",Object(d.b)("inlineCode",{parentName:"li"},"font-size"))),Object(d.b)("p",null,"Example:"),Object(d.b)(r.c,{__position:2,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n      .example--themed-form-field-sizes {\n        --rui-FormField--box--medium__height: 3rem;\n        --rui-FormField--box--medium__padding-x: 1.25rem;\n      }\n    `}\n      </style>\n      <TextField\n        id="default-medium-text-field"\n        label="Default medium text field"\n      />\n      <SelectField\n        id="default-medium-select-field"\n        label="Default medium select field"\n        onChange={e => setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      />\n      <div className="example example--themed-form-field-sizes mt-6">\n        <TextField\n          id="themed-medium-text-field"\n          label="Themed medium text field"\n        />\n        <SelectField\n          id="themed-medium-select-field"\n          label="Themed medium select field"\n          onChange={e => setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,CheckboxField:b.a,Radio:c.a,SelectField:u.a,TextField:s.a,Toggle:m.a,DefaultLayout:o.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,l]=i.useState("apple"),a=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(d.b)(i.Fragment,null,Object(d.b)("style",{type:"text/css"},"\n        .example--themed-form-field-sizes {\n          --rui-FormField--box--medium__height: 3rem;\n          --rui-FormField--box--medium__padding-x: 1.25rem;\n        }\n      "),Object(d.b)(s.a,{id:"default-medium-text-field",label:"Default medium text field",mdxType:"TextField"}),Object(d.b)(u.a,{id:"default-medium-select-field",label:"Default medium select field",onChange:e=>l(e.target.value),options:a,value:e,mdxType:"SelectField"}),Object(d.b)("div",{className:"example example--themed-form-field-sizes mt-6"},Object(d.b)(s.a,{id:"themed-medium-text-field",label:"Themed medium text field",mdxType:"TextField"}),Object(d.b)(u.a,{id:"themed-medium-select-field",label:"Themed medium select field",onChange:e=>l(e.target.value),options:a,value:e,mdxType:"SelectField"})))}),Object(d.b)("h2",{id:"check-fields"},"Check Fields"),Object(d.b)("p",null,"Options shared by checkable form controls. This includes\n",Object(d.b)("a",{parentName:"p",href:"/components/checkbox-field"},"CheckboxField"),", ",Object(d.b)("a",{parentName:"p",href:"/components/radio"},"Radio"),",\nand ",Object(d.b)("a",{parentName:"p",href:"/components/toggle"},"Toggle"),"."),Object(d.b)("table",null,Object(d.b)("thead",{parentName:"table"},Object(d.b)("tr",{parentName:"thead"},Object(d.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(d.b)("th",{parentName:"tr",align:null},"Description"))),Object(d.b)("tbody",{parentName:"table"},Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check__input__size")),Object(d.b)("td",{parentName:"tr",align:null},"Size of check inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check__input__border-width")),Object(d.b)("td",{parentName:"tr",align:null},"Border width of check inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check__input--focus__box-shadow")),Object(d.b)("td",{parentName:"tr",align:null},"Box shadow to highlight focused inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check__tap-target-size")),Object(d.b)("td",{parentName:"tr",align:null},"Minimum tap target size")))),Object(d.b)("p",null,"Interaction states:"),Object(d.b)("table",null,Object(d.b)("thead",{parentName:"table"},Object(d.b)("tr",{parentName:"thead"},Object(d.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(d.b)("th",{parentName:"tr",align:null},"Description"))),Object(d.b)("tbody",{parentName:"table"},Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--default__border-color")),Object(d.b)("td",{parentName:"tr",align:null},"Border color of unchecked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--default__check-background-color")),Object(d.b)("td",{parentName:"tr",align:null},"Background color of unchecked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--checked__border-color")),Object(d.b)("td",{parentName:"tr",align:null},"Border color of checked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--checked__check-background-color")),Object(d.b)("td",{parentName:"tr",align:null},"Background color of checked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--disabled__border-color")),Object(d.b)("td",{parentName:"tr",align:null},"Border color of disabled unchecked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--disabled__check-background-color")),Object(d.b)("td",{parentName:"tr",align:null},"Background color of disabled unchecked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--checked-disabled__border-color")),Object(d.b)("td",{parentName:"tr",align:null},"Border color of disabled checked inputs")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--check--checked-disabled__check-background-color")),Object(d.b)("td",{parentName:"tr",align:null},"Background color of disabled checked inputs")))),Object(d.b)("p",null,"Example:"),Object(d.b)(r.c,{__position:3,__code:'() => {\n  const [agree, setAgree] = React.useState(true)\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const [studioQuality, setStudioQuality] = React.useState(true)\n  return (\n    <>\n      <style type="text/css">\n        {`\n          .example--themed-check-fields {\n            --rui-FormField--check__input__border-width: 2px;\n            --rui-FormField--check--checked__border-color: LightSeaGreen;\n            --rui-FormField--check--checked__check-background-color: MediumAquamarine;\n          }\n        `}\n      </style>\n      <Radio\n        id="default-radio"\n        label="Default radio"\n        onChange={e => setFruit(e.target.value)}\n        options={[\n          {\n            label: \'Apple\',\n            value: \'apple\',\n          },\n          {\n            label: \'Banana\',\n            value: \'banana\',\n          },\n          {\n            label: \'Grapefruit\',\n            value: \'grapefruit\',\n          },\n        ]}\n        value={fruit}\n      />\n      <CheckboxField\n        checked={agree}\n        id="default-checkbox"\n        label="Default checkbox"\n        onChange={() => setAgree(!agree)}\n      />\n      <Toggle\n        checked={studioQuality}\n        id="default-toggle"\n        label="Default toggle"\n        onChange={() => setStudioQuality(!studioQuality)}\n      />\n      <div className="example example--themed-check-fields mt-6">\n        <Radio\n          id="themed-radio"\n          label="Themed radio"\n          onChange={e => setFruit(e.target.value)}\n          options={[\n            {\n              label: \'Apple\',\n              value: \'apple\',\n            },\n            {\n              label: \'Banana\',\n              value: \'banana\',\n            },\n            {\n              label: \'Grapefruit\',\n              value: \'grapefruit\',\n            },\n          ]}\n          value={fruit}\n        />\n        <CheckboxField\n          checked={agree}\n          id="themed-checkbox"\n          label="Themed checkbox"\n          onChange={() => setAgree(!agree)}\n        />\n        <Toggle\n          checked={studioQuality}\n          id="themed-toggle"\n          label="Themed toggle"\n          onChange={() => setStudioQuality(!studioQuality)}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,CheckboxField:b.a,Radio:c.a,SelectField:u.a,TextField:s.a,Toggle:m.a,DefaultLayout:o.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,l]=i.useState(!0),[a,t]=i.useState("apple"),[n,o]=i.useState(!0);return Object(d.b)(i.Fragment,null,Object(d.b)("style",{type:"text/css"},"\n            .example--themed-check-fields {\n              --rui-FormField--check__input__border-width: 2px;\n              --rui-FormField--check--checked__border-color: LightSeaGreen;\n              --rui-FormField--check--checked__check-background-color: MediumAquamarine;\n            }\n          "),Object(d.b)(c.a,{id:"default-radio",label:"Default radio",onChange:e=>t(e.target.value),options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],value:a,mdxType:"Radio"}),Object(d.b)(b.a,{checked:e,id:"default-checkbox",label:"Default checkbox",onChange:()=>l(!e),mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:n,id:"default-toggle",label:"Default toggle",onChange:()=>o(!n),mdxType:"Toggle"}),Object(d.b)("div",{className:"example example--themed-check-fields mt-6"},Object(d.b)(c.a,{id:"themed-radio",label:"Themed radio",onChange:e=>t(e.target.value),options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],value:a,mdxType:"Radio"}),Object(d.b)(b.a,{checked:e,id:"themed-checkbox",label:"Themed checkbox",onChange:()=>l(!e),mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:n,id:"themed-toggle",label:"Themed toggle",onChange:()=>o(!n),mdxType:"Toggle"})))}),Object(d.b)("h2",{id:"validation-states"},"Validation States"),Object(d.b)("p",null,"Theming options for validation states are shared by all form components. Naming\nconvention looks as follows:"),Object(d.b)("p",null,Object(d.b)("inlineCode",{parentName:"p"},"--rui-FormField--<VALIDATION STATE>--<INTERACTION STATE>__<PROPERTY>")),Object(d.b)("p",null,"Where:"),Object(d.b)("ul",null,Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<VALIDATION STATE>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"invalid"),", ",Object(d.b)("inlineCode",{parentName:"li"},"valid"),", or ",Object(d.b)("inlineCode",{parentName:"li"},"warning")),Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<INTERACTION STATE>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"default"),", ",Object(d.b)("inlineCode",{parentName:"li"},"checked"),", ",Object(d.b)("inlineCode",{parentName:"li"},"disabled"),", or\n",Object(d.b)("inlineCode",{parentName:"li"},"checked-disabled")),Object(d.b)("li",{parentName:"ul"},Object(d.b)("inlineCode",{parentName:"li"},"<PROPERTY>")," is one of ",Object(d.b)("inlineCode",{parentName:"li"},"color"),", ",Object(d.b)("inlineCode",{parentName:"li"},"border-color"),", ",Object(d.b)("inlineCode",{parentName:"li"},"background"),",\n",Object(d.b)("inlineCode",{parentName:"li"},"check-background-color"),", ",Object(d.b)("inlineCode",{parentName:"li"},"box-shadow"),", or ",Object(d.b)("inlineCode",{parentName:"li"},"surrounding-text-color"))),Object(d.b)("p",null,"Not all properties are used by all components, this varies from component to\ncomponent. Also, ",Object(d.b)("inlineCode",{parentName:"p"},"hover")," interaction state is unavailable for validation states\neverywhere — ",Object(d.b)("inlineCode",{parentName:"p"},"default")," state appearance is retained on hovering. For box fields,\n",Object(d.b)("inlineCode",{parentName:"p"},"focus")," state for validation states is inherited from default form field\nappearance (i.e. as if no validation state was set)."),Object(d.b)("p",null,"Example:"),Object(d.b)(r.c,{__position:4,__code:'() => {\n  const [agree, setAgree] = React.useState(true)\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const [studioQuality, setStudioQuality] = React.useState(true)\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n      .example--themed-form-field-validation-states {\n        --rui-FormField--valid--default__color: white;\n        --rui-FormField--valid--default__border-color: LightSeaGreen;\n        --rui-FormField--valid--default__background: MediumAquamarine;\n        --rui-FormField--valid--default__check-background-color: MediumAquamarine;\n        --rui-FormField--valid--default__surrounding-text-color: DarkSlateGray;\n        --rui-FormField--valid--checked__check-background-color: MediumAquamarine;\n      }\n    `}\n      </style>\n      <TextField\n        id="default-valid-text-field"\n        label="Default valid text field"\n        validationState="valid"\n        validationText="This field is valid"\n      />\n      <SelectField\n        id="default-valid-select-field"\n        label="Default valid select field"\n        onChange={e => setFruit(e.target.value)}\n        options={options}\n        validationState="valid"\n        validationText="This field is valid"\n        value={fruit}\n      />\n      <Radio\n        id="default-valid-radio"\n        label="Default valid radio"\n        onChange={e => setFruit(e.target.value)}\n        options={[\n          {\n            label: \'Apple\',\n            value: \'apple\',\n          },\n          {\n            label: \'Banana\',\n            value: \'banana\',\n          },\n          {\n            label: \'Grapefruit\',\n            value: \'grapefruit\',\n          },\n        ]}\n        validationState="valid"\n        validationText="This field is valid"\n        value={fruit}\n      />\n      <CheckboxField\n        checked={agree}\n        id="default-valid-checkbox"\n        label="Default valid checkbox"\n        onChange={() => setAgree(!agree)}\n        validationState="valid"\n        validationText="This field is valid"\n      />\n      <Toggle\n        checked={studioQuality}\n        id="default-valid-toggle"\n        label="Default valid toggle"\n        onChange={() => setStudioQuality(!studioQuality)}\n        validationState="valid"\n        validationText="This field is valid"\n      />\n      <div className="example example--themed-form-field-validation-states mt-6">\n        <TextField\n          id="themed-valid-text-field"\n          label="Themed valid text field"\n          validationState="valid"\n          validationText="This field is valid"\n        />\n        <SelectField\n          id="themed-valid-select-field"\n          label="Themed valid select field"\n          onChange={e => setFruit(e.target.value)}\n          options={options}\n          validationState="valid"\n          validationText="This field is valid"\n          value={fruit}\n        />\n        <Radio\n          id="themed-valid-radio"\n          label="Themed valid radio"\n          onChange={e => setFruit(e.target.value)}\n          options={[\n            {\n              label: \'Apple\',\n              value: \'apple\',\n            },\n            {\n              label: \'Banana\',\n              value: \'banana\',\n            },\n            {\n              label: \'Grapefruit\',\n              value: \'grapefruit\',\n            },\n          ]}\n          validationState="valid"\n          validationText="This field is valid"\n          value={fruit}\n        />\n        <CheckboxField\n          checked={agree}\n          id="themed-valid-checkbox"\n          label="Themed valid checkbox"\n          onChange={() => setAgree(!agree)}\n          validationState="valid"\n          validationText="This field is valid"\n        />\n        <Toggle\n          onChange={() => setStudioQuality(!studioQuality)}\n          checked={studioQuality}\n          id="themed-valid-toggle"\n          label="Themed valid toggle"\n          validationState="valid"\n          validationText="This field is valid"\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,CheckboxField:b.a,Radio:c.a,SelectField:u.a,TextField:s.a,Toggle:m.a,DefaultLayout:o.a,_frontmatter:h},mdxType:"Playground"},()=>{const[e,l]=i.useState(!0),[a,t]=i.useState("apple"),[n,o]=i.useState(!0),r=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(d.b)(i.Fragment,null,Object(d.b)("style",{type:"text/css"},"\n        .example--themed-form-field-validation-states {\n          --rui-FormField--valid--default__color: white;\n          --rui-FormField--valid--default__border-color: LightSeaGreen;\n          --rui-FormField--valid--default__background: MediumAquamarine;\n          --rui-FormField--valid--default__check-background-color: MediumAquamarine;\n          --rui-FormField--valid--default__surrounding-text-color: DarkSlateGray;\n          --rui-FormField--valid--checked__check-background-color: MediumAquamarine;\n        }\n      "),Object(d.b)(s.a,{id:"default-valid-text-field",label:"Default valid text field",validationState:"valid",validationText:"This field is valid",mdxType:"TextField"}),Object(d.b)(u.a,{id:"default-valid-select-field",label:"Default valid select field",onChange:e=>t(e.target.value),options:r,validationState:"valid",validationText:"This field is valid",value:a,mdxType:"SelectField"}),Object(d.b)(c.a,{id:"default-valid-radio",label:"Default valid radio",onChange:e=>t(e.target.value),options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],validationState:"valid",validationText:"This field is valid",value:a,mdxType:"Radio"}),Object(d.b)(b.a,{checked:e,id:"default-valid-checkbox",label:"Default valid checkbox",onChange:()=>l(!e),validationState:"valid",validationText:"This field is valid",mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:n,id:"default-valid-toggle",label:"Default valid toggle",onChange:()=>o(!n),validationState:"valid",validationText:"This field is valid",mdxType:"Toggle"}),Object(d.b)("div",{className:"example example--themed-form-field-validation-states mt-6"},Object(d.b)(s.a,{id:"themed-valid-text-field",label:"Themed valid text field",validationState:"valid",validationText:"This field is valid",mdxType:"TextField"}),Object(d.b)(u.a,{id:"themed-valid-select-field",label:"Themed valid select field",onChange:e=>t(e.target.value),options:r,validationState:"valid",validationText:"This field is valid",value:a,mdxType:"SelectField"}),Object(d.b)(c.a,{id:"themed-valid-radio",label:"Themed valid radio",onChange:e=>t(e.target.value),options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],validationState:"valid",validationText:"This field is valid",value:a,mdxType:"Radio"}),Object(d.b)(b.a,{checked:e,id:"themed-valid-checkbox",label:"Themed valid checkbox",onChange:()=>l(!e),validationState:"valid",validationText:"This field is valid",mdxType:"CheckboxField"}),Object(d.b)(m.a,{onChange:()=>o(!n),checked:n,id:"themed-valid-toggle",label:"Themed valid toggle",validationState:"valid",validationText:"This field is valid",mdxType:"Toggle"})))}),Object(d.b)("h2",{id:"disabled-state"},"Disabled State"),Object(d.b)("p",null,"By default, all disabled form fields are semi-transparent and change mouse\ncursor on hover so users know the fields cannot be used."),Object(d.b)("table",null,Object(d.b)("thead",{parentName:"table"},Object(d.b)("tr",{parentName:"thead"},Object(d.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(d.b)("th",{parentName:"tr",align:null},"Description"))),Object(d.b)("tbody",{parentName:"table"},Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--disabled__cursor")),Object(d.b)("td",{parentName:"tr",align:null},"Cursor to show on hovering disabled form fields")),Object(d.b)("tr",{parentName:"tbody"},Object(d.b)("td",{parentName:"tr",align:null},Object(d.b)("inlineCode",{parentName:"td"},"--rui-FormField--disabled__opacity")),Object(d.b)("td",{parentName:"tr",align:null},"Opacity of disabled form fields (inc. label and help text)")))),Object(d.b)("p",null,"Should your design require custom styling of disabled fields, individual field\ntypes and validation states can be fine-tuned by several theming options\navailable. All you need is to define all necessary custom properties following\nthe naming conventions documented in previous sections (for simplicity, the\nproperties do not exist in the default theme, we only use transparency to mark\ndisabled fields by default). Namely, you will be interested in ",Object(d.b)("inlineCode",{parentName:"p"},"disabled")," and\n",Object(d.b)("inlineCode",{parentName:"p"},"checked-disabled")," interaction states and properties that are available for\nstyling of these states."),Object(d.b)("p",null,"Example:"),Object(d.b)(r.c,{__position:5,__code:'() => {\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n        .example--themed-form-field-disabled-state {\n          /*_Common_*/\n          --rui-FormField--disabled__opacity: 1;\n          /*_Check fields_*/\n          --rui-FormField--check--disabled__border-color: silver;\n          --rui-FormField--check--disabled__check-background-color: gainsboro;\n          --rui-FormField--check--disabled__surrounding-text-color: silver;\n          --rui-FormField--check--checked-disabled__border-color: silver;\n          --rui-FormField--check--checked-disabled__check-background-color: gainsboro;\n          /*_Outline box fields_*/\n          --rui-FormField--box--outline--disabled__color: DarkGray;\n          --rui-FormField--box--outline--disabled__border-color: silver;\n          --rui-FormField--box--outline--disabled__background: gainsboro;\n          --rui-FormField--box--outline--disabled__surrounding-text-color: silver;\n          /*_Invalid state_*/\n          --rui-FormField--invalid--disabled__color: DarkGray;\n          --rui-FormField--invalid--disabled__border-color: silver;\n          --rui-FormField--invalid--disabled__background: gainsboro;\n          --rui-FormField--invalid--disabled__check-background-color: gainsboro;\n          --rui-FormField--invalid--disabled__surrounding-text-color: silver;\n          --rui-FormField--invalid--checked-disabled__check-background-color:\n          gainsboro;\n          /*_Warning state_*/\n          --rui-FormField--warning--disabled__color: DarkGray;\n          --rui-FormField--warning--disabled__border-color: silver;\n          --rui-FormField--warning--disabled__background: gainsboro;\n          --rui-FormField--warning--disabled__check-background-color: gainsboro;\n          --rui-FormField--warning--disabled__surrounding-text-color: silver;\n          --rui-FormField--warning--checked-disabled__check-background-color:\n          gainsboro;\n          /*_Valid state_*/\n          --rui-FormField--valid--disabled__color: DarkGray;\n          --rui-FormField--valid--disabled__border-color: silver;\n          --rui-FormField--valid--disabled__background: gainsboro;\n          --rui-FormField--valid--disabled__check-background-color: gainsboro;\n          --rui-FormField--valid--disabled__surrounding-text-color: silver;\n          --rui-FormField--valid--checked-disabled__check-background-color: gainsboro;\n        }\n      `}\n      </style>\n      <TextField\n        disabled\n        id="default-disabled-text-field"\n        label="Default disabled text field"\n      />\n      <SelectField\n        disabled\n        id="default-disabled-select-field"\n        label="Default disabled select field"\n        options={options}\n        value="apple"\n      />\n      <TextField\n        disabled\n        id="default-disabled-invalid-text-field"\n        label="Default disabled invalid text field"\n        validationState="invalid"\n      />\n      <Radio\n        disabled\n        id="default-disabled-radio"\n        label="Default disabled radio"\n        options={[\n          {\n            label: \'Apple\',\n            value: \'apple\',\n          },\n          {\n            label: \'Banana\',\n            value: \'banana\',\n          },\n          {\n            label: \'Grapefruit\',\n            value: \'grapefruit\',\n          },\n        ]}\n        value="apple"\n      />\n      <CheckboxField\n        checked\n        disabled\n        id="default-disabled-checkbox"\n        label="Default disabled checkbox"\n      />\n      <Toggle\n        checked\n        disabled\n        id="default-disabled-toggle"\n        label="Default disabled toggle"\n      />\n      <CheckboxField\n        disabled\n        id="default-disabled-warning-checkbox"\n        label="Default disabled warning checkbox"\n        validationState="warning"\n      />\n      <Toggle\n        checked\n        disabled\n        id="default-disabled-valid-toggle"\n        label="Default disabled valid toggle"\n        validationState="valid"\n      />\n      <div className="example example--themed-form-field-disabled-state mt-6">\n        <TextField\n          disabled\n          id="themed-disabled-text-field"\n          label="Themed disabled text field"\n        />\n        <SelectField\n          disabled\n          id="themed-disabled-select-field"\n          label="Themed disabled select field"\n          options={options}\n          value="apple"\n        />\n        <TextField\n          disabled\n          id="themed-disabled-invalid-text-field"\n          label="Themed disabled invalid text field"\n          validationState="invalid"\n        />\n        <Radio\n          disabled\n          id="themed-disabled-radio"\n          label="Themed disabled radio"\n          options={[\n            {\n              label: \'Apple\',\n              value: \'apple\',\n            },\n            {\n              label: \'Banana\',\n              value: \'banana\',\n            },\n            {\n              label: \'Grapefruit\',\n              value: \'grapefruit\',\n            },\n          ]}\n          value="apple"\n        />\n        <CheckboxField\n          checked\n          disabled\n          id="themed-disabled-checkbox"\n          label="Themed disabled checkbox"\n        />\n        <Toggle\n          checked\n          disabled\n          id="themed-disabled-toggle"\n          label="Themed disabled toggle"\n        />\n        <CheckboxField\n          disabled\n          id="themed-disabled-warning-checkbox"\n          label="Themed disabled warning checkbox"\n          validationState="warning"\n        />\n        <Toggle\n          checked\n          disabled\n          id="themed-disabled-valid-toggle"\n          label="Themed disabled valid toggle"\n          validationState="valid"\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,CheckboxField:b.a,Radio:c.a,SelectField:u.a,TextField:s.a,Toggle:m.a,DefaultLayout:o.a,_frontmatter:h},mdxType:"Playground"},()=>{const e=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(d.b)(i.Fragment,null,Object(d.b)("style",{type:"text/css"},"\n          .example--themed-form-field-disabled-state {\n            /*_Common_*/\n            --rui-FormField--disabled__opacity: 1;\n            /*_Check fields_*/\n            --rui-FormField--check--disabled__border-color: silver;\n            --rui-FormField--check--disabled__check-background-color: gainsboro;\n            --rui-FormField--check--disabled__surrounding-text-color: silver;\n            --rui-FormField--check--checked-disabled__border-color: silver;\n            --rui-FormField--check--checked-disabled__check-background-color: gainsboro;\n            /*_Outline box fields_*/\n            --rui-FormField--box--outline--disabled__color: DarkGray;\n            --rui-FormField--box--outline--disabled__border-color: silver;\n            --rui-FormField--box--outline--disabled__background: gainsboro;\n            --rui-FormField--box--outline--disabled__surrounding-text-color: silver;\n            /*_Invalid state_*/\n            --rui-FormField--invalid--disabled__color: DarkGray;\n            --rui-FormField--invalid--disabled__border-color: silver;\n            --rui-FormField--invalid--disabled__background: gainsboro;\n            --rui-FormField--invalid--disabled__check-background-color: gainsboro;\n            --rui-FormField--invalid--disabled__surrounding-text-color: silver;\n            --rui-FormField--invalid--checked-disabled__check-background-color:\n            gainsboro;\n            /*_Warning state_*/\n            --rui-FormField--warning--disabled__color: DarkGray;\n            --rui-FormField--warning--disabled__border-color: silver;\n            --rui-FormField--warning--disabled__background: gainsboro;\n            --rui-FormField--warning--disabled__check-background-color: gainsboro;\n            --rui-FormField--warning--disabled__surrounding-text-color: silver;\n            --rui-FormField--warning--checked-disabled__check-background-color:\n            gainsboro;\n            /*_Valid state_*/\n            --rui-FormField--valid--disabled__color: DarkGray;\n            --rui-FormField--valid--disabled__border-color: silver;\n            --rui-FormField--valid--disabled__background: gainsboro;\n            --rui-FormField--valid--disabled__check-background-color: gainsboro;\n            --rui-FormField--valid--disabled__surrounding-text-color: silver;\n            --rui-FormField--valid--checked-disabled__check-background-color: gainsboro;\n          }\n        "),Object(d.b)(s.a,{disabled:!0,id:"default-disabled-text-field",label:"Default disabled text field",mdxType:"TextField"}),Object(d.b)(u.a,{disabled:!0,id:"default-disabled-select-field",label:"Default disabled select field",options:e,value:"apple",mdxType:"SelectField"}),Object(d.b)(s.a,{disabled:!0,id:"default-disabled-invalid-text-field",label:"Default disabled invalid text field",validationState:"invalid",mdxType:"TextField"}),Object(d.b)(c.a,{disabled:!0,id:"default-disabled-radio",label:"Default disabled radio",options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],value:"apple",mdxType:"Radio"}),Object(d.b)(b.a,{checked:!0,disabled:!0,id:"default-disabled-checkbox",label:"Default disabled checkbox",mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:!0,disabled:!0,id:"default-disabled-toggle",label:"Default disabled toggle",mdxType:"Toggle"}),Object(d.b)(b.a,{disabled:!0,id:"default-disabled-warning-checkbox",label:"Default disabled warning checkbox",validationState:"warning",mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:!0,disabled:!0,id:"default-disabled-valid-toggle",label:"Default disabled valid toggle",validationState:"valid",mdxType:"Toggle"}),Object(d.b)("div",{className:"example example--themed-form-field-disabled-state mt-6"},Object(d.b)(s.a,{disabled:!0,id:"themed-disabled-text-field",label:"Themed disabled text field",mdxType:"TextField"}),Object(d.b)(u.a,{disabled:!0,id:"themed-disabled-select-field",label:"Themed disabled select field",options:e,value:"apple",mdxType:"SelectField"}),Object(d.b)(s.a,{disabled:!0,id:"themed-disabled-invalid-text-field",label:"Themed disabled invalid text field",validationState:"invalid",mdxType:"TextField"}),Object(d.b)(c.a,{disabled:!0,id:"themed-disabled-radio",label:"Themed disabled radio",options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],value:"apple",mdxType:"Radio"}),Object(d.b)(b.a,{checked:!0,disabled:!0,id:"themed-disabled-checkbox",label:"Themed disabled checkbox",mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:!0,disabled:!0,id:"themed-disabled-toggle",label:"Themed disabled toggle",mdxType:"Toggle"}),Object(d.b)(b.a,{disabled:!0,id:"themed-disabled-warning-checkbox",label:"Themed disabled warning checkbox",validationState:"warning",mdxType:"CheckboxField"}),Object(d.b)(m.a,{checked:!0,disabled:!0,id:"themed-disabled-valid-toggle",label:"Themed disabled valid toggle",validationState:"valid",mdxType:"Toggle"})))}))}void 0!==v&&v&&v===Object(v)&&Object.isExtensible(v)&&!v.hasOwnProperty("__filemeta")&&Object.defineProperty(v,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/customize/theming/forms.mdx"}}),v.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-customize-theming-forms-mdx-2d567ef7c734391f3fc9.js.map