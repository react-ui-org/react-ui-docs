{"version":3,"sources":["webpack:///../src/lib/components/ui/Toggle/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Toggle","studioQuality","setStudioQuality","React","changeHandler","checked","label","helpText","isLabelVisible","labelPosition","validationState","validationText","disabled","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-toggle-readme-mdx-62ca2172388cb5174f0a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Toggle } from './Toggle';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <p>{`Toggle switches things on and off.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Toggle component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Toggle } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  return (\\n    <Toggle\\n      changeHandler={() => setStudioQuality(!studioQuality)}\\n      checked={studioQuality}\\n      label=\\\"Listen in studio quality\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        return <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} label=\"Listen in studio quality\" mdxType=\"Toggle\" />;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the toggle only for boolean (true/false) input `}<strong parentName=\"p\">{`with an immediate effect\n(without confirmation)`}</strong>{`. To toggle things on or off in forms that require to\nbe submitted by a button, use rather the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/checkbox-field\"\n          }}>{`CheckboxField`}</a>{` component.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Use positive wording for the toggle label,`}</strong>{` so that it's clear what will\nhappen when the user turns on the toggle. Avoid negations such as “Don't send\nme any emails” which would mean that the user needs to turn the toggle `}<strong parentName=\"p\">{`on`}</strong>{`\nin order for something `}<strong parentName=\"p\">{`not`}</strong>{` to happen.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the Toggle's label invisible when there is `}<strong parentName=\"p\">{`another visual clue`}</strong>{`\nto guide users through using the input.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The toggle is designed for `}<strong parentName=\"p\">{`switching things on and off.`}</strong>{` Don't use it to\nswitch between two different things that cannot be described as on or off\nusing a single label, e.g. different viewing modes. In such cases, consider\nusing the `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/button-group\"\n          }}>{`ButtonGroup`}</a>{` component.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify what will be the impact of\nturning the toggle on or off.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  return (\\n    <Toggle\\n      changeHandler={() => setStudioQuality(!studioQuality)}\\n      checked={studioQuality}\\n      helpText={\\n        \\'Unrivaled audio quality. Uses the MQA audio format. \\' +\\n        \\'Transfers a lot of data.\\'\\n      }\\n      label=\\\"Listen in studio quality\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        return <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} helpText={'Unrivaled audio quality. Uses the MQA audio format. ' + 'Transfers a lot of data.'} label=\"Listen in studio quality\" mdxType=\"Toggle\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"label-options\"\n    }}>{`Label Options`}</h2>\n    <p>{`In some cases, it may be convenient to visually hide the toggle label. The label\nremains accessible to assistive technologies.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  return (\\n    <Toggle\\n      changeHandler={() => setStudioQuality(!studioQuality)}\\n      checked={studioQuality}\\n      isLabelVisible={false}\\n      label=\\\"You cannot see this\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        return <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} isLabelVisible={false} label=\"You cannot see this\" mdxType=\"Toggle\" />;\n      }}\n    </Playground>\n    <p>{`It's also possible to display the label before the input:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  return (\\n    <Toggle\\n      changeHandler={() => setStudioQuality(!studioQuality)}\\n      checked={studioQuality}\\n      label=\\\"Listen in studio quality\\\"\\n      labelPosition=\\\"before\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        return <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} label=\"Listen in studio quality\" labelPosition=\"before\" mdxType=\"Toggle\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide a validation message for states other than valid`}</strong>{` so\nusers know what happened and what action they should take or what options they\nhave.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [studioQuality, setStudioQuality] = React.useState(true)\\n  return (\\n    <>\\n      <Toggle\\n        changeHandler={() => setStudioQuality(!studioQuality)}\\n        checked={studioQuality}\\n        label=\\\"Listen in studio quality\\\"\\n        validationState=\\\"valid\\\"\\n      />\\n      <Toggle\\n        changeHandler={() => setStudioQuality(!studioQuality)}\\n        checked={studioQuality}\\n        label=\\\"Listen in studio quality\\\"\\n        validationState=\\\"warning\\\"\\n        validationText={\\n          \\'Looks like you are connected over cellular network. \\' +\\n          \\'Please make sure you know what you are doing.\\'\\n        }\\n      />\\n      <Toggle\\n        changeHandler={() => setStudioQuality(!studioQuality)}\\n        checked={studioQuality}\\n        label=\\\"Listen in studio quality\\\"\\n        validationState=\\\"invalid\\\"\\n        validationText=\\\"Please upgrade your plan to make this option available.\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [studioQuality, setStudioQuality] = React.useState(true);\n        return <>\n        <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} label=\"Listen in studio quality\" validationState=\"valid\" mdxType=\"Toggle\" />\n        <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} label=\"Listen in studio quality\" validationState=\"warning\" validationText={'Looks like you are connected over cellular network. ' + 'Please make sure you know what you are doing.'} mdxType=\"Toggle\" />\n        <Toggle changeHandler={() => setStudioQuality(!studioQuality)} checked={studioQuality} label=\"Listen in studio quality\" validationState=\"invalid\" validationText=\"Please upgrade your plan to make this option available.\" mdxType=\"Toggle\" />\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`Disabled state makes the input unavailable.`}</p>\n    <Playground __position={5} __code={'<Toggle label=\\\"Disabled toggle\\\" disabled />\\n<Toggle label=\\\"Disabled toggle, checked\\\" disabled checked />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Toggle label=\"Disabled toggle\" disabled mdxType=\"Toggle\" />\n  <Toggle label=\"Disabled toggle, checked\" disabled checked mdxType=\"Toggle\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`In addition to the options below, you can add any custom attributes that do not\ninterfere with the API, and they will be passed to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` HTML element.\nThis is useful mainly to improve component's accessibility.`}</p>\n    <Props table of={Toggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <p>{`Head to `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/forms\"\n      }}>{`Forms Theming`}</a>{` to see shared form theming\noptions. On top of that, the following options are available for Toggle.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input width (height is shared with other check fields)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle__border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input corner radius`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle__background-size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input background size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle--default__background-image`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background image of unchecked input`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle--default__background-position`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background position of unchecked input`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle--checked__background-image`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background image of checked input`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--toggle--checked__background-position`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background position of checked input`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}