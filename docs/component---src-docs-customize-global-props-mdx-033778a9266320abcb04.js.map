{"version":3,"sources":["webpack:///../src/docs/customize/global-props.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Toolbar","ToolbarItem","Button","SelectField","TextField","RUIProvider","variant","setVariant","React","globalProps","priority","align","changeHandler","e","target","value","id","label","options","clickHandler","isMDXComponent"],"mappings":"4UAcO,MAAMA,EAAe,Q,qNAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,gBACH,gBAEL,qBAAK,yIAEL,qBAAK,iEAAgE,0BAAYC,WAAW,KAAM,eAA4B,6CACxF,0BAAYA,WAAW,KAAM,eAA4B,iCAC3F,0BAAYA,WAAW,KAAM,eAA4B,mJAEnD,0BAAYA,WAAW,KAAM,eAA4B,KACnE,kBACE,GAAM,eACH,eACL,qBAAK,8CAA6C,0BAAYA,WAAW,KAAM,eAA4B,WAC3G,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eACV,4DAEP,qBAAK,0CAAyC,0BAAYA,WAAW,KAAM,eAA4B,iBAAgB,0BAAYA,WAAW,KAAM,eAA4B,sKAIhL,qBAAK,+CACL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBACV,+KAQP,qBAAK,wBACL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2iCAA0jCC,QAAS,CACpmCL,QACAH,kBACAS,eACAC,YACAC,gBACAC,WACAC,gBACAC,cACAC,gBACAf,kBACAH,gBACCO,QAAQ,cACZ,KACK,MAAOY,EAASC,GAAcC,WAAe,UAC7C,OAAO,YAAC,IAAD,CAAaC,YAAa,CAC/BP,OAAQ,CACNQ,SAAUJ,GAEZF,UAAW,CACTE,WAEFH,YAAa,CACXG,YAEDZ,QAAQ,eACX,YAAC,IAAD,CAASiB,MAAM,SAASjB,QAAQ,WAC9B,YAAC,IAAD,CAAaA,QAAQ,eACnB,YAAC,IAAD,CAAakB,cAAeC,GAAKN,EAAWM,EAAEC,OAAOC,OAAQC,GAAG,UAAUC,MAAM,iCAAiCC,QAAS,CAAC,CACvHD,MAAO,SACPF,MAAO,UACN,CACDE,MAAO,UACPF,MAAO,YACLA,MAAOT,EAASZ,QAAQ,iBAEhC,YAAC,IAAD,CAAaA,QAAQ,eACnB,YAAC,IAAD,CAAWsB,GAAG,gBAAgBC,MAAM,aAAavB,QAAQ,eAE3D,YAAC,IAAD,CAAaA,QAAQ,eACnB,YAAC,IAAD,CAAQyB,aAAc,OAAUH,GAAG,YAAYC,MAAM,SAASvB,QAAQ,sB,mNAUlFH,EAAW6B,gBAAiB","file":"component---src-docs-customize-global-props-mdx-033778a9266320abcb04.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Toolbar, ToolbarItem } from '../../lib/components/layout/Toolbar';\nimport Button from '../../lib/components/ui/Button';\nimport SelectField from '../../lib/components/ui/SelectField';\nimport TextField from '../../lib/components/ui/TextField';\nimport { RUIProvider } from '../../lib/provider';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"global-props\"\n    }}>{`Global Props`}</h1>\n\n    <p>{`Sometimes it can be useful to share some configuration props between\nmultiple instances of components of the same or different kind.`}</p>\n    <p>{`This can be achieved by wrapping application or its part with `}<inlineCode parentName=\"p\">{`RUIProvider`}</inlineCode>{`\nand passing in the common props through `}<inlineCode parentName=\"p\">{`globalProps`}</inlineCode>{` prop. With or without\nusing `}<inlineCode parentName=\"p\">{`RUIProvider`}</inlineCode>{` the component can be configured by passing in the props\ndirectly. The props passed in directly always take precedence over props\ncoming from `}<inlineCode parentName=\"p\">{`RUIProvider`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To define global props, you need to import `}<inlineCode parentName=\"p\">{`RUIProvider`}</inlineCode>{` first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { RUIProvider } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`Then wrap application or its part with `}<inlineCode parentName=\"p\">{`RUIProvider`}</inlineCode>{` with defined `}<inlineCode parentName=\"p\">{`globalProps`}</inlineCode>{`\nattribute holding an object. Keys are names of the components, and their\nvalues are objects with arbitrary props you want to pass to the specified\ncomponents.`}</p>\n    <p>{`Keys conform to actual names of components:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<RUIProvider globalProps={{\n  Button: { priority: 'filled' },\n  TextField: { variant: 'filled' },\n  SelectField: { variant: 'filled' },\n}}>\n  //...\n</RUIProvider>\n`}</code></pre>\n    <p>{`See working example:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [variant, setVariant] = React.useState(\\'filled\\')\\n  return (\\n    <RUIProvider\\n      globalProps={{\\n        Button: { priority: variant },\\n        TextField: { variant },\\n        SelectField: { variant },\\n      }}\\n    >\\n      <Toolbar align=\\\"bottom\\\">\\n        <ToolbarItem>\\n          <SelectField\\n            changeHandler={e => setVariant(e.target.value)}\\n            id=\\\"variant\\\"\\n            label=\\\"Select variant of Select Field\\\"\\n            options={[\\n              {\\n                label: \\'filled\\',\\n                value: \\'filled\\',\\n              },\\n              {\\n                label: \\'outline\\',\\n                value: \\'outline\\',\\n              },\\n            ]}\\n            value={variant}\\n          />\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <TextField id=\\\"my-text-field\\\" label=\\\"Text Field\\\" />\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <Button clickHandler={() => {}} id=\\\"my-button\\\" label=\\\"Button\\\" />\\n        </ToolbarItem>\\n      </Toolbar>\\n    </RUIProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toolbar,\n      ToolbarItem,\n      Button,\n      SelectField,\n      TextField,\n      RUIProvider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [variant, setVariant] = React.useState('filled');\n        return <RUIProvider globalProps={{\n          Button: {\n            priority: variant\n          },\n          TextField: {\n            variant\n          },\n          SelectField: {\n            variant\n          }\n        }} mdxType=\"RUIProvider\">\n        <Toolbar align=\"bottom\" mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <SelectField changeHandler={e => setVariant(e.target.value)} id=\"variant\" label=\"Select variant of Select Field\" options={[{\n                label: 'filled',\n                value: 'filled'\n              }, {\n                label: 'outline',\n                value: 'outline'\n              }]} value={variant} mdxType=\"SelectField\" />\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <TextField id=\"my-text-field\" label=\"Text Field\" mdxType=\"TextField\" />\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <Button clickHandler={() => {}} id=\"my-button\" label=\"Button\" mdxType=\"Button\" />\n          </ToolbarItem>\n        </Toolbar>\n      </RUIProvider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}