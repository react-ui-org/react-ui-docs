(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"2K0t":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return f})),n.d(t,"default",(function(){return O}));var o=n("Fcif"),a=n("dV/x"),l=n("mXGw"),i=n("/FXl"),r=n("TjRS"),b=n("ZFoC"),p=n("OKvf"),c=n("EeFm"),d=n("gMdT"),s=n("kEDA"),m=n("wNj7");n("aD51");const u=["components"],f={};void 0!==f&&f&&f===Object(f)&&Object.isExtensible(f)&&!f.hasOwnProperty("__filemeta")&&Object.defineProperty(f,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/customize/global-props.mdx"}});const j={_frontmatter:f},v=r.a;function O(e){let{components:t}=e,n=Object(a.a)(e,u);return Object(i.b)(v,Object(o.a)({},j,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"global-props"},"Global Props"),Object(i.b)("p",null,"Sometimes it can be useful to share some configuration props between\nmultiple instances of components of the same or different kind."),Object(i.b)("p",null,"This can be achieved by wrapping application or its part with ",Object(i.b)("inlineCode",{parentName:"p"},"RUIProvider"),"\nand passing in the common props through ",Object(i.b)("inlineCode",{parentName:"p"},"globalProps")," prop. With or without\nusing ",Object(i.b)("inlineCode",{parentName:"p"},"RUIProvider")," the component can be configured by passing in the props\ndirectly. The props passed in directly always take precedence over props\ncoming from ",Object(i.b)("inlineCode",{parentName:"p"},"RUIProvider"),"."),Object(i.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(i.b)("p",null,"To define global props, you need to import ",Object(i.b)("inlineCode",{parentName:"p"},"RUIProvider")," first:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { RUIProvider } from '@react-ui-org/react-ui';\n")),Object(i.b)("p",null,"Then wrap application or its part with ",Object(i.b)("inlineCode",{parentName:"p"},"RUIProvider")," with defined ",Object(i.b)("inlineCode",{parentName:"p"},"globalProps"),"\nattribute holding an object. Keys are names of the components, and their\nvalues are objects with arbitrary props you want to pass to the specified\ncomponents."),Object(i.b)("p",null,"Keys conform to actual names of components:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"<RUIProvider globalProps={{\n  Button: { priority: 'filled' },\n  TextField: { variant: 'filled' },\n  SelectField: { variant: 'filled' },\n}}>\n  //...\n</RUIProvider>\n")),Object(i.b)("p",null,"See working example:"),Object(i.b)(b.c,{__position:0,__code:'() => {\n  const [variant, setVariant] = React.useState(\'filled\')\n  return (\n    <RUIProvider\n      globalProps={{\n        Button: { priority: variant },\n        TextField: { variant },\n        SelectField: { variant },\n      }}\n    >\n      <Toolbar align="bottom">\n        <ToolbarItem>\n          <SelectField\n            id="variant"\n            label="Select variant of Select Field"\n            onChange={e => setVariant(e.target.value)}\n            options={[\n              {\n                label: \'filled\',\n                value: \'filled\',\n              },\n              {\n                label: \'outline\',\n                value: \'outline\',\n              },\n            ]}\n            value={variant}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <TextField id="my-text-field" label="Text Field" />\n        </ToolbarItem>\n        <ToolbarItem>\n          <Button id="my-button" label="Button" />\n        </ToolbarItem>\n      </Toolbar>\n    </RUIProvider>\n  )\n}',__scope:{props:n,DefaultLayout:r.a,Playground:b.c,Toolbar:p.a,ToolbarItem:p.b,Button:c.a,SelectField:d.a,TextField:s.a,RUIProvider:m.a,DefaultLayout:r.a,_frontmatter:f},mdxType:"Playground"},()=>{const[e,t]=l.useState("filled");return Object(i.b)(m.a,{globalProps:{Button:{priority:e},TextField:{variant:e},SelectField:{variant:e}},mdxType:"RUIProvider"},Object(i.b)(p.a,{align:"bottom",mdxType:"Toolbar"},Object(i.b)(p.b,{mdxType:"ToolbarItem"},Object(i.b)(d.a,{id:"variant",label:"Select variant of Select Field",onChange:e=>t(e.target.value),options:[{label:"filled",value:"filled"},{label:"outline",value:"outline"}],value:e,mdxType:"SelectField"})),Object(i.b)(p.b,{mdxType:"ToolbarItem"},Object(i.b)(s.a,{id:"my-text-field",label:"Text Field",mdxType:"TextField"})),Object(i.b)(p.b,{mdxType:"ToolbarItem"},Object(i.b)(c.a,{id:"my-button",label:"Button",mdxType:"Button"}))))}))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/customize/global-props.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-customize-global-props-mdx-a58eb531bc57d900bb1a.js.map