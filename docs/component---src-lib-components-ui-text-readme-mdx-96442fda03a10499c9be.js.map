{"version":3,"sources":["webpack:///../src/lib/components/ui/Text/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Placeholder","Toolbar","ToolbarGroup","ToolbarItem","Button","ButtonGroup","TextField","Text","lines","setLines","React","align","changeHandler","e","target","value","label","min","max","type","hyphens","setHyphens","wordWrapping","setWordWrapping","id","aria-labelledby","clickHandler","color","width","bordered","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-text-readme-mdx-96442fda03a10499c9be.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Placeholder } from '../../../../docs/_components/Placeholder/Placeholder';\nimport { Toolbar } from '../../layout/Toolbar/Toolbar';\nimport { ToolbarGroup } from '../../layout/Toolbar/ToolbarGroup';\nimport { ToolbarItem } from '../../layout/Toolbar/ToolbarItem';\nimport { Button } from '../Button/Button';\nimport { ButtonGroup } from '../ButtonGroup/ButtonGroup';\nimport { TextField } from '../TextField/TextField';\nimport { Text } from './Text';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"text\"\n    }}>{`Text`}</h1>\n\n    <p>{`Text is a tiny component to control wrapping of text content.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Text component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Text } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<Placeholder>\\n  <Text lines={3}>\\n    Hello! This text will be clamped to three lines. Lorem ipsum dolor sit\\n    amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.\\n    Aenean massa. Cum sociis natoque penatibus et magnis dis parturient\\n    montes, nascetur ridiculus mus. Donec quam felis, ultricies nec,\\n    pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec\\n    pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim\\n    justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\\n  </Text>\\n</Placeholder>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Button,\n      ButtonGroup,\n      TextField,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Placeholder mdxType=\"Placeholder\">\n    <Text lines={3} mdxType=\"Text\">\n      Hello! This text will be clamped to three lines.\n      Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n      ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n      dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n      ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n      quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n      arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n    </Text>\n  </Placeholder>\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use Text anytime you need to `}<strong parentName=\"p\">{`control potentially long strings`}</strong>{` and\nprevent them from overflowing or breaking their container.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`By default, Text doesn't alter rendering of its content.`}</strong>{` Use available\noptions to achieve the result you need.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Text renders as `}<inlineCode parentName=\"strong\">{`<span>`}</inlineCode>{` by default,`}</strong>{` so it can only contain\ninline-level HTML elements (like `}<inlineCode parentName=\"p\">{`<strong>`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{`, but not `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<p>`}</inlineCode>{`,\nor `}<inlineCode parentName=\"p\">{`<h2>`}</inlineCode>{`). If necessary, use the `}<inlineCode parentName=\"p\">{`blockLevel`}</inlineCode>{` option to render as `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` to\nkeep your HTML valid.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Use Text for short pieces of text content.`}</strong>{` Including a couple of HTML tags\nshouldn't cause any harm, but keep in mind Text is not intended to wrap\ncomplex HTML structures or even React components.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"number-of-lines\"\n    }}>{`Number of Lines`}</h2>\n    <p>{`Specify how many `}<inlineCode parentName=\"p\">{`lines`}</inlineCode>{` of text should be visible if content doesn't fit its\ncontainer. If the number of lines is exceeded, the content is truncated and\nappended by an ellipsis (`}<inlineCode parentName=\"p\">{`â€¦`}</inlineCode>{`).`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [lines, setLines] = React.useState(1)\\n  return (\\n    <div>\\n      <Toolbar align=\\\"baseline\\\">\\n        <ToolbarItem>\\n          <TextField\\n            changeHandler={e => setLines(e.target.value)}\\n            label=\\\"Number of lines\\\"\\n            min={1}\\n            max={100}\\n            type=\\\"number\\\"\\n            value={lines}\\n          />\\n        </ToolbarItem>\\n      </Toolbar>\\n      <Placeholder>\\n        <Text lines={lines}>\\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n          commodo ligula eget dolor. Aenean massa. Cum sociis natoque\\n          penatibus et magnis dis parturient montes, nascetur ridiculus mus.\\n          Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\\n          Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\\n          aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\\n          imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\\n          mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum\\n          semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula,\\n          porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\\n          ante, dapibus in, viverra quis, feugiat a, tellus.\\n        </Text>\\n      </Placeholder>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Button,\n      ButtonGroup,\n      TextField,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [lines, setLines] = React.useState(1);\n        return <div>\n        <Toolbar align=\"baseline\" mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <TextField changeHandler={e => setLines(e.target.value)} label=\"Number of lines\" min={1} max={100} type=\"number\" value={lines} mdxType=\"TextField\" />\n          </ToolbarItem>\n        </Toolbar>\n        <Placeholder mdxType=\"Placeholder\">\n          <Text lines={lines} mdxType=\"Text\">\n            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n            commodo ligula eget dolor. Aenean massa. Cum sociis natoque\n            penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n            Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\n            Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n            aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\n            imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\n            mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum\n            semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula,\n            porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n            ante, dapibus in, viverra quis, feugiat a, tellus.\n          </Text>\n        </Placeholder>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"word-wrapping\"\n    }}>{`Word Wrapping`}</h2>\n    <p>{`There are three possible ways of controlling wrapping of long words if they do\nnot fit on a line. Set `}<inlineCode parentName=\"p\">{`wordWrapping`}</inlineCode>{` to one of the following values:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`normal`}</inlineCode>{`: Do not force any wrapping (default behavior).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`long-words`}</inlineCode>{`: To prevent overflow, an otherwise unbreakable string of\ncharacters â€” like a long word or URL â€” may be broken at any point if there are\nno otherwise-acceptable break points in the line.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`anywhere`}</inlineCode>{`: Create a break at the exact place where text would otherwise\noverflow its container (even if putting an entire word on its own line would\nnegate the need for a break).`}</p>\n      </li>\n    </ul>\n    <p>{`ðŸ“– `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Text/Wrapping_Text\"\n      }}>{`Read more about wrapping and breaking text at MDN.`}</a></p>\n    <h3 {...{\n      \"id\": \"hyphens\"\n    }}>{`Hyphens`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`hyphens`}</inlineCode>{` option specifies how words should be hyphenated when text wraps\nacross multiple lines. It can prevent hyphenation entirely, hyphenate at\nmanually-specified points within the text, or let the browser automatically\ninsert hyphens where appropriate.`}</p>\n    <p>{`ðŸ‘‰ The `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` setting's behavior depends on the language being properly tagged\nto select the appropriate hyphenation rules. `}<strong parentName=\"p\">{`You must specify a language`}</strong>{`\nusing the `}<inlineCode parentName=\"p\">{`lang`}</inlineCode>{` HTML attribute (e.g.\n`}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/usage#full-example\"\n      }}>{`on `}<inlineCode parentName=\"a\">{`<html>`}</inlineCode>{` tag`}</a>{`) to guarantee that\nautomatic hyphenation is applied in that language.`}</p>\n    <p>{`ðŸ‘‰ `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens#suggesting_line_break_opportunities\"\n      }}>{`Manually suggested line break opportunities`}</a>{`\nwill override automatic break point selection in `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` mode when present.`}</p>\n    <p>{`ðŸ“– `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens\"\n      }}>{`Read more about `}<inlineCode parentName=\"a\">{`hyphens`}</inlineCode>{` CSS property at MDN.`}</a></p>\n    <Playground __position={2} __code={'() => {\\n  const [hyphens, setHyphens] = React.useState(\\'none\\')\\n  const [wordWrapping, setWordWrapping] = React.useState(\\'normal\\')\\n  return (\\n    <div>\\n      <Toolbar>\\n        <ToolbarGroup align=\\\"baseline\\\">\\n          <ToolbarItem>\\n            <span id=\\\"word-wrapping-options-label\\\">Word wrapping:</span>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <ButtonGroup aria-labelledby=\\\"#word-wrapping-options-label\\\">\\n              <Button\\n                label=\\\"normal\\\"\\n                clickHandler={() => setWordWrapping(\\'normal\\')}\\n                color={wordWrapping === \\'normal\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"long-words\\\"\\n                clickHandler={() => setWordWrapping(\\'long-words\\')}\\n                color={wordWrapping === \\'long-words\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"anywhere\\\"\\n                clickHandler={() => setWordWrapping(\\'anywhere\\')}\\n                color={wordWrapping === \\'anywhere\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n            </ButtonGroup>\\n          </ToolbarItem>\\n        </ToolbarGroup>\\n        <ToolbarGroup align=\\\"baseline\\\">\\n          <ToolbarItem>\\n            <span id=\\\"hyphens-options-label\\\">Hyphens:</span>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <ButtonGroup aria-labelledby=\\\"#hyphens-options-label\\\">\\n              <Button\\n                label=\\\"none\\\"\\n                clickHandler={() => setHyphens(\\'none\\')}\\n                color={hyphens === \\'none\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"auto\\\"\\n                clickHandler={() => setHyphens(\\'auto\\')}\\n                color={hyphens === \\'auto\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"manual\\\"\\n                clickHandler={() => setHyphens(\\'manual\\')}\\n                color={hyphens === \\'manual\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n            </ButtonGroup>\\n          </ToolbarItem>\\n        </ToolbarGroup>\\n      </Toolbar>\\n      <Placeholder width=\\\"11em\\\" bordered>\\n        <Text hyphens={hyphens} wordWrapping={wordWrapping}>\\n          {hyphens === \\'manual\\' ? (\\n            <>LongWord&shy;ThatHasManual&shy;Breaking&shy;Possibilities</>\\n          ) : (\\n            <>LongWordThatHasNoBreakingPossibilities</>\\n          )}{\\' \\'}\\n          and a couple of ordinary words that are nice and well behaved.\\n        </Text>\\n      </Placeholder>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Button,\n      ButtonGroup,\n      TextField,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [hyphens, setHyphens] = React.useState('none');\n        const [wordWrapping, setWordWrapping] = React.useState('normal');\n        return <div>\n        <Toolbar mdxType=\"Toolbar\">\n          <ToolbarGroup align=\"baseline\" mdxType=\"ToolbarGroup\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <span id=\"word-wrapping-options-label\">Word wrapping:</span>\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <ButtonGroup aria-labelledby=\"#word-wrapping-options-label\" mdxType=\"ButtonGroup\">\n                <Button label=\"normal\" clickHandler={() => setWordWrapping('normal')} color={wordWrapping === 'normal' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"long-words\" clickHandler={() => setWordWrapping('long-words')} color={wordWrapping === 'long-words' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"anywhere\" clickHandler={() => setWordWrapping('anywhere')} color={wordWrapping === 'anywhere' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              </ButtonGroup>\n            </ToolbarItem>\n          </ToolbarGroup>\n          <ToolbarGroup align=\"baseline\" mdxType=\"ToolbarGroup\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <span id=\"hyphens-options-label\">Hyphens:</span>\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <ButtonGroup aria-labelledby=\"#hyphens-options-label\" mdxType=\"ButtonGroup\">\n                <Button label=\"none\" clickHandler={() => setHyphens('none')} color={hyphens === 'none' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"auto\" clickHandler={() => setHyphens('auto')} color={hyphens === 'auto' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"manual\" clickHandler={() => setHyphens('manual')} color={hyphens === 'manual' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              </ButtonGroup>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <Placeholder width=\"11em\" bordered mdxType=\"Placeholder\">\n          <Text hyphens={hyphens} wordWrapping={wordWrapping} mdxType=\"Text\">\n            {hyphens === 'manual' ? <>LongWord&shy;ThatHasManual&shy;Breaking&shy;Possibilities</> : <>LongWordThatHasNoBreakingPossibilities</>}\n            {' '}\n            and a couple of ordinary words that are nice and well behaved.\n          </Text>\n        </Placeholder>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={Text} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}