{"version":3,"sources":["webpack:///../src/lib/components/TextField/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","TextField","label","variant","size","fullWidth","type","inputSize","autoComplete","minLength","maxLength","min","max","isLabelVisible","placeholder","layout","helpText","validationState","validationText","value","required","disabled","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-text-field-readme-mdx-3a6155212370677cb537.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { TextField } from './TextField';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textfield\"\n    }}>{`TextField`}</h1>\n    <p>{`TextField allows users to input text information.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the TextField component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { TextField } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<TextField label=\\\"First name\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"First name\" mdxType=\"TextField\" />\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the `}<strong parentName=\"p\">{`most suitable input type`}</strong>{` for current context: aside from the\ncommon `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` type, there are also `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`password`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`tel`}</inlineCode>{`\ntypes at your disposal. A properly chosen input type is especially important\nfor touch users as it triggers an appropriate virtual keyboard, so it helps\nspeed up the completion of the field.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Beware of the `}<inlineCode parentName=\"strong\">{`number`}</inlineCode>{` input type:`}</strong>{` it may not be always what you want.\nNot all number-like values are actually numbers, e.g. phone numbers, credit\ncard numbers, or business IDs. In such cases use the most appropriate input\ntype (probably `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`tel`}</inlineCode>{`) along with the `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern\"\n          }}><inlineCode parentName=\"a\">{`pattern`}</inlineCode>{` attribute`}</a>{`\nto improve the input experience for touch users.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`short and descriptive labels`}</strong>{`, ideally nouns rather than seemingly\npolite phrases like `}<em parentName=\"p\">{`Please enter your first name`}</em>{`. Short labels will help\nyour users accomplish their task faster.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the TextField's label invisible when there is `}<strong parentName=\"p\">{`another visual\nclue`}</strong>{` to guide users through filling the input.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Optionally you can `}<strong parentName=\"p\">{`pre-fill your text fields with a placeholder`}</strong>{` to give\nusers an example of what they're expected to fill in. Just remember the\nplaceholder disappears once a value is entered so don't put anything important\nthere. Usually, en example value starting with “Eg.” works best.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered. Be positive and focus on solutions to make the error message helpful.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When asking users for their contact information or other personal information,\nmake use of the `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\"\n          }}><inlineCode parentName=\"a\">{`autocomplete`}</inlineCode>{` attribute`}</a>{` to help them fill the\nform faster.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"design-variants\"\n    }}>{`Design Variants`}</h2>\n    <p>{`To satisfy the design requirements of your project, all input fields in React UI\ncome in `}<strong parentName=\"p\">{`two design variants`}</strong>{` to choose from: outline and filled. Both can be\nfurther `}<a parentName=\"p\" {...{\n        \"href\": \"#theming\"\n      }}>{`customized`}</a>{` with CSS custom properties.`}</p>\n    <Playground __position={1} __code={'<TextField label=\\\"First name\\\" />\\n<TextField label=\\\"First name\\\" variant=\\\"filled\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"First name\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" variant=\"filled\" mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Aside from the default (medium) size, two additional sizes are available: small\nand large.`}</p>\n    <Playground __position={2} __code={'<TextField label=\\\"First name\\\" size=\\\"small\\\" />\\n<TextField label=\\\"First name\\\" />\\n<TextField label=\\\"First name\\\" size=\\\"large\\\" />\\n<TextField label=\\\"First name\\\" size=\\\"small\\\" variant=\\\"filled\\\" />\\n<TextField label=\\\"First name\\\" variant=\\\"filled\\\" />\\n<TextField label=\\\"First name\\\" size=\\\"large\\\" variant=\\\"filled\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"First name\" size=\"small\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" size=\"large\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" size=\"small\" variant=\"filled\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" variant=\"filled\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" size=\"large\" variant=\"filled\" mdxType=\"TextField\" />\n    </Playground>\n    <p>{`Full-width fields span the full width of a parent:`}</p>\n    <Playground __position={3} __code={'<TextField label=\\\"First name\\\" fullWidth />\\n<TextField label=\\\"First name\\\" variant=\\\"filled\\\" fullWidth />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"First name\" fullWidth mdxType=\"TextField\" />\n  <TextField label=\"First name\" variant=\"filled\" fullWidth mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"input-types\"\n    }}>{`Input Types`}</h2>\n    <p>{`Aside from the common `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` type, there are also `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`password`}</inlineCode>{`,\nand `}<inlineCode parentName=\"p\">{`tel`}</inlineCode>{` types at your disposal.`}</p>\n    <Playground __position={4} __code={'<TextField label=\\\"Email\\\" type=\\\"email\\\" />\\n<TextField label=\\\"Email\\\" variant=\\\"filled\\\" type=\\\"email\\\" />\\n<TextField label=\\\"Age\\\" type=\\\"number\\\" />\\n<TextField label=\\\"Age\\\" variant=\\\"filled\\\" type=\\\"number\\\" />\\n<TextField label=\\\"Password\\\" type=\\\"password\\\" />\\n<TextField label=\\\"Password\\\" variant=\\\"filled\\\" type=\\\"password\\\" />\\n<TextField label=\\\"Phone\\\" type=\\\"tel\\\" />\\n<TextField label=\\\"Phone\\\" variant=\\\"filled\\\" type=\\\"tel\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"Email\" type=\"email\" mdxType=\"TextField\" />\n  <TextField label=\"Email\" variant=\"filled\" type=\"email\" mdxType=\"TextField\" />\n  <TextField label=\"Age\" type=\"number\" mdxType=\"TextField\" />\n  <TextField label=\"Age\" variant=\"filled\" type=\"number\" mdxType=\"TextField\" />\n  <TextField label=\"Password\" type=\"password\" mdxType=\"TextField\" />\n  <TextField label=\"Password\" variant=\"filled\" type=\"password\" mdxType=\"TextField\" />\n  <TextField label=\"Phone\" type=\"tel\" mdxType=\"TextField\" />\n  <TextField label=\"Phone\" variant=\"filled\" type=\"tel\" mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"input-size\"\n    }}>{`Input Size`}</h2>\n    <p>{`The default width of all inputs is 240 px, and it can be `}<a parentName=\"p\" {...{\n        \"href\": \"#theming\"\n      }}>{`customized`}</a>{`\nwith a CSS custom property. However, you can also `}<strong parentName=\"p\">{`change the width of\nindividual text fields`}</strong>{` using the `}<inlineCode parentName=\"p\">{`inputSize`}</inlineCode>{` property. It (obviously) sets the\n`}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` attribute of the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` element and is further picked up by CSS to\nnormalize rendering across browsers.`}</p>\n    <p>{`👉 Remember that the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text#size\"\n      }}><inlineCode parentName=\"a\">{`size`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#max\"\n      }}><inlineCode parentName=\"a\">{`max`}</inlineCode></a>{` HTML attributes `}<strong parentName=\"p\">{`don't\nlimit on how many characters`}</strong>{` the user can enter. Use the `}<inlineCode parentName=\"p\">{`maxlength`}</inlineCode>{`\nattribute to achieve that effect (doesn't work for `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` input type though).`}</p>\n    <p>{`👉 Note that according to the HTML specification, the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` attribute (invoked\nby `}<inlineCode parentName=\"p\">{`inputSize`}</inlineCode>{` API option) is\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#Controlling_input_size\"\n      }}>{`not available for `}<inlineCode parentName=\"a\">{`number`}</inlineCode>{` input type`}</a>{`. TextField supports\n`}<inlineCode parentName=\"p\">{`inputSize`}</inlineCode>{` option for all types of inputs, so you can use it whenever you find\nit suitable. Just keep in mind the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` attribute will not be present for\nnumeric inputs.`}</p>\n    <Playground __position={5} __code={'<TextField inputSize={3} label=\\\"Title\\\" />\\n<TextField inputSize={3} label=\\\"Title\\\" variant=\\\"filled\\\" />\\n<TextField inputSize={3} label=\\\"Age\\\" type=\\\"number\\\" />\\n<TextField inputSize={3} label=\\\"Age\\\" type=\\\"number\\\" variant=\\\"filled\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField inputSize={3} label=\"Title\" mdxType=\"TextField\" />\n  <TextField inputSize={3} label=\"Title\" variant=\"filled\" mdxType=\"TextField\" />\n  <TextField inputSize={3} label=\"Age\" type=\"number\" mdxType=\"TextField\" />\n  <TextField inputSize={3} label=\"Age\" type=\"number\" variant=\"filled\" mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"forwarding-html-attributes\"\n    }}>{`Forwarding HTML Attributes`}</h2>\n    <p>{`When you want to improve the accessibility of your text fields even further, you\ncan `}<strong parentName=\"p\">{`add whatever HTML attribute you like.`}</strong>{` All attributes that don't\ninterfere with `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`component's API`}</a>{` are forwarded to the native HTML input.`}</p>\n    <Playground __position={6} __code={'<TextField\\n  label=\\\"Address\\\"\\n  autoComplete=\\\"street-address\\\"\\n  minLength={3}\\n  maxLength={80}\\n/>\\n<TextField\\n  label=\\\"Address\\\"\\n  variant=\\\"filled\\\"\\n  autoComplete=\\\"street-address\\\"\\n  minLength={3}\\n  maxLength={80}\\n/>\\n<TextField inputSize={3} min={13} max={120} label=\\\"Age\\\" type=\\\"number\\\" />\\n<TextField\\n  inputSize={3}\\n  min={13}\\n  max={120}\\n  label=\\\"Age\\\"\\n  type=\\\"number\\\"\\n  variant=\\\"filled\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"Address\" autoComplete=\"street-address\" minLength={3} maxLength={80} mdxType=\"TextField\" />\n  <TextField label=\"Address\" variant=\"filled\" autoComplete=\"street-address\" minLength={3} maxLength={80} mdxType=\"TextField\" />\n  <TextField inputSize={3} min={13} max={120} label=\"Age\" type=\"number\" mdxType=\"TextField\" />\n  <TextField inputSize={3} min={13} max={120} label=\"Age\" type=\"number\" variant=\"filled\" mdxType=\"TextField\" />\n    </Playground>\n    <p>{`👉 Refer to the MDN reference for the full list of supported attributes of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text\"\n      }}>{`text`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email\"\n      }}>{`email`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number\"\n      }}>{`number`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel\"\n      }}>{`tel`}</a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password\"\n      }}>{`password`}</a>{` input types.`}</p>\n    <h2 {...{\n      \"id\": \"invisible-label\"\n    }}>{`Invisible Label`}</h2>\n    <p>{`In some cases, it may be convenient to visually hide the field label. The label\nremains accessible to assistive technologies.`}</p>\n    <p>{`While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should `}<strong parentName=\"p\">{`provide another visual clue`}</strong>{` so users know what to fill into\nthe input.`}</p>\n    <Playground __position={7} __code={'<TextField\\n  label=\\\"User name\\\"\\n  isLabelVisible={false}\\n  placeholder=\\\"Eg. john@example.com\\\"\\n/>\\n<TextField\\n  label=\\\"User name\\\"\\n  isLabelVisible={false}\\n  variant=\\\"filled\\\"\\n  placeholder=\\\"Eg. john@example.com\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"User name\" isLabelVisible={false} placeholder=\"Eg. john@example.com\" mdxType=\"TextField\" />\n  <TextField label=\"User name\" isLabelVisible={false} variant=\"filled\" placeholder=\"Eg. john@example.com\" mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better — and that's why React UI\nsupports this kind of layout as well.`}</p>\n    <Playground __position={8} __code={'<TextField inputSize={3} label=\\\"Title\\\" layout=\\\"horizontal\\\" />\\n<TextField inputSize={3} label=\\\"Title\\\" layout=\\\"horizontal\\\" variant=\\\"filled\\\" />\\n<TextField label=\\\"First name\\\" layout=\\\"horizontal\\\" />\\n<TextField label=\\\"First name\\\" layout=\\\"horizontal\\\" variant=\\\"filled\\\" />\\n<TextField label=\\\"First name\\\" layout=\\\"horizontal\\\" fullWidth />\\n<TextField\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  variant=\\\"filled\\\"\\n  fullWidth\\n/>\\n<TextField\\n  isLabelVisible={false}\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  placeholder=\\\"First name\\\"\\n  fullWidth\\n/>\\n<TextField\\n  isLabelVisible={false}\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  placeholder=\\\"First name\\\"\\n  variant=\\\"filled\\\"\\n  fullWidth\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField inputSize={3} label=\"Title\" layout=\"horizontal\" mdxType=\"TextField\" />\n  <TextField inputSize={3} label=\"Title\" layout=\"horizontal\" variant=\"filled\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" variant=\"filled\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" fullWidth mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" variant=\"filled\" fullWidth mdxType=\"TextField\" />\n  <TextField isLabelVisible={false} label=\"First name\" layout=\"horizontal\" placeholder=\"First name\" fullWidth mdxType=\"TextField\" />\n  <TextField isLabelVisible={false} label=\"First name\" layout=\"horizontal\" placeholder=\"First name\" variant=\"filled\" fullWidth mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify how the input should be\nfilled.`}</p>\n    <Playground __position={9} __code={'<TextField\\n  label=\\\"First name\\\"\\n  helpText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n/>\\n<TextField\\n  label=\\\"First name\\\"\\n  variant=\\\"filled\\\"\\n  helpText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n/>\\n<TextField\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n/>\\n<TextField\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n  variant=\\\"filled\\\"\\n/>\\n<TextField\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n  fullWidth\\n/>\\n<TextField\\n  label=\\\"First name\\\"\\n  layout=\\\"horizontal\\\"\\n  variant=\\\"filled\\\"\\n  helpText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n  fullWidth\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"First name\" helpText=\"Choose one or more kinds of fruit to feel happy.\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" variant=\"filled\" helpText=\"Choose one or more kinds of fruit to feel happy.\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" helpText=\"Choose one or more kinds of fruit to feel happy.\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" helpText=\"Choose one or more kinds of fruit to feel happy.\" variant=\"filled\" mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" helpText=\"Choose one or more kinds of fruit to feel happy.\" fullWidth mdxType=\"TextField\" />\n  <TextField label=\"First name\" layout=\"horizontal\" variant=\"filled\" helpText=\"Choose one or more kinds of fruit to feel happy.\" fullWidth mdxType=\"TextField\" />\n    </Playground>\n    <p>{`Keep in mind that `}<strong parentName=\"p\">{`long help texts don't play well with small input sizes,`}</strong>{`\nespecially in vertical layout. To fix this at least for horizontal layout, help\ntext expands over the full field width when the desired input width (based on\n`}<inlineCode parentName=\"p\">{`inputSize`}</inlineCode>{` option) is 10 characters or smaller.`}</p>\n    <Playground __position={10} __code={'<TextField\\n  inputSize={3}\\n  label=\\\"Title\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"What academic degree do you hold?\\\"\\n/>\\n<TextField\\n  inputSize={3}\\n  label=\\\"Title\\\"\\n  layout=\\\"horizontal\\\"\\n  variant=\\\"filled\\\"\\n  helpText=\\\"What academic degree do you hold?\\\"\\n/>\\n<TextField\\n  label=\\\"Age\\\"\\n  layout=\\\"horizontal\\\"\\n  min={13}\\n  max={120}\\n  inputSize={3}\\n  type=\\\"number\\\"\\n  helpText=\\\"How old do you see yourself?\\\"\\n/>\\n<TextField\\n  label=\\\"Age\\\"\\n  layout=\\\"horizontal\\\"\\n  min={13}\\n  max={120}\\n  inputSize={3}\\n  variant=\\\"filled\\\"\\n  type=\\\"number\\\"\\n  helpText=\\\"How old do you see yourself?\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField inputSize={3} label=\"Title\" layout=\"horizontal\" helpText=\"What academic degree do you hold?\" mdxType=\"TextField\" />\n  <TextField inputSize={3} label=\"Title\" layout=\"horizontal\" variant=\"filled\" helpText=\"What academic degree do you hold?\" mdxType=\"TextField\" />\n  <TextField label=\"Age\" layout=\"horizontal\" min={13} max={120} inputSize={3} type=\"number\" helpText=\"How old do you see yourself?\" mdxType=\"TextField\" />\n  <TextField label=\"Age\" layout=\"horizontal\" min={13} max={120} inputSize={3} variant=\"filled\" type=\"number\" helpText=\"How old do you see yourself?\" mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide a validation message for states other than valid`}</strong>{` so\nusers know what happened and what action they should take or what options they\nhave.`}</p>\n    <Playground __position={11} __code={'<TextField\\n  label=\\\"User name\\\"\\n  validationState=\\\"valid\\\"\\n  validationText=\\\"Looks good!\\\"\\n  value=\\\"johnny1986\\\"\\n  required\\n/>\\n<TextField\\n  label=\\\"User name\\\"\\n  validationState=\\\"warning\\\"\\n  validationText=\\\"Account with this name already exists, pick a different one.\\\"\\n  value=\\\"joe\\\"\\n  required\\n/>\\n<TextField\\n  label=\\\"User name\\\"\\n  validationState=\\\"invalid\\\"\\n  validationText=\\\"Please enter a user name of your choice.\\\"\\n  required\\n/>\\n<TextField\\n  label=\\\"User name\\\"\\n  validationState=\\\"valid\\\"\\n  validationText=\\\"Looks good!\\\"\\n  variant=\\\"filled\\\"\\n  value=\\\"johnny1986\\\"\\n  required\\n/>\\n<TextField\\n  label=\\\"User name\\\"\\n  validationState=\\\"warning\\\"\\n  validationText=\\\"Account with this name already exists, pick a different one.\\\"\\n  variant=\\\"filled\\\"\\n  value=\\\"joe\\\"\\n  required\\n/>\\n<TextField\\n  label=\\\"User name\\\"\\n  validationState=\\\"invalid\\\"\\n  validationText=\\\"Please enter a user name of your choice.\\\"\\n  variant=\\\"filled\\\"\\n  required\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"User name\" validationState=\"valid\" validationText=\"Looks good!\" value=\"johnny1986\" required mdxType=\"TextField\" />\n  <TextField label=\"User name\" validationState=\"warning\" validationText=\"Account with this name already exists, pick a different one.\" value=\"joe\" required mdxType=\"TextField\" />\n  <TextField label=\"User name\" validationState=\"invalid\" validationText=\"Please enter a user name of your choice.\" required mdxType=\"TextField\" />\n  <TextField label=\"User name\" validationState=\"valid\" validationText=\"Looks good!\" variant=\"filled\" value=\"johnny1986\" required mdxType=\"TextField\" />\n  <TextField label=\"User name\" validationState=\"warning\" validationText=\"Account with this name already exists, pick a different one.\" variant=\"filled\" value=\"joe\" required mdxType=\"TextField\" />\n  <TextField label=\"User name\" validationState=\"invalid\" validationText=\"Please enter a user name of your choice.\" variant=\"filled\" required mdxType=\"TextField\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`It's possible to disable the whole input.`}</p>\n    <Playground __position={12} __code={'<TextField label=\\\"First name\\\" value=\\\"John\\\" disabled />\\n<TextField label=\\\"First name\\\" variant=\\\"filled\\\" value=\\\"John\\\" disabled />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextField label=\"First name\" value=\"John\" disabled mdxType=\"TextField\" />\n  <TextField label=\"First name\" variant=\"filled\" value=\"John\" disabled mdxType=\"TextField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`In addition to the options below, you can specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or\nany custom HTML attributes that do not interfere with the API, and they will be\npassed to the `}<inlineCode parentName=\"p\">{`<input>`}</inlineCode>{` HTML element. This enables making the component\ninteractive and helps improve its `}<a parentName=\"p\" {...{\n        \"href\": \"#forwarding-html-attributes\"\n      }}>{`accessibility`}</a>{`.`}</p>\n    <Props table of={TextField} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <p>{`Head to `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/forms\"\n      }}>{`Forms Theming`}</a>{` to see shared form theming options.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}