{"version":3,"sources":["webpack:///../src/docs/customize/theming/overview.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kQAQO,MAAMA,EAAe,Q,yNAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,WADR,WAGA,4MAGA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,iBAAqC,sBAAQA,WAAW,KAAnB,uBAArC,wHAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gEAAoF,sBAAQA,WAAW,KAAnB,uCAApF,OAIJ,kBACE,GAAM,mBADR,mBAGA,qKAC2D,0BAAYA,WAAW,KAAvB,QAD3D,0EAGA,gCAAe,0BAAYA,WAAW,KAAvB,cAAf,KACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,0fAgBL,kJAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,6MASL,qFACF,iBAAGA,WAAW,IACR,KAAQ,2EADd,iBADE,8CAKA,6CAA4B,sBAAQA,WAAW,KAAnB,+CAA5B,kCAEF,iBAAGA,WAAW,IACR,KAAQ,0DADd,uCAFE,kDAMA,kBACE,GAAM,kBADR,kBAGA,oEAAmD,sBAAQA,WAAW,KAAnB,yBAAnD,yKAGA,uFAAsE,sBAAQA,WAAW,KAAnB,sEAAtE,sKAIA,uGACF,sBAAQA,WAAW,KAAnB,oDADE,gB,uNAMJJ,EAAWK,gBAAiB","file":"component---src-docs-customize-theming-overview-mdx-d8770d06dc1ee953c1ca.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <p>{`From the very beginning, React UI has been designed with a great emphasis on\ncustomizability. We decided to leverage CSS custom properties for this feature\nfor two main reasons:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`We believe in `}<strong parentName=\"p\">{`power of native CSS`}</strong>{`. Preprocessors are still a thing, but\nit's not necessary to go as far as for CSS-in-JS to make a UI customizable.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Thanks to its JavaScript API, CSS custom properties are both `}<strong parentName=\"p\">{`readable and\nwritable from JS code`}</strong>{`.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"theming-options\"\n    }}>{`Theming Options`}</h2>\n    <p>{`CSS custom properties are used to define common visual properties like colors,\nfonts, borders, shadows, or spacing. They come prefixed with `}<inlineCode parentName=\"p\">{`rui-`}</inlineCode>{` so they\ndon't get in way of other custom properties in your project.`}</p>\n    <p>{`Example `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:root {\n  // Brand colors\n  --rui-color-primary: #00778b;\n  --rui-color-primary-light: #{lighten(#00778b, 70%)};\n  --rui-color-primary-dark: #{darken(#00778b, 4%)};\n  --rui-color-primary-darker: #{darken(#00778b, 8%)};\n  --rui-color-on-primary: #fff;\n  --rui-color-secondary: #fa4616;\n  --rui-color-secondary-light: #{lighten(#fa4616, 45%)};\n  --rui-color-secondary-dark: #{darken(#fa4616, 4%)};\n  --rui-color-secondary-darker: #{darken(#fa4616, 8%)};\n  --rui-color-on-secondary: #fff;\n}\n`}</code></pre>\n    <p>{`It is also possible to adjust some properties on individual components level,\npreferably by reusing the global settings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:root {\n  // Alerts: common properties\n  --rui-alert-border-width: var(--rui-border-width);\n  --rui-alert-border-radius: var(--rui-border-radius);\n  --rui-alert-padding: var(--rui-spacing-2);\n}\n`}</code></pre>\n    <p>{`You can adjust any of these options in your styles. See the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/theme.scss\"\n      }}>{`default theme`}</a>{`\nfor the full list of available settings.`}</p>\n    <p>{`Ô∏èüëâ Please note that `}<strong parentName=\"p\">{`breakpoint values are exported as read-only`}</strong>{` since CSS\ncustom properties\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/css-variables-1/#using-variables\"\n      }}>{`cannot be used within media queries`}</a>{`\n(because media query is not a CSS property).`}</p>\n    <h2 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best Practices`}</h2>\n    <p>{`It's a good idea to start with changing the `}<strong parentName=\"p\">{`global settings first`}</strong>{`. Widely\nreused settings such as colors, typography, borders or spacing values should be\nadjusted first because they define the basic appearance of all components.`}</p>\n    <p>{`Having finished the customization at the global level, you can `}<strong parentName=\"p\">{`then proceed to\ncustomize the appearance of individual components`}</strong>{` ‚Äî if necessary at all. Even\nthen you should also reuse existing global settings as much as possible to\nensure that your UI is consistent and works as a system.`}</p>\n    <p>{`For the same reason, if you have any custom components in your UI, you should\n`}<strong parentName=\"p\">{`reuse the global theming options in your own CSS`}</strong>{`, too.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}