{"version":3,"sources":["webpack:///../src/lib/components/ui/SelectField/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","SelectField","id","label","options","value","variant","size","fullWidth","isLabelVisible","layout","helperText","validationState","changeHandler","required","disabled","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-select-field-readme-mdx-5c6e98b93108b6c0b9a1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { SelectField } from './SelectField';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"selectfield\"\n    }}>{`SelectField`}</h1>\n    <p>{`SelectField allows users to select one option from a set.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To use the SelectField component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { SelectField } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<SelectField\\n  id=\\\"my-select-field\\\"\\n  label=\\\"Your favourite fruit\\\"\\n  options={[\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <SelectField id=\"my-select-field\" label=\"Your favourite fruit\" options={[{\n        label: 'Apple',\n        value: 'apple'\n      }, {\n        label: 'Banana',\n        value: 'banana'\n      }, {\n        label: 'Grapefruit',\n        value: 'grapefruit'\n      }]} mdxType=\"SelectField\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use SelectField for `}<strong parentName=\"p\">{`many options`}</strong>{`. For sets of just a few options\n(say 3 at maximum) consider using the `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/radio\"\n          }}>{`Radio`}</a>{` component.\nThis will help keep your UI clean and uncluttered and prevent your users from\nbeing overwhelmed by too many options.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Don't use for boolean`}</strong>{` (true/false) selection or to toggle things on and\noff. `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/checkbox-field\"\n          }}>{`CheckboxField`}</a>{` and\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/toggle\"\n          }}>{`Toggle`}</a>{` are more suitable for such cases.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`short and descriptive labels`}</strong>{`, ideally nouns rather than seemingly\npolite phrases like `}<em parentName=\"p\">{`Please select your favourite fruit`}</em>{`. Short labels will\nhelp your users accomplish their task faster.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the SelectField's label invisible when there is `}<strong parentName=\"p\">{`another visual\nclue`}</strong>{` to guide users through filling the input. Using the first option as\nlabel is not recommended either — it disappears once user makes their choice.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`In case of a large amount of options, consider `}<strong parentName=\"p\">{`grouping related items\ntogether`}</strong>{` by nesting them (implements the `}<inlineCode parentName=\"p\">{`optgroup`}</inlineCode>{` HTML element).`}</p>\n      </li>\n    </ul>\n    <p>{`👉 We use the `}<strong parentName=\"p\">{`native `}<inlineCode parentName=\"strong\">{`select`}</inlineCode></strong>{` HTML element to improve user experience on\nmobile devices by using the native select of the platform.`}</p>\n    <h2 {...{\n      \"id\": \"design-variants\"\n    }}>{`Design Variants`}</h2>\n    <p>{`To satisfy the design requirements of your project, all input fields in React UI\ncome in two design variants to choose from: outline and filled. Both can be\nfurther `}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/theming\"\n      }}>{`customized`}</a>{` with CSS custom properties.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline\" label=\"Your favourite fruit\" options={options} mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled\" label=\"Your favourite fruit\" options={options} variant=\"filled\" mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Aside from the default (medium) size, two additional sizes are available: small\nand large.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-small\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        size=\\\"small\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-medium\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-large\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        size=\\\"large\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-small\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        size=\\\"small\\\"\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-medium\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-large\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        size=\\\"large\\\"\\n        variant=\\\"filled\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-small\" label=\"Your favourite fruit\" options={options} size=\"small\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-medium\" label=\"Your favourite fruit\" options={options} mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-large\" label=\"Your favourite fruit\" options={options} size=\"large\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-small\" label=\"Your favourite fruit\" options={options} size=\"small\" variant=\"filled\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-medium\" label=\"Your favourite fruit\" options={options} variant=\"filled\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-large\" label=\"Your favourite fruit\" options={options} size=\"large\" variant=\"filled\" mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <p>{`Full-width fields span the full width of a parent:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-full-width\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        fullWidth\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-full-width\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n        fullWidth\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-full-width\" label=\"Your favourite fruit\" options={options} fullWidth mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-full-width\" label=\"Your favourite fruit\" options={options} variant=\"filled\" fullWidth mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"invisible-label\"\n    }}>{`Invisible Label`}</h2>\n    <p>{`While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should `}<strong parentName=\"p\">{`provide another visual clue`}</strong>{` so users know what to fill into\nthe input.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-hidden-label\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        isLabelVisible={false}\\n        options={options}\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-hidden-label\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        isLabelVisible={false}\\n        options={options}\\n        variant=\\\"filled\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-hidden-label\" label=\"Your favourite fruit\" isLabelVisible={false} options={options} mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-hidden-label\" label=\"Your favourite fruit\" isLabelVisible={false} options={options} variant=\"filled\" mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better — and that's why React UI\nsupports this kind of layout as well.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-horizontal\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-horizontal\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-horizontal-full-width\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        fullWidth\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-horizontal-full-width\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n        fullWidth\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-horizontal-full-width-invisible-label\\\"\\n        isLabelVisible={false}\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        fullWidth\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-horizontal-full-width-invisible-label\\\"\\n        isLabelVisible={false}\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n        fullWidth\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-horizontal\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-horizontal\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} variant=\"filled\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-horizontal-full-width\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} fullWidth mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-horizontal-full-width\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} variant=\"filled\" fullWidth mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-horizontal-full-width-invisible-label\" isLabelVisible={false} label=\"Your favourite fruit\" layout=\"horizontal\" options={options} fullWidth mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-horizontal-full-width-invisible-label\" isLabelVisible={false} label=\"Your favourite fruit\" layout=\"horizontal\" options={options} variant=\"filled\" fullWidth mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify how the input should be\nfilled.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-help-text\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        helperText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-help-text\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n        helperText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-help-text-horizontal\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        helperText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-help-text-horizontal\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        helperText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-help-text-horizontal-full-width\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        helperText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n        fullWidth\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-help-text-horizontal-full-width\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        layout=\\\"horizontal\\\"\\n        options={options}\\n        variant=\\\"filled\\\"\\n        helperText=\\\"Choose one or more kinds of fruit to feel happy.\\\"\\n        fullWidth\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-help-text\" label=\"Your favourite fruit\" options={options} helperText=\"Choose one or more kinds of fruit to feel happy.\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-help-text\" label=\"Your favourite fruit\" options={options} variant=\"filled\" helperText=\"Choose one or more kinds of fruit to feel happy.\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-help-text-horizontal\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} helperText=\"Choose one or more kinds of fruit to feel happy.\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-help-text-horizontal\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} helperText=\"Choose one or more kinds of fruit to feel happy.\" variant=\"filled\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-help-text-horizontal-full-width\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} helperText=\"Choose one or more kinds of fruit to feel happy.\" fullWidth mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-help-text-horizontal-full-width\" label=\"Your favourite fruit\" layout=\"horizontal\" options={options} variant=\"filled\" helperText=\"Choose one or more kinds of fruit to feel happy.\" fullWidth mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide a help text for states other than valid`}</strong>{` so users know\nwhat happened and what action they should take or what options they have.`}</p>\n    <Playground __position={7} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-success\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        validationState=\\\"valid\\\"\\n        value=\\\"apple\\\"\\n        helperText=\\\"Great, they\\'re in stock!\\\"\\n        changeHandler={() => {}}\\n        required\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-warning\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        validationState=\\\"warning\\\"\\n        value=\\\"grapefruit\\\"\\n        helperText=\\\"Oh, really?\\\"\\n        changeHandler={() => {}}\\n        required\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-error\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        validationState=\\\"invalid\\\"\\n        helperText=\\\"You must select at least one kind of fruit.\\\"\\n        required\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-success\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        validationState=\\\"valid\\\"\\n        value=\\\"apple\\\"\\n        variant=\\\"filled\\\"\\n        helperText=\\\"Great, they\\'re in stock!\\\"\\n        changeHandler={() => {}}\\n        required\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-warning\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        validationState=\\\"warning\\\"\\n        value=\\\"grapefruit\\\"\\n        variant=\\\"filled\\\"\\n        helperText=\\\"Oh, really?\\\"\\n        changeHandler={() => {}}\\n        required\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-error\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        validationState=\\\"invalid\\\"\\n        variant=\\\"filled\\\"\\n        helperText=\\\"You must select at least one kind of fruit.\\\"\\n        required\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-success\" label=\"Your favourite fruit\" options={options} validationState=\"valid\" value=\"apple\" helperText=\"Great, they're in stock!\" changeHandler={() => {}} required mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-warning\" label=\"Your favourite fruit\" options={options} validationState=\"warning\" value=\"grapefruit\" helperText=\"Oh, really?\" changeHandler={() => {}} required mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-error\" label=\"Your favourite fruit\" options={options} validationState=\"invalid\" helperText=\"You must select at least one kind of fruit.\" required mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-success\" label=\"Your favourite fruit\" options={options} validationState=\"valid\" value=\"apple\" variant=\"filled\" helperText=\"Great, they're in stock!\" changeHandler={() => {}} required mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-warning\" label=\"Your favourite fruit\" options={options} validationState=\"warning\" value=\"grapefruit\" variant=\"filled\" helperText=\"Oh, really?\" changeHandler={() => {}} required mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-error\" label=\"Your favourite fruit\" options={options} validationState=\"invalid\" variant=\"filled\" helperText=\"You must select at least one kind of fruit.\" required mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`It's possible to disable just some options or the whole input.`}</p>\n    <Playground __position={8} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      disabled: true,\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <SelectField\\n        id=\\\"my-select-field-outline-disabled-option\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        value=\\\"apple\\\"\\n        changeHandler={() => {}}\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-disabled-option\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        value=\\\"apple\\\"\\n        changeHandler={() => {}}\\n        variant=\\\"filled\\\"\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-outline-disabled\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        value=\\\"apple\\\"\\n        changeHandler={() => {}}\\n        disabled\\n      />\\n      <SelectField\\n        id=\\\"my-select-field-filled-disabled\\\"\\n        label=\\\"Your favourite fruit\\\"\\n        options={options}\\n        value=\\\"apple\\\"\\n        changeHandler={() => {}}\\n        variant=\\\"filled\\\"\\n        disabled\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      SelectField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          disabled: true,\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <SelectField id=\"my-select-field-outline-disabled-option\" label=\"Your favourite fruit\" options={options} value=\"apple\" changeHandler={() => {}} mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-disabled-option\" label=\"Your favourite fruit\" options={options} value=\"apple\" changeHandler={() => {}} variant=\"filled\" mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-outline-disabled\" label=\"Your favourite fruit\" options={options} value=\"apple\" changeHandler={() => {}} disabled mdxType=\"SelectField\" />\n        <SelectField id=\"my-select-field-filled-disabled\" label=\"Your favourite fruit\" options={options} value=\"apple\" changeHandler={() => {}} variant=\"filled\" disabled mdxType=\"SelectField\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={SelectField} mdxType=\"Props\" />\n    <hr></hr>\n    <p>{`Next: `}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/table\"\n      }}>{`Table →`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}