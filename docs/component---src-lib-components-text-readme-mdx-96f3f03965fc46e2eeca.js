(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{ehlt:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return u})),t.d(n,"default",(function(){return h}));var a=t("Fcif"),o=t("dV/x"),l=t("mXGw"),r=t("/FXl"),i=t("TjRS"),s=t("ZFoC"),p=t("s0IP"),b=t("nBnF");t("aD51");const c=["components"],u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!Object.prototype.hasOwnProperty.call(u,"__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/Text/README.mdx"}});const d={_frontmatter:u},m=i.a;function h(e){let{components:n}=e,t=Object(o.a)(e,c);return Object(r.b)(m,Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"text"},"Text"),Object(r.b)("p",null,"Text is a tiny component to control wrapping of text content."),Object(r.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(r.b)("p",null,"To implement the Text component, you need to import it first:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { Text } from '@react-ui-org/react-ui';\n")),Object(r.b)("p",null,"And use it:"),Object(r.b)(s.c,{__position:0,__code:"<Placeholder>\n  <Text lines={3}>\n    Hello! This text will be clamped to three lines. Lorem ipsum dolor sit\n    amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.\n    Aenean massa. Cum sociis natoque penatibus et magnis dis parturient\n    montes, nascetur ridiculus mus. Donec quam felis, ultricies nec,\n    pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec\n    pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim\n    justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n  </Text>\n</Placeholder>",__scope:{props:t,DefaultLayout:i.a,Playground:s.c,Props:s.d,Placeholder:p.a,Button:b.c,ButtonGroup:b.d,Text:b.D,TextField:b.F,Toolbar:b.I,ToolbarGroup:b.J,ToolbarItem:b.K,DefaultLayout:i.a,_frontmatter:u},mdxType:"Playground"},Object(r.b)(p.a,{mdxType:"Placeholder"},Object(r.b)(b.D,{lines:3,mdxType:"Text"},"Hello! This text will be clamped to three lines. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo."))),Object(r.b)("p",null,"See ",Object(r.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(r.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Use Text anytime you need to ",Object(r.b)("strong",{parentName:"p"},"control potentially long strings")," and\nprevent them from overflowing or breaking their container.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"By default, Text doesn't alter rendering of its content.")," Use available\noptions to achieve the result you need.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Text renders as ",Object(r.b)("inlineCode",{parentName:"strong"},"<span>")," by default,")," so it can only contain\ninline-level HTML elements (like ",Object(r.b)("inlineCode",{parentName:"p"},"<strong>")," or ",Object(r.b)("inlineCode",{parentName:"p"},"<a>"),", but not ",Object(r.b)("inlineCode",{parentName:"p"},"<div>"),", ",Object(r.b)("inlineCode",{parentName:"p"},"<p>"),",\nor ",Object(r.b)("inlineCode",{parentName:"p"},"<h2>"),"). If necessary, use the ",Object(r.b)("inlineCode",{parentName:"p"},"blockLevel")," option to render as ",Object(r.b)("inlineCode",{parentName:"p"},"<div>")," to\nkeep your HTML valid.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Use Text for short pieces of text content.")," Including a couple of HTML tags\nshouldn't cause any harm, but keep in mind Text is not intended to wrap\ncomplex HTML structures or even React components."))),Object(r.b)("h2",{id:"number-of-lines"},"Number of Lines"),Object(r.b)("p",null,"Specify how many ",Object(r.b)("inlineCode",{parentName:"p"},"lines")," of text should be visible if content doesn't fit its\ncontainer. If the number of lines is exceeded, the content is truncated and\nappended by an ellipsis (",Object(r.b)("inlineCode",{parentName:"p"},"â€¦"),")."),Object(r.b)(s.c,{__position:1,__code:'() => {\n  const [lines, setLines] = React.useState(1)\n  return (\n    <div>\n      <Toolbar align="baseline">\n        <ToolbarItem>\n          <TextField\n            label="Number of lines"\n            min={1}\n            max={100}\n            onChange={e => setLines(Number(e.target.value))}\n            type="number"\n            value={lines}\n          />\n        </ToolbarItem>\n      </Toolbar>\n      <Placeholder>\n        <Text lines={lines}>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa. Cum sociis natoque\n          penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n          Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\n          Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n          aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\n          imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\n          mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum\n          semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula,\n          porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n          ante, dapibus in, viverra quis, feugiat a, tellus.\n        </Text>\n      </Placeholder>\n    </div>\n  )\n}',__scope:{props:t,DefaultLayout:i.a,Playground:s.c,Props:s.d,Placeholder:p.a,Button:b.c,ButtonGroup:b.d,Text:b.D,TextField:b.F,Toolbar:b.I,ToolbarGroup:b.J,ToolbarItem:b.K,DefaultLayout:i.a,_frontmatter:u},mdxType:"Playground"},()=>{const[e,n]=l.useState(1);return Object(r.b)("div",null,Object(r.b)(b.I,{align:"baseline",mdxType:"Toolbar"},Object(r.b)(b.K,{mdxType:"ToolbarItem"},Object(r.b)(b.F,{label:"Number of lines",min:1,max:100,onChange:e=>n(Number(e.target.value)),type:"number",value:e,mdxType:"TextField"}))),Object(r.b)(p.a,{mdxType:"Placeholder"},Object(r.b)(b.D,{lines:e,mdxType:"Text"},"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.")))}),Object(r.b)("h2",{id:"word-wrapping"},"Word Wrapping"),Object(r.b)("p",null,"There are three possible ways of controlling wrapping of long words if they do\nnot fit on a line. Set ",Object(r.b)("inlineCode",{parentName:"p"},"wordWrapping")," to one of the following values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"normal"),": Do not force any wrapping (default behavior).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"long-words"),": To prevent overflow, an otherwise unbreakable string of\ncharacters â€” like a long word or URL â€” may be broken at any point if there are\nno otherwise-acceptable break points in the line.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"anywhere"),": Create a break at the exact place where text would otherwise\noverflow its container (even if putting an entire word on its own line would\nnegate the need for a break)."))),Object(r.b)("p",null,"ðŸ“– ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Text/Wrapping_Text"},"Read more about wrapping and breaking text at MDN.")),Object(r.b)("h3",{id:"hyphens"},"Hyphens"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"hyphens")," option specifies how words should be hyphenated when text wraps\nacross multiple lines. It can prevent hyphenation entirely, hyphenate at\nmanually-specified points within the text, or let the browser automatically\ninsert hyphens where appropriate."),Object(r.b)("p",null,"ðŸ‘‰ The ",Object(r.b)("inlineCode",{parentName:"p"},"auto")," setting's behavior depends on the language being properly tagged\nto select the appropriate hyphenation rules. ",Object(r.b)("strong",{parentName:"p"},"You must specify a language"),"\nusing the ",Object(r.b)("inlineCode",{parentName:"p"},"lang")," HTML attribute (e.g.\n",Object(r.b)("a",{parentName:"p",href:"/getting-started/usage#full-example"},"on ",Object(r.b)("inlineCode",{parentName:"a"},"<html>")," tag"),") to guarantee that\nautomatic hyphenation is applied in that language."),Object(r.b)("p",null,"ðŸ‘‰ ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens#suggesting_line_break_opportunities"},"Manually suggested line break opportunities"),"\nwill override automatic break point selection in ",Object(r.b)("inlineCode",{parentName:"p"},"auto")," mode when present."),Object(r.b)("p",null,"ðŸ“– ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens"},"Read more about ",Object(r.b)("inlineCode",{parentName:"a"},"hyphens")," CSS property at MDN.")),Object(r.b)(s.c,{__position:2,__code:"() => {\n  const [hyphens, setHyphens] = React.useState('none')\n  const [wordWrapping, setWordWrapping] = React.useState('normal')\n  return (\n    <div>\n      <Toolbar>\n        <ToolbarGroup align=\"baseline\">\n          <ToolbarItem>\n            <span id=\"word-wrapping-options-label\">Word wrapping:</span>\n          </ToolbarItem>\n          <ToolbarItem>\n            <ButtonGroup\n              aria-labelledby=\"word-wrapping-options-label\"\n              priority=\"outline\"\n            >\n              <Button\n                aria-pressed={wordWrapping === 'normal'}\n                color={wordWrapping === 'normal' ? 'selected' : 'secondary'}\n                label=\"normal\"\n                onClick={() => setWordWrapping('normal')}\n              />\n              <Button\n                aria-pressed={wordWrapping === 'long-words'}\n                color={\n                  wordWrapping === 'long-words' ? 'selected' : 'secondary'\n                }\n                label=\"long-words\"\n                onClick={() => setWordWrapping('long-words')}\n              />\n              <Button\n                aria-pressed={wordWrapping === 'anywhere'}\n                color={wordWrapping === 'anywhere' ? 'selected' : 'secondary'}\n                label=\"anywhere\"\n                onClick={() => setWordWrapping('anywhere')}\n              />\n            </ButtonGroup>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup align=\"baseline\">\n          <ToolbarItem>\n            <span id=\"hyphens-options-label\">Hyphens:</span>\n          </ToolbarItem>\n          <ToolbarItem>\n            <ButtonGroup\n              aria-labelledby=\"hyphens-options-label\"\n              priority=\"outline\"\n            >\n              <Button\n                aria-pressed={hyphens === 'none'}\n                color={hyphens === 'none' ? 'selected' : 'secondary'}\n                label=\"none\"\n                onClick={() => setHyphens('none')}\n              />\n              <Button\n                aria-pressed={hyphens === 'auto'}\n                color={hyphens === 'auto' ? 'selected' : 'secondary'}\n                label=\"auto\"\n                onClick={() => setHyphens('auto')}\n              />\n              <Button\n                aria-pressed={hyphens === 'manual'}\n                color={hyphens === 'manual' ? 'selected' : 'secondary'}\n                label=\"manual\"\n                onClick={() => setHyphens('manual')}\n              />\n            </ButtonGroup>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      <Placeholder width=\"11em\" bordered>\n        <Text hyphens={hyphens} wordWrapping={wordWrapping}>\n          {hyphens === 'manual' ? (\n            <>LongWord&shy;ThatHasManual&shy;Breaking&shy;Possibilities</>\n          ) : (\n            <>LongWordThatHasNoBreakingPossibilities</>\n          )}{' '}\n          and a couple of ordinary words that are nice and well behaved.\n        </Text>\n      </Placeholder>\n    </div>\n  )\n}",__scope:{props:t,DefaultLayout:i.a,Playground:s.c,Props:s.d,Placeholder:p.a,Button:b.c,ButtonGroup:b.d,Text:b.D,TextField:b.F,Toolbar:b.I,ToolbarGroup:b.J,ToolbarItem:b.K,DefaultLayout:i.a,_frontmatter:u},mdxType:"Playground"},()=>{const[e,n]=l.useState("none"),[t,a]=l.useState("normal");return Object(r.b)("div",null,Object(r.b)(b.I,{mdxType:"Toolbar"},Object(r.b)(b.J,{align:"baseline",mdxType:"ToolbarGroup"},Object(r.b)(b.K,{mdxType:"ToolbarItem"},Object(r.b)("span",{id:"word-wrapping-options-label"},"Word wrapping:")),Object(r.b)(b.K,{mdxType:"ToolbarItem"},Object(r.b)(b.d,{"aria-labelledby":"word-wrapping-options-label",priority:"outline",mdxType:"ButtonGroup"},Object(r.b)(b.c,{"aria-pressed":"normal"===t,color:"normal"===t?"selected":"secondary",label:"normal",onClick:()=>a("normal"),mdxType:"Button"}),Object(r.b)(b.c,{"aria-pressed":"long-words"===t,color:"long-words"===t?"selected":"secondary",label:"long-words",onClick:()=>a("long-words"),mdxType:"Button"}),Object(r.b)(b.c,{"aria-pressed":"anywhere"===t,color:"anywhere"===t?"selected":"secondary",label:"anywhere",onClick:()=>a("anywhere"),mdxType:"Button"})))),Object(r.b)(b.J,{align:"baseline",mdxType:"ToolbarGroup"},Object(r.b)(b.K,{mdxType:"ToolbarItem"},Object(r.b)("span",{id:"hyphens-options-label"},"Hyphens:")),Object(r.b)(b.K,{mdxType:"ToolbarItem"},Object(r.b)(b.d,{"aria-labelledby":"hyphens-options-label",priority:"outline",mdxType:"ButtonGroup"},Object(r.b)(b.c,{"aria-pressed":"none"===e,color:"none"===e?"selected":"secondary",label:"none",onClick:()=>n("none"),mdxType:"Button"}),Object(r.b)(b.c,{"aria-pressed":"auto"===e,color:"auto"===e?"selected":"secondary",label:"auto",onClick:()=>n("auto"),mdxType:"Button"}),Object(r.b)(b.c,{"aria-pressed":"manual"===e,color:"manual"===e?"selected":"secondary",label:"manual",onClick:()=>n("manual"),mdxType:"Button"}))))),Object(r.b)(p.a,{width:"11em",bordered:!0,mdxType:"Placeholder"},Object(r.b)(b.D,{hyphens:e,wordWrapping:t,mdxType:"Text"},"manual"===e?Object(r.b)(l.Fragment,null,"LongWordÂ­ThatHasManualÂ­BreakingÂ­Possibilities"):Object(r.b)(l.Fragment,null,"LongWordThatHasNoBreakingPossibilities")," ","and a couple of ordinary words that are nice and well behaved.")))}),Object(r.b)("h2",{id:"forwarding-html-attributes"},"Forwarding HTML Attributes"),Object(r.b)("p",null,"In addition to the options below in the ",Object(r.b)("a",{parentName:"p",href:"#api"},"component's API")," section, you\ncan specify ",Object(r.b)("a",{parentName:"p",href:"https://reactjs.org/docs/events.html"},"React synthetic events")," or ",Object(r.b)("strong",{parentName:"p"},"any HTML attribute you like.")," All\nattributes that don't interfere with the API are forwarded either to the\n",Object(r.b)("inlineCode",{parentName:"p"},"<span>")," or to the ",Object(r.b)("inlineCode",{parentName:"p"},"<div>")," HTML element in case that ",Object(r.b)("inlineCode",{parentName:"p"},"blockLevel")," is set to\n",Object(r.b)("inlineCode",{parentName:"p"},"true"),". This enables making the component interactive and helps to improve its\naccessibility."),Object(r.b)("p",null,"ðŸ‘‰ Refer to the MDN reference for the full list of supported attributes of the\n",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span#attributes"},"span")," and ",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div#attributes"},"div")," element."),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)(s.d,{table:!0,of:b.D,mdxType:"Props"}))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!Object.prototype.hasOwnProperty.call(h,"__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/Text/README.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-text-readme-mdx-96f3f03965fc46e2eeca.js.map