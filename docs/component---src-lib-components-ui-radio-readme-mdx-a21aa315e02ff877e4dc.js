(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{T9wA:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return p})),t.d(a,"default",(function(){return c}));var n=t("Fcif"),l=t("dV/x"),o=t("mXGw"),i=t("/FXl"),r=t("TjRS"),u=t("ZFoC"),s=t("hDax");t("aD51");const p={};void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/ui/Radio/README.mdx"}});const b={_frontmatter:p},d=r.a;function c(e){let{components:a}=e,t=Object(l.a)(e,["components"]);return Object(i.b)(d,Object(n.a)({},b,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"radio"},"Radio"),Object(i.b)("p",null,"Radio allows users to select one option from a set."),Object(i.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(i.b)("p",null,"To implement the Radio component, you need to import it first:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { Radio } from '@react-ui-org/react-ui';\n")),Object(i.b)("p",null,"And use it:"),Object(i.b)(u.c,{__position:0,__code:"() => {\n  const [fruit, setFruit] = React.useState('apple')\n  return (\n    <Radio\n      changeHandler={e => setFruit(e.target.value)}\n      id=\"my-radio\"\n      label=\"Your favourite fruit\"\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n    />\n  )\n}",__scope:{props:t,DefaultLayout:r.a,Playground:u.c,Props:u.d,Radio:s.a,DefaultLayout:r.a,_frontmatter:p},mdxType:"Playground"},()=>{const[e,a]=o.useState("apple");return Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),id:"my-radio",label:"Your favourite fruit",options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],value:e,mdxType:"Radio"})}),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(i.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use Radio for ",Object(i.b)("strong",{parentName:"p"},"just a few options"),". For larger sets of many options (say 4\nand more) consider using the ",Object(i.b)("a",{parentName:"p",href:"/components/ui/select-field"},"SelectField"),"\ncomponent. This will help keep your UI clean and uncluttered and prevent your\nusers from being overwhelmed by too many options.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Don't use for boolean")," (true/false) selection or to toggle things on and\noff. ",Object(i.b)("a",{parentName:"p",href:"/components/ui/checkbox-field"},"CheckboxField")," and\n",Object(i.b)("a",{parentName:"p",href:"/components/ui/toggle"},"Toggle")," are more suitable for such cases.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use ",Object(i.b)("strong",{parentName:"p"},"short and descriptive labels"),", ideally nouns rather than seemingly\npolite phrases like ",Object(i.b)("em",{parentName:"p"},"Please select your favourite fruit"),". Short labels will\nhelp your users accomplish their task faster.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Only make the Radio's label invisible when there is ",Object(i.b)("strong",{parentName:"p"},"another visual\nclue")," to guide users through filling the input.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"When a short label is not enough, use ",Object(i.b)("strong",{parentName:"p"},"help texts to guide users")," before\nthey enter anything.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use ",Object(i.b)("strong",{parentName:"p"},"clear, calm error messages")," when there's a problem with what they\nentered."))),Object(i.b)("p",null,"ðŸ“– ",Object(i.b)("a",{parentName:"p",href:"https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/"},"Read more about checkboxes and radios at Nielsen Norman Group.")),Object(i.b)("h2",{id:"invisible-label"},"Invisible Label"),Object(i.b)("p",null,"While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should ",Object(i.b)("strong",{parentName:"p"},"provide another visual clue")," so users know what to fill into\nthe input."),Object(i.b)(u.c,{__position:1,__code:"() => {\n  const [frequency, setFrequency] = React.useState('weekly')\n  return (\n    <Radio\n      changeHandler={e => setFrequency(e.target.value)}\n      id=\"my-radio-hidden-label\"\n      isLabelVisible={false}\n      label=\"Newsletter frequency\"\n      options={[\n        {\n          label: 'I want to subscribe to the weekly newsletter',\n          value: 'weekly',\n        },\n        {\n          label: 'I want to subscribe to the monthly newsletter',\n          value: 'monthly',\n        },\n        {\n          label: \"I don't wish to receive anything\",\n          value: 'never',\n        },\n      ]}\n      value={frequency}\n    />\n  )\n}",__scope:{props:t,DefaultLayout:r.a,Playground:u.c,Props:u.d,Radio:s.a,DefaultLayout:r.a,_frontmatter:p},mdxType:"Playground"},()=>{const[e,a]=o.useState("weekly");return Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),id:"my-radio-hidden-label",isLabelVisible:!1,label:"Newsletter frequency",options:[{label:"I want to subscribe to the weekly newsletter",value:"weekly"},{label:"I want to subscribe to the monthly newsletter",value:"monthly"},{label:"I don't wish to receive anything",value:"never"}],value:e,mdxType:"Radio"})}),Object(i.b)("h2",{id:"help-text"},"Help Text"),Object(i.b)("p",null,"You may provide an additional help text to clarify how the input should be\nfilled."),Object(i.b)(u.c,{__position:2,__code:"() => {\n  const [fruit, setFruit] = React.useState('apple')\n  return (\n    <Radio\n      changeHandler={e => setFruit(e.target.value)}\n      helpText=\"What do you prefer?\"\n      id=\"my-radio-help-text\"\n      label=\"Your favourite fruit\"\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n    />\n  )\n}",__scope:{props:t,DefaultLayout:r.a,Playground:u.c,Props:u.d,Radio:s.a,DefaultLayout:r.a,_frontmatter:p},mdxType:"Playground"},()=>{const[e,a]=o.useState("apple");return Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),helpText:"What do you prefer?",id:"my-radio-help-text",label:"Your favourite fruit",options:[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}],value:e,mdxType:"Radio"})}),Object(i.b)("h2",{id:"states"},"States"),Object(i.b)("h3",{id:"validation-states"},"Validation States"),Object(i.b)("p",null,"Validation states visually present the result of validation of the input. You\nshould always ",Object(i.b)("strong",{parentName:"p"},"provide a validation message for states other than valid")," so\nusers know what happened and what action they should take or what options they\nhave."),Object(i.b)(u.c,{__position:3,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <Radio\n        changeHandler={e => setFruit(e.target.value)}\n        id="my-radio-success"\n        label="Your favourite fruit"\n        options={options}\n        required\n        validationState="valid"\n        validationText="Great, they\'re in stock!"\n        value={fruit}\n      />\n      <Radio\n        changeHandler={e => setFruit(e.target.value)}\n        id="my-radio-warning"\n        label="Your favourite fruit"\n        options={options}\n        required\n        validationState="warning"\n        validationText="Oh, really?"\n        value={fruit}\n      />\n      <Radio\n        changeHandler={e => setFruit(e.target.value)}\n        id="my-radio-error"\n        label="Your favourite fruit"\n        options={options}\n        required\n        validationState="invalid"\n        validationText="You must select one kind of fruit."\n        value={fruit}\n      />\n    </>\n  )\n}',__scope:{props:t,DefaultLayout:r.a,Playground:u.c,Props:u.d,Radio:s.a,DefaultLayout:r.a,_frontmatter:p},mdxType:"Playground"},()=>{const[e,a]=o.useState("apple"),t=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(i.b)(o.Fragment,null,Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),id:"my-radio-success",label:"Your favourite fruit",options:t,required:!0,validationState:"valid",validationText:"Great, they're in stock!",value:e,mdxType:"Radio"}),Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),id:"my-radio-warning",label:"Your favourite fruit",options:t,required:!0,validationState:"warning",validationText:"Oh, really?",value:e,mdxType:"Radio"}),Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),id:"my-radio-error",label:"Your favourite fruit",options:t,required:!0,validationState:"invalid",validationText:"You must select one kind of fruit.",value:e,mdxType:"Radio"}))}),Object(i.b)("h3",{id:"disabled-state"},"Disabled State"),Object(i.b)("p",null,"It's possible to disable just some options or the whole set."),Object(i.b)(u.c,{__position:4,__code:"() => {\n  const [fruit, setFruit] = React.useState('apple')\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      disabled: true,\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ]\n  return (\n    <>\n      <Radio\n        changeHandler={e => setFruit(e.target.value)}\n        id=\"my-radio-disabled-option\"\n        label=\"Your favourite fruit\"\n        options={options}\n        value={fruit}\n      />\n      <Radio\n        changeHandler={e => setFruit(e.target.value)}\n        disabled\n        id=\"my-radio-disabled\"\n        label=\"Your favourite fruit\"\n        options={options}\n        value=\"apple\"\n      />\n    </>\n  )\n}",__scope:{props:t,DefaultLayout:r.a,Playground:u.c,Props:u.d,Radio:s.a,DefaultLayout:r.a,_frontmatter:p},mdxType:"Playground"},()=>{const[e,a]=o.useState("apple"),t=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{disabled:!0,label:"Grapefruit",value:"grapefruit"}];return Object(i.b)(o.Fragment,null,Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),id:"my-radio-disabled-option",label:"Your favourite fruit",options:t,value:e,mdxType:"Radio"}),Object(i.b)(s.a,{changeHandler:e=>a(e.target.value),disabled:!0,id:"my-radio-disabled",label:"Your favourite fruit",options:t,value:"apple",mdxType:"Radio"}))}),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("p",null,"In addition to the options below, you can add any custom attributes that do not\ninterfere with the API, and they will be passed to the ",Object(i.b)("inlineCode",{parentName:"p"},"input")," HTML element.\nThis is useful mainly to improve component's accessibility."),Object(i.b)(u.d,{table:!0,of:s.a,mdxType:"Props"}))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/ui/Radio/README.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-ui-radio-readme-mdx-a21aa315e02ff877e4dc.js.map