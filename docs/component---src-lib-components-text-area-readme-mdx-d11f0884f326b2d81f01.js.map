{"version":3,"sources":["webpack:///../src/lib/components/TextArea/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","TextArea","label","variant","size","fullWidth","cols","rows","isLabelVisible","placeholder","layout","helpText","validationState","validationText","value","required","disabled","autoComplete","minLength","maxLength","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-text-area-readme-mdx-d11f0884f326b2d81f01.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { TextArea } from '../..';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textarea\"\n    }}>{`TextArea`}</h1>\n    <p>{`TextArea enables users to add longer text to a form.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the TextArea component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { TextArea } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<TextArea label=\\\"Your feedback\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" mdxType=\"TextArea\" />\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`short and descriptive labels`}</strong>{`, ideally nouns rather than seemingly\npolite phrases like `}<em parentName=\"p\">{`Please enter your message`}</em>{`. Short labels will help your\nusers accomplish their task faster.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the TextArea's label invisible when there is `}<strong parentName=\"p\">{`another visual\nclue`}</strong>{` to guide users through filling the input. Using the first option as\nlabel is not recommended either — it disappears once user makes their choice.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Optionally you can `}<strong parentName=\"p\">{`pre-fill your text fields with a placeholder`}</strong>{` to give\nusers an example of what they're expected to fill in. Just remember the\nplaceholder disappears once a value is entered so don't put anything important\nthere. Usually, en example value starting with “Eg.” works best.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered. Be positive and focus on solutions to make the error message helpful.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Ensure the height of a text area `}<strong parentName=\"p\">{`fits within mobile screen sizes.`}</strong></p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"design-variants\"\n    }}>{`Design Variants`}</h2>\n    <p>{`To satisfy the design requirements of your project, all input fields in React UI\ncome in `}<strong parentName=\"p\">{`two design variants`}</strong>{` to choose from: outline and filled. Both can be\nfurther `}<a parentName=\"p\" {...{\n        \"href\": \"#theming\"\n      }}>{`customized`}</a>{` with CSS custom properties.`}</p>\n    <Playground __position={1} __code={'<TextArea label=\\\"Your feedback\\\" />\\n<TextArea label=\\\"Your feedback\\\" variant=\\\"filled\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" variant=\"filled\" mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Aside from the default (medium) size, two additional sizes are available: small\nand large.`}</p>\n    <Playground __position={2} __code={'<TextArea label=\\\"Your feedback\\\" size=\\\"small\\\" />\\n<TextArea label=\\\"Your feedback\\\" />\\n<TextArea label=\\\"Your feedback\\\" size=\\\"large\\\" />\\n<TextArea label=\\\"Your feedback\\\" size=\\\"small\\\" variant=\\\"filled\\\" />\\n<TextArea label=\\\"Your feedback\\\" variant=\\\"filled\\\" />\\n<TextArea label=\\\"Your feedback\\\" size=\\\"large\\\" variant=\\\"filled\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" size=\"small\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" size=\"large\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" size=\"small\" variant=\"filled\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" variant=\"filled\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" size=\"large\" variant=\"filled\" mdxType=\"TextArea\" />\n    </Playground>\n    <p>{`Full-width fields span the full width of a parent:`}</p>\n    <Playground __position={3} __code={'<TextArea label=\\\"Your feedback\\\" fullWidth />\\n<TextArea label=\\\"Your feedback\\\" variant=\\\"filled\\\" fullWidth />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" fullWidth mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" variant=\"filled\" fullWidth mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"input-size\"\n    }}>{`Input Size`}</h2>\n    <p>{`The default width of all inputs is 240 px, and it can be\n`}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/overview\"\n      }}>{`customized`}</a>{` with a CSS custom property. However, you\ncan also `}<strong parentName=\"p\">{`control the size of individual text areas`}</strong>{` using the `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`cols`}</inlineCode>{` properties. Additionally, text areas are vertically resizable by users.`}</p>\n    <p>{`👉 Remember that the `}<inlineCode parentName=\"p\">{`cols`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` HTML attributes `}<strong parentName=\"p\">{`do not limit on how\nmany characters`}</strong>{` the user can enter. Use the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#Min_and_max_length\"\n      }}><inlineCode parentName=\"a\">{`maxlength`}</inlineCode>{` attribute`}</a>{`\nto achieve that effect.`}</p>\n    <Playground __position={4} __code={'<TextArea label=\\\"Your feedback\\\" cols={50} rows={6} />\\n<TextArea label=\\\"Your feedback\\\" variant=\\\"filled\\\" cols={50} rows={6} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" cols={50} rows={6} mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" variant=\"filled\" cols={50} rows={6} mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"invisible-label\"\n    }}>{`Invisible Label`}</h2>\n    <p>{`In some cases, it may be convenient to visually hide the field label. The label\nremains accessible to assistive technologies.`}</p>\n    <p>{`While it may be acceptable for login screens with just a few fields or other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should `}<strong parentName=\"p\">{`provide another visual clue`}</strong>{` so users know what to fill into\nthe input.`}</p>\n    <Playground __position={5} __code={'<TextArea\\n  label=\\\"Feedback\\\"\\n  isLabelVisible={false}\\n  placeholder=\\\"Eg. What I liked the best was…\\\"\\n/>\\n<TextArea\\n  label=\\\"Feedback\\\"\\n  isLabelVisible={false}\\n  variant=\\\"filled\\\"\\n  placeholder=\\\"Eg. What I liked the best was…\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Feedback\" isLabelVisible={false} placeholder=\"Eg. What I liked the best was…\" mdxType=\"TextArea\" />\n  <TextArea label=\"Feedback\" isLabelVisible={false} variant=\"filled\" placeholder=\"Eg. What I liked the best was…\" mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better — and that's why React UI\nsupports this kind of layout as well.`}</p>\n    <Playground __position={6} __code={'<TextArea label=\\\"Your feedback\\\" layout=\\\"horizontal\\\" />\\n<TextArea label=\\\"Your feedback\\\" layout=\\\"horizontal\\\" variant=\\\"filled\\\" />\\n<TextArea label=\\\"Your feedback\\\" layout=\\\"horizontal\\\" fullWidth />\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  variant=\\\"filled\\\"\\n  fullWidth\\n/>\\n<TextArea\\n  isLabelVisible={false}\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  placeholder=\\\"Your feedback\\\"\\n  fullWidth\\n/>\\n<TextArea\\n  isLabelVisible={false}\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  placeholder=\\\"Your feedback\\\"\\n  variant=\\\"filled\\\"\\n  fullWidth\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" variant=\"filled\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" fullWidth mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" variant=\"filled\" fullWidth mdxType=\"TextArea\" />\n  <TextArea isLabelVisible={false} label=\"Your feedback\" layout=\"horizontal\" placeholder=\"Your feedback\" fullWidth mdxType=\"TextArea\" />\n  <TextArea isLabelVisible={false} label=\"Your feedback\" layout=\"horizontal\" placeholder=\"Your feedback\" variant=\"filled\" fullWidth mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify how the input should be\nfilled.`}</p>\n    <Playground __position={7} __code={'<TextArea label=\\\"Your feedback\\\" helpText=\\\"Why would you recommend us?\\\" />\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  variant=\\\"filled\\\"\\n  helpText=\\\"Why would you recommend us?\\\"\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"Why would you recommend us?\\\"\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"Why would you recommend us?\\\"\\n  variant=\\\"filled\\\"\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  helpText=\\\"Why would you recommend us?\\\"\\n  fullWidth\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  layout=\\\"horizontal\\\"\\n  variant=\\\"filled\\\"\\n  helpText=\\\"Why would you recommend us?\\\"\\n  fullWidth\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" helpText=\"Why would you recommend us?\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" variant=\"filled\" helpText=\"Why would you recommend us?\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" helpText=\"Why would you recommend us?\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" helpText=\"Why would you recommend us?\" variant=\"filled\" mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" helpText=\"Why would you recommend us?\" fullWidth mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" layout=\"horizontal\" variant=\"filled\" helpText=\"Why would you recommend us?\" fullWidth mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide a help text for states other than valid`}</strong>{` so users know\nwhat happened and what action they should take or what options they have.`}</p>\n    <Playground __position={8} __code={'<TextArea\\n  label=\\\"Your feedback\\\"\\n  validationState=\\\"valid\\\"\\n  validationText=\\\"Looks good!\\\"\\n  value=\\\"Like that!\\\"\\n  required\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  validationState=\\\"warning\\\"\\n  validationText=\\\"The feedback should be at least 3 characters long.\\\"\\n  value=\\\"..\\\"\\n  required\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  validationState=\\\"invalid\\\"\\n  validationText=\\\"Please share your feedback with us.\\\"\\n  required\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  validationState=\\\"valid\\\"\\n  validationText=\\\"Looks good!\\\"\\n  variant=\\\"filled\\\"\\n  value=\\\"Like that!\\\"\\n  required\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  validationState=\\\"warning\\\"\\n  validationText=\\\"The feedback should be at least 3 characters long.\\\"\\n  variant=\\\"filled\\\"\\n  value=\\\"..\\\"\\n  required\\n/>\\n<TextArea\\n  label=\\\"Your feedback\\\"\\n  validationState=\\\"invalid\\\"\\n  validationText=\\\"Please share your feedback with us.\\\"\\n  variant=\\\"filled\\\"\\n  required\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" validationState=\"valid\" validationText=\"Looks good!\" value=\"Like that!\" required mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" validationState=\"warning\" validationText=\"The feedback should be at least 3 characters long.\" value=\"..\" required mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" validationState=\"invalid\" validationText=\"Please share your feedback with us.\" required mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" validationState=\"valid\" validationText=\"Looks good!\" variant=\"filled\" value=\"Like that!\" required mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" validationState=\"warning\" validationText=\"The feedback should be at least 3 characters long.\" variant=\"filled\" value=\"..\" required mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" validationState=\"invalid\" validationText=\"Please share your feedback with us.\" variant=\"filled\" required mdxType=\"TextArea\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`It's possible to disable the whole input.`}</p>\n    <Playground __position={9} __code={'<TextArea label=\\\"Your feedback\\\" disabled />\\n<TextArea label=\\\"Your feedback\\\" variant=\\\"filled\\\" disabled />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Your feedback\" disabled mdxType=\"TextArea\" />\n  <TextArea label=\"Your feedback\" variant=\"filled\" disabled mdxType=\"TextArea\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"forwarding-html-attributes\"\n    }}>{`Forwarding HTML Attributes`}</h2>\n    <p>{`In addition to the options below in the `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`component's API`}</a>{` section, you\ncan specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or you can `}<strong parentName=\"p\">{`add whatever HTML attribute\nyou like.`}</strong>{` All attributes that don't interfere with the API are forwarded to\nthe native HTML `}<inlineCode parentName=\"p\">{`<textarea>`}</inlineCode>{`. This enables making the component interactive and\nto helps to improve its accessibility.`}</p>\n    <Playground __position={10} __code={'<TextArea\\n  label=\\\"Address\\\"\\n  autoComplete=\\\"street-address\\\"\\n  minLength={3}\\n  maxLength={80}\\n/>\\n<TextArea\\n  label=\\\"Address\\\"\\n  variant=\\\"filled\\\"\\n  autoComplete=\\\"street-address\\\"\\n  minLength={3}\\n  maxLength={80}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextArea,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TextArea label=\"Address\" autoComplete=\"street-address\" minLength={3} maxLength={80} mdxType=\"TextArea\" />\n  <TextArea label=\"Address\" variant=\"filled\" autoComplete=\"street-address\" minLength={3} maxLength={80} mdxType=\"TextArea\" />\n    </Playground>\n    <p>{`👉 Refer to the MDN reference for the full list of supported attributes of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes\"\n      }}>{`textarea`}</a>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"forwarding-ref\"\n    }}>{`Forwarding ref`}</h2>\n    <p>{`If you provide `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n      }}>{`ref`}</a>{`, it is forwarded to the native HTML `}<inlineCode parentName=\"p\">{`<textarea>`}</inlineCode>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={TextArea} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <p>{`Head to `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/forms\"\n      }}>{`Forms Theming`}</a>{` to see shared form theming\noptions.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}