{"version":3,"sources":["webpack:///../src/lib/components/Popover/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useFloating","autoUpdate","flip","Playground","Props","Placeholder","Button","Popover","ButtonGroup","SelectField","Toolbar","ToolbarItem","PopoverWrapper","isPopoverOpen","setIsPopoverOpen","React","style","display","placeContent","minWidth","minHeight","aria-describedby","undefined","label","onClick","id","align","setAlign","aria-labelledby","color","bordered","placement","setPlacement","x","y","reference","floating","finalPlacement","strategy","middleware","whileElementsMounted","onChange","e","target","value","options","map","el","className","width","maxWidth","height","overflow","position","paddingBlock","textAlign","ref","top","left","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-popover-readme-mdx-ef523f90373319a34777.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useFloating, autoUpdate, flip } from '@floating-ui/react-dom';\nimport { Playground, Props } from 'docz';\nimport { Placeholder } from '../../../docs/_components/Placeholder/Placeholder';\nimport { Button, Popover, ButtonGroup, SelectField, Toolbar, ToolbarItem, PopoverWrapper } from '../..';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n\n    <p>{`Popover displays additional information without interrupting user flow.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Popover component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Popover, PopoverWrapper } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState(false)\\n  // All inline styles in this example are for demonstration purposes only.\\n  return (\\n    <div\\n      style={{\\n        display: \\'grid\\',\\n        placeContent: \\'center\\',\\n        minWidth: \\'20rem\\',\\n        minHeight: \\'10rem\\',\\n      }}\\n    >\\n      <PopoverWrapper>\\n        <Button\\n          aria-describedby={isPopoverOpen ? \\'my-popover\\' : undefined}\\n          label=\\\"Want to see a popover? Click me!\\\"\\n          onClick={() => setIsPopoverOpen(!isPopoverOpen)}\\n        />\\n        {isPopoverOpen && <Popover id=\\\"my-popover\\\">Hello there!</Popover>}\\n      </PopoverWrapper>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useFloating,\n      autoUpdate,\n      flip,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      Popover,\n      ButtonGroup,\n      SelectField,\n      Toolbar,\n      ToolbarItem,\n      PopoverWrapper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [isPopoverOpen, setIsPopoverOpen] = React.useState(false); // All inline styles in this example are for demonstration purposes only.\n\n        return <div style={{\n          display: 'grid',\n          placeContent: 'center',\n          minWidth: '20rem',\n          minHeight: '10rem'\n        }}>\n      <PopoverWrapper mdxType=\"PopoverWrapper\">\n        <Button aria-describedby={isPopoverOpen ? 'my-popover' : undefined} label=\"Want to see a popover? Click me!\" onClick={() => setIsPopoverOpen(!isPopoverOpen)} mdxType=\"Button\" />\n        {isPopoverOpen && <Popover id=\"my-popover\" mdxType=\"Popover\">\n            Hello there!\n          </Popover>}\n      </PopoverWrapper>\n    </div>;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h2>\n    <p>{`Available placements are: top, right, bottom, and left. Additionally, all basic\nplacements can be aligned to the center (default, no suffix), start (e.g.\n`}<inlineCode parentName=\"p\">{`top-start`}</inlineCode>{`), or end (e.g. `}<inlineCode parentName=\"p\">{`bottom-end`}</inlineCode>{`). Check Popover `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for the\ncomplete list of accepted values.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [align, setAlign] = React.useState(\\'\\')\\n  // All inline styles in this example are for demonstration purposes only.\\n  return (\\n    <>\\n      <Toolbar align=\\\"baseline\\\">\\n        <ToolbarItem>\\n          <span id=\\\"alignment-options-label\\\">Alignment:</span>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <ButtonGroup aria-labelledby=\\\"alignment-options-label\\\">\\n            <Button\\n              color={align === \\'-start\\' ? \\'dark\\' : \\'primary\\'}\\n              label=\\\"start\\\"\\n              onClick={() => setAlign(\\'-start\\')}\\n            />\\n            <Button\\n              color={align === \\'\\' ? \\'dark\\' : \\'primary\\'}\\n              label=\\\"center\\\"\\n              onClick={() => setAlign(\\'\\')}\\n            />\\n            <Button\\n              color={align === \\'-end\\' ? \\'dark\\' : \\'primary\\'}\\n              label=\\\"end\\\"\\n              onClick={() => setAlign(\\'-end\\')}\\n            />\\n          </ButtonGroup>\\n        </ToolbarItem>\\n      </Toolbar>\\n      <div\\n        style={{\\n          display: \\'grid\\',\\n          placeContent: \\'center\\',\\n          minWidth: \\'20rem\\',\\n          minHeight: \\'15rem\\',\\n        }}\\n      >\\n        <PopoverWrapper>\\n          <Placeholder bordered aria-describedby=\\\"my-popover-top\\\">\\n            Popovers\\n            <br />\\n            all day long…\\n          </Placeholder>\\n          <Popover id=\\\"my-popover-top\\\" placement={`top${align}`}>\\n            Top side\\n          </Popover>\\n          <Popover id=\\\"my-popover-right\\\" placement={`right${align}`}>\\n            Right side\\n          </Popover>\\n          <Popover id=\\\"my-popover-bottom\\\" placement={`bottom${align}`}>\\n            Bottom side\\n          </Popover>\\n          <Popover id=\\\"my-popover-left\\\" placement={`left${align}`}>\\n            Left side\\n          </Popover>\\n        </PopoverWrapper>\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useFloating,\n      autoUpdate,\n      flip,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      Popover,\n      ButtonGroup,\n      SelectField,\n      Toolbar,\n      ToolbarItem,\n      PopoverWrapper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [align, setAlign] = React.useState(''); // All inline styles in this example are for demonstration purposes only.\n\n        return <>\n      <Toolbar align=\"baseline\" mdxType=\"Toolbar\">\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <span id=\"alignment-options-label\">Alignment:</span>\n        </ToolbarItem>\n        <ToolbarItem mdxType=\"ToolbarItem\">\n          <ButtonGroup aria-labelledby=\"alignment-options-label\" mdxType=\"ButtonGroup\">\n            <Button color={align === '-start' ? 'dark' : 'primary'} label=\"start\" onClick={() => setAlign('-start')} mdxType=\"Button\" />\n            <Button color={align === '' ? 'dark' : 'primary'} label=\"center\" onClick={() => setAlign('')} mdxType=\"Button\" />\n            <Button color={align === '-end' ? 'dark' : 'primary'} label=\"end\" onClick={() => setAlign('-end')} mdxType=\"Button\" />\n          </ButtonGroup>\n        </ToolbarItem>\n      </Toolbar>\n      <div style={{\n            display: 'grid',\n            placeContent: 'center',\n            minWidth: '20rem',\n            minHeight: '15rem'\n          }}>\n        <PopoverWrapper mdxType=\"PopoverWrapper\">\n          <Placeholder bordered aria-describedby=\"my-popover-top\" mdxType=\"Placeholder\">\n            Popovers\n            <br />\n            all day long…\n          </Placeholder>\n          <Popover id=\"my-popover-top\" placement={`top${align}`} mdxType=\"Popover\">\n            Top side\n          </Popover>\n          <Popover id=\"my-popover-right\" placement={`right${align}`} mdxType=\"Popover\">\n            Right side\n          </Popover>\n          <Popover id=\"my-popover-bottom\" placement={`bottom${align}`} mdxType=\"Popover\">\n            Bottom side\n          </Popover>\n          <Popover id=\"my-popover-left\" placement={`left${align}`} mdxType=\"Popover\">\n            Left side\n          </Popover>\n        </PopoverWrapper>\n      </div>\n    </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"popoverwrapper\"\n    }}>{`PopoverWrapper`}</h2>\n    <p>{`PopoverWrapper is an optional wrapper to make positioning of Popover even\neasier.`}</p>\n    <p>{`By default, Popover is placed relative to the closest parent element with\n`}<inlineCode parentName=\"p\">{`position: relative`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`position: absolute`}</inlineCode>{`. Maybe you already have one of\nthese in your CSS. PopoverWrapper is here for situations when you don't.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<PopoverWrapper>\n  <Button\n    aria-describedby={isPopoverOpen ? 'my-popover' : undefined}\n    label=\"Want to see a popover? Click me!\"\n    onClick={() => setIsPopoverOpen(!isPopoverOpen)}\n  />\n  {isPopoverOpen && <Popover id=\"my-popover\">Hello there!</Popover>}\n</PopoverWrapper>\n`}</code></pre>\n    <p>{`How do you know you may need PopoverWrapper?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You are `}<strong parentName=\"li\">{`not`}</strong>{` rendering Popover in a React portal.`}</li>\n      <li parentName=\"ul\">{`You are using Popover in a complex layout and it does not pop up where you\nneed it.`}</li>\n      <li parentName=\"ul\">{`You are using Floating UI with `}<inlineCode parentName=\"li\">{`absolute`}</inlineCode>{` positioning strategy (see\n`}<a parentName=\"li\" {...{\n          \"href\": \"#advanced-positioning\"\n        }}>{`Advanced Positioning`}</a>{` below) and your Popover keeps to\nbe misplaced.`}</li>\n      <li parentName=\"ul\">{`You have no idea what CSS `}<inlineCode parentName=\"li\">{`position`}</inlineCode>{` is and just want to get it working.`}</li>\n    </ul>\n    <p>{`To sum it up, usually you will need either PopoverWrapper around your content or\n`}<inlineCode parentName=\"p\">{`position: [ relative | absolute ]`}</inlineCode>{` somewhere in your CSS (but you never need\nboth!). Nevertheless, in the simplest situations, like in a single-column page\nlayout, you may not need either of these at all.`}</p>\n    <p>{`Head to PopoverWrapper `}<a parentName=\"p\" {...{\n        \"href\": \"#popoverwrapper-api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"advanced-positioning\"\n    }}>{`Advanced Positioning`}</h2>\n    <p>{`While the basic setup can be sufficient in some scenarios, dropping a Popover\nusually won't be so easy. To handle all tricky situations and edge cases\nautomatically, including smart position updates to ensure Popover visibility,\nwe recommend to involve an external library designed specifically for this\npurpose.`}</p>\n    <p>{`ℹ️ The following example is using external library `}<a parentName=\"p\" {...{\n        \"href\": \"https://floating-ui.com/docs/react-dom\"\n      }}>{`Floating UI`}</a>{`. To use\nFloating UI, install it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install --save @floating-ui/react-dom\n`}</code></pre>\n    <p>{`And import it along with Popover, e.g.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  useFloating,\n  autoUpdate,\n  flip,\n} from '@floating-ui/react-dom';\nimport { Popover } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`As opposed to the `}<a parentName=\"p\" {...{\n        \"href\": \"#placement\"\n      }}>{`basic setup`}</a>{`, Popover will be placed according to\nits triggering component (`}<inlineCode parentName=\"p\">{`reference`}</inlineCode>{`), but still recognizing the closest parent\nelement with `}<inlineCode parentName=\"p\">{`position: relative`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`position: absolute`}</inlineCode>{` if there is any.`}</p>\n    <p>{`Popover reacts on the `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` option, necessary for advanced positioning:\nwhen `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` is set, Popover resets its built-in positioning and relies\non provided `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`.`}</p>\n    <p>{`👉 Please consult `}<a parentName=\"p\" {...{\n        \"href\": \"https://floating-ui.com/docs/react-dom\"\n      }}>{`Floating UI`}</a>{` documentation to understand how it works and to\nget an idea of all possible cases you may need to cover.`}</p>\n    <p>{`🖱 Try scrolling the example to see how Popover placement is updated.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState(false)\\n  const [placement, setPlacement] = React.useState(\\'top\\')\\n  const {\\n    x,\\n    y,\\n    reference,\\n    floating,\\n    placement: finalPlacement,\\n    strategy,\\n  } = useFloating({\\n    placement,\\n    middleware: [flip()],\\n    whileElementsMounted: autoUpdate,\\n  })\\n  const placementOptions = [\\n    \\'top\\',\\n    \\'top-start\\',\\n    \\'top-end\\',\\n    \\'right\\',\\n    \\'right-start\\',\\n    \\'right-end\\',\\n    \\'bottom\\',\\n    \\'bottom-start\\',\\n    \\'bottom-end\\',\\n    \\'left\\',\\n    \\'left-start\\',\\n    \\'left-end\\',\\n  ]\\n  // All inline styles in this example EXCEPT Popover `style` are for\\n  // demonstration purposes only.\\n  return (\\n    <>\\n      <Toolbar>\\n        <ToolbarItem>\\n          <SelectField\\n            label=\\\"Suggested placement:\\\"\\n            onChange={e => setPlacement(e.target.value)}\\n            options={placementOptions.map(el => ({\\n              label: el,\\n              value: el,\\n            }))}\\n            value={placement}\\n          />\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <div className=\\\"mb-2\\\">Final placement:</div>\\n          <code>{finalPlacement}</code>\\n        </ToolbarItem>\\n      </Toolbar>\\n      <div\\n        style={{\\n          width: \\'40rem\\',\\n          maxWidth: \\'100%\\',\\n          height: \\'10rem\\',\\n          overflow: \\'auto\\',\\n        }}\\n      >\\n        <div\\n          style={{\\n            position: \\'relative\\',\\n            width: \\'60rem\\',\\n            height: \\'20rem\\',\\n            paddingBlock: \\'7rem\\',\\n            textAlign: \\'center\\',\\n          }}\\n        >\\n          <Button\\n            aria-describedby={\\n              isPopoverOpen ? \\'my-advanced-popover\\' : undefined\\n            }\\n            label=\\\"Trigger Popover\\\"\\n            onClick={() => setIsPopoverOpen(!isPopoverOpen)}\\n            ref={reference}\\n          />\\n          {isPopoverOpen && (\\n            <Popover\\n              id=\\\"my-advanced-popover\\\"\\n              placement={finalPlacement}\\n              style={{\\n                position: strategy,\\n                top: y ? y : \\'\\',\\n                left: x ? x : \\'\\',\\n              }}\\n              ref={floating}\\n            >\\n              Auto-flipping Popover\\n            </Popover>\\n          )}\\n        </div>\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useFloating,\n      autoUpdate,\n      flip,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      Popover,\n      ButtonGroup,\n      SelectField,\n      Toolbar,\n      ToolbarItem,\n      PopoverWrapper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n        const [placement, setPlacement] = React.useState('top');\n        const {\n          x,\n          y,\n          reference,\n          floating,\n          placement: finalPlacement,\n          strategy\n        } = useFloating({\n          placement,\n          middleware: [flip()],\n          whileElementsMounted: autoUpdate\n        });\n        const placementOptions = ['top', 'top-start', 'top-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end']; // All inline styles in this example EXCEPT Popover `style` are for\n        // demonstration purposes only.\n\n        return <>\n        <Toolbar mdxType=\"Toolbar\">\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <SelectField label=\"Suggested placement:\" onChange={e => setPlacement(e.target.value)} options={placementOptions.map(el => ({\n                label: el,\n                value: el\n              }))} value={placement} mdxType=\"SelectField\" />\n          </ToolbarItem>\n          <ToolbarItem mdxType=\"ToolbarItem\">\n            <div className=\"mb-2\">Final placement:</div>\n            <code>{finalPlacement}</code>\n          </ToolbarItem>\n        </Toolbar>\n        <div style={{\n            width: '40rem',\n            maxWidth: '100%',\n            height: '10rem',\n            overflow: 'auto'\n          }}>\n          <div style={{\n              position: 'relative',\n              width: '60rem',\n              height: '20rem',\n              paddingBlock: '7rem',\n              textAlign: 'center'\n            }}>\n            <Button aria-describedby={isPopoverOpen ? 'my-advanced-popover' : undefined} label=\"Trigger Popover\" onClick={() => setIsPopoverOpen(!isPopoverOpen)} ref={reference} mdxType=\"Button\" />\n            {isPopoverOpen && <Popover id=\"my-advanced-popover\" placement={finalPlacement} style={{\n                position: strategy,\n                top: y ? y : '',\n                left: x ? x : ''\n              }} ref={floating} mdxType=\"Popover\">\n                Auto-flipping Popover\n              </Popover>}\n          </div>\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"forwarding-html-attributes\"\n    }}>{`Forwarding HTML Attributes`}</h2>\n    <p>{`In addition to the options below in the `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`component's API`}</a>{` section, you\ncan specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or `}<strong parentName=\"p\">{`any HTML attribute you like.`}</strong>{` All\nattributes that don't interfere with the API are forwarded to the root `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`\nHTML element. This enables making the component interactive and helps to improve\nits accessibility.`}</p>\n    <p>{`👉 Refer to the MDN reference for the full list of supported attributes of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div#attributes\"\n      }}>{`div`}</a>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"forwarding-ref\"\n    }}>{`Forwarding ref`}</h2>\n    <p>{`If you provide `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n      }}>{`ref`}</a>{`, it is forwarded to the root native HTML `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` element,\nwhich enables `}<a parentName=\"p\" {...{\n        \"href\": \"#advanced-positioning\"\n      }}>{`Advanced Positioning`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={Popover} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"popoverwrapper-api\"\n    }}>{`PopoverWrapper API`}</h3>\n    <Props table of={PopoverWrapper} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Popover width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__padding`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Popover padding`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__border-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__border-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Border color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Corner radius`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__background-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Background color`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Popover__box-shadow`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Popover box shadow`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}