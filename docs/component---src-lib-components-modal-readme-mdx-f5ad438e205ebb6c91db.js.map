{"version":3,"sources":["webpack:///../src/lib/components/Modal/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Button","CheckboxField","FormLayout","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalTitle","Radio","ScrollView","TextArea","TextField","Toolbar","ToolbarGroup","ToolbarItem","Icon","modalOpen","setModalOpen","React","modalPrimaryButtonRef","modalCloseButtonRef","label","onClick","closeButtonRef","primaryButtonRef","color","ref","priority","setTimeout","className","icon","fieldLayout","type","variant","setVariant","justify","modalJustify","setModalJustify","onChange","e","target","value","options","modalSize","setModalSize","size","modalPosition","setModalPosition","position","agree","setAgree","autoWidth","validationState","validationText","checked","disabled","autoFocus","modalScrolling","setModalScrolling","modalContent","scrolling","customScrollPreventionObject","start","window","document","body","style","overflowY","reset","preventScrollUnderneath","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-modal-readme-mdx-f5ad438e205ebb6c91db.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Button, CheckboxField, FormLayout, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalTitle, Radio, ScrollView, TextArea, TextField, Toolbar, ToolbarGroup, ToolbarItem } from '../..';\nimport Icon from '../../../docs/_components/Icon';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`Modal allows prompting users to take or complete an action.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Modal component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalTitle,\n} from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button label=\\\"Launch modal\\\" onClick={() => setModalOpen(true)} />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Delete the user?</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Do you really want to delete the user <code>admin</code>?\\n                  This cannot be undone.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"danger\\\"\\n                label=\\\"Delete\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch modal\" onClick={() => setModalOpen(true)} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Do you really want to delete the user <code>admin</code>?\n                    This cannot be undone.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use modals to `}<strong parentName=\"p\">{`confirm an action,`}</strong>{` display a `}<strong parentName=\"p\">{`blocking alert`}</strong>{`, or reveal\n`}<strong parentName=\"p\">{`contextual options or settings`}</strong>{` that cannot be displayed in line with the\nparent content.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`The title`}</strong>{` should communicate the `}<strong parentName=\"p\">{`purpose of the modal`}</strong>{` rather than a\ngeneric text. Eg. “Delete the user?” tells more than “Are you sure?” or\n“Warning”.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Modal actions`}</strong>{` should correspond to the modal purpose, too. E.g. “Delete”\ntells better what happens rather than “OK”.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Modal `}<strong parentName=\"p\">{`automatically focuses the first non-disabled form field`}</strong>{` by default\nwhich allows users to confirm the modal by hitting the enter key. When no\nfield is found then the primary button (in the footer) is focused. If there\nare neither, it tries to focus any other focusable elements. In case there\nare none, or `}<a parentName=\"p\" {...{\n            \"href\": \"#autoFocus\"\n          }}>{`autoFocus`}</a>{` is disabled, Modal itself is focused.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Avoid stacking`}</strong>{` of modals. While it may technically work, the modal is just\nnot designed for that.`}</p>\n      </li>\n    </ul>\n    <p>{`📖 `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.nngroup.com/articles/modal-nonmodal-dialog/\"\n      }}>{`Read more about modals at Nielsen Norman Group.`}</a></p>\n    <h2 {...{\n      \"id\": \"composition\"\n    }}>{`Composition`}</h2>\n    <p>{`Modal is decomposed into the following components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#api\"\n        }}>{`Modal`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#modalheader-1\"\n            }}>{`ModalHeader`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#modaltitle\"\n                }}>{`ModalTitle`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#modalclosebutton\"\n                }}>{`ModalCloseButton`}</a></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#modalbody-1\"\n            }}>{`ModalBody`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#modalcontent\"\n                }}>{`ModalContent`}</a>{`\n(may be wrapped with `}<a parentName=\"li\" {...{\n                  \"href\": \"/components/scroll-view\"\n                }}>{`ScrollView`}</a>{`)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#modalfooter-1\"\n            }}>{`ModalFooter`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Using different combinations, you can compose different kinds of modals,\ne.g. dialog modal, blocking modal, scrollable modal, etc.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(null)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch blocking modal without title\\\"\\n        onClick={() => {\\n          setModalOpen(1)\\n          setTimeout(() => setModalOpen(null), 2500)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch blocking modal with title\\\"\\n        onClick={() => {\\n          setModalOpen(2)\\n          setTimeout(() => setModalOpen(null), 3500)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch modal as dialog\\\"\\n        onClick={() => setModalOpen(3)}\\n      />\\n      <Button label=\\\"Launch modal as form\\\" onClick={() => setModalOpen(4)} />\\n      <div>\\n        {modalOpen === 1 && (\\n          <Modal>\\n            <ModalBody>\\n              <ModalContent>\\n                <p className=\\\"text-center\\\">\\n                  Application is being loaded.\\n                  <span className=\\\"d-inline-flex align-items-center animation-spin-counterclockwise\\\">\\n                    <Icon icon=\\\"loading\\\" />\\n                  </span>\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n          </Modal>\\n        )}\\n        {modalOpen === 2 && (\\n          <Modal>\\n            <ModalHeader>\\n              <ModalTitle>Action finished</ModalTitle>\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Action has been successfully finished. You will be\\n                  redirected within a few seconds.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n          </Modal>\\n        )}\\n        {modalOpen === 3 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Delete the user?</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Do you really want to delete the user <code>admin</code>?\\n                  This cannot be undone.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"danger\\\"\\n                label=\\\"Delete\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n        {modalOpen === 4 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Add new user</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <FormLayout fieldLayout=\\\"horizontal\\\">\\n                  <TextField label=\\\"Username\\\" />\\n                  <TextField label=\\\"Password\\\" type=\\\"password\\\" />\\n                </FormLayout>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Save\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(null);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch blocking modal without title\" onClick={() => {\n            setModalOpen(1);\n            setTimeout(() => setModalOpen(null), 2500);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch blocking modal with title\" onClick={() => {\n            setModalOpen(2);\n            setTimeout(() => setModalOpen(null), 3500);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch modal as dialog\" onClick={() => setModalOpen(3)} mdxType=\"Button\" />\n        <Button label=\"Launch modal as form\" onClick={() => setModalOpen(4)} mdxType=\"Button\" />\n        <div>\n          {modalOpen === 1 && <Modal mdxType=\"Modal\">\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p className=\"text-center\">\n                    Application is being loaded.\n                    <span className=\"d-inline-flex align-items-center animation-spin-counterclockwise\">\n                      <Icon icon=\"loading\" mdxType=\"Icon\" />\n                    </span>\n                  </p>\n                </ModalContent>\n              </ModalBody>\n            </Modal>}\n          {modalOpen === 2 && <Modal mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Action finished</ModalTitle>\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Action has been successfully finished.\n                    You will be redirected within a few seconds.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n            </Modal>}\n          {modalOpen === 3 && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Do you really want to delete the user <code>admin</code>?\n                    This cannot be undone.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n          {modalOpen === 4 && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Add new user</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <FormLayout fieldLayout=\"horizontal\" mdxType=\"FormLayout\">\n                    <TextField label=\"Username\" mdxType=\"TextField\" />\n                    <TextField label=\"Password\" type=\"password\" mdxType=\"TextField\" />\n                  </FormLayout>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Save\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"modalheader\"\n    }}>{`ModalHeader`}</h3>\n    <p>{`ModalHeader is an optional part of the Modal which allows you to display the title\nof the modal and its close button.`}</p>\n    <p>{`It is recommended to compose ModalHeader from the following elements. For title,\nuse ModalTitle. For the close button, use ModalCloseButton, however it can\nbe omitted if a close button is part of ModalFooter.`}</p>\n    <p>{`There are two ways how to position elements within the ModalHeader:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`You can use provided positioning. Place previously mentioned elements into\nthe ModalHeader and use `}<inlineCode parentName=\"li\">{`justify`}</inlineCode>{` prop to set up the positioning of those\nelements.`}</li>\n      <li parentName=\"ol\">{`You can customize positioning using another component (e.g.\n`}<a parentName=\"li\" {...{\n          \"href\": \"/components/toolbar\"\n        }}>{`Toolbar`}</a>{`). In that case, set `}<inlineCode parentName=\"li\">{`justify`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`stretch`}</inlineCode>{` and\nposition elements on your own.`}</li>\n    </ol>\n    <Playground __position={2} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [variant, setVariant] = React.useState(null)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch with close button\\\"\\n        onClick={() => {\\n          setModalOpen(true)\\n          setVariant(1)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch without close button\\\"\\n        onClick={() => {\\n          setModalOpen(true)\\n          setVariant(2)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch without close button and with centered title\\\"\\n        onClick={() => {\\n          setModalOpen(true)\\n          setVariant(3)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch with custom layout\\\"\\n        onClick={() => {\\n          setModalOpen(true)\\n          setVariant(4)\\n        }}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            {variant === 1 && (\\n              <ModalHeader>\\n                <ModalTitle>Delete the user?</ModalTitle>\\n                <ModalCloseButton onClick={() => setModalOpen(false)} />\\n              </ModalHeader>\\n            )}\\n            {variant === 2 && (\\n              <ModalHeader>\\n                <ModalTitle>Delete the user?</ModalTitle>\\n              </ModalHeader>\\n            )}\\n            {variant === 3 && (\\n              <ModalHeader justify=\\\"center\\\">\\n                <ModalTitle>Delete the user?</ModalTitle>\\n              </ModalHeader>\\n            )}\\n            {variant === 4 && (\\n              <ModalHeader justify=\\\"stretch\\\">\\n                <Toolbar justify=\\\"space-between\\\">\\n                  <ToolbarItem>{\\'\\'}</ToolbarItem>\\n                  <ToolbarItem>\\n                    <ModalTitle>Delete the user?</ModalTitle>\\n                  </ToolbarItem>\\n                  <ToolbarItem>\\n                    <ModalCloseButton onClick={() => setModalOpen(false)} />\\n                  </ToolbarItem>\\n                </Toolbar>\\n              </ModalHeader>\\n            )}\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Do you really want to delete the user <code>admin</code>?\\n                  This cannot be undone.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"danger\\\"\\n                label=\\\"Delete\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [variant, setVariant] = React.useState(null);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch with close button\" onClick={() => {\n            setModalOpen(true);\n            setVariant(1);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch without close button\" onClick={() => {\n            setModalOpen(true);\n            setVariant(2);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch without close button and with centered title\" onClick={() => {\n            setModalOpen(true);\n            setVariant(3);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch with custom layout\" onClick={() => {\n            setModalOpen(true);\n            setVariant(4);\n          }} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              {variant === 1 && <ModalHeader mdxType=\"ModalHeader\">\n                  <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                  <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n                </ModalHeader>}\n              {variant === 2 && <ModalHeader mdxType=\"ModalHeader\">\n                  <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                </ModalHeader>}\n              {variant === 3 && <ModalHeader justify=\"center\" mdxType=\"ModalHeader\">\n                  <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                </ModalHeader>}\n              {variant === 4 && <ModalHeader justify=\"stretch\" mdxType=\"ModalHeader\">\n                  <Toolbar justify=\"space-between\" mdxType=\"Toolbar\">\n                    <ToolbarItem mdxType=\"ToolbarItem\">\n                      {''}\n                    </ToolbarItem>\n                    <ToolbarItem mdxType=\"ToolbarItem\">\n                      <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                    </ToolbarItem>\n                    <ToolbarItem mdxType=\"ToolbarItem\">\n                      <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n                    </ToolbarItem>\n                  </Toolbar>\n                </ModalHeader>}\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Do you really want to delete the user <code>admin</code>?\n                    This cannot be undone.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"modalbody\"\n    }}>{`ModalBody`}</h3>\n    <p>{`ModalBody is a mandatory part of the Modal which allows you to display the\ncontent of the Modal.`}</p>\n    <p>{`Although the ModalBody allows you to display arbitrary content, you should not\nplace content directly into the ModalBody, but wrap it with ModalContent first.`}</p>\n    <p>{`In case your content is expected to be long, consider wrapping ModalContent\nwith ScrollView. Check `}<a parentName=\"p\" {...{\n        \"href\": \"#scrolling-long-content\"\n      }}>{`Scrolling Long Content`}</a>{` section\nbelow.`}</p>\n    <h3 {...{\n      \"id\": \"modalfooter\"\n    }}>{`ModalFooter`}</h3>\n    <p>{`ModalFooter is an optional part of the Modal which allows you to display\nuser actions.`}</p>\n    <p>{`There are two ways to position buttons within the ModalFooter:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`You can use provided positioning. Place Button component (or any arbitrary\nelement) and use `}<inlineCode parentName=\"li\">{`justify`}</inlineCode>{` prop to set up the positioning of those elements.`}</li>\n      <li parentName=\"ol\">{`You can customize positioning using another component (e.g.\n`}<a parentName=\"li\" {...{\n          \"href\": \"/components/toolbar\"\n        }}>{`Toolbar`}</a>{`). In that case, set `}<inlineCode parentName=\"li\">{`justify`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`stretch`}</inlineCode>{`\nand position elements on your own.`}</li>\n    </ol>\n    <Playground __position={3} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [modalJustify, setModalJustify] = React.useState(\\'center\\')\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch modal with footer variants\\\"\\n        onClick={() => setModalOpen(true)}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Footer justification</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <Radio\\n                  label=\\\"Footer justification\\\"\\n                  onChange={e => setModalJustify(e.target.value)}\\n                  options={[\\n                    {\\n                      label: \\'start\\',\\n                      value: \\'start\\',\\n                    },\\n                    {\\n                      label: \\'center\\',\\n                      value: \\'center\\',\\n                    },\\n                    {\\n                      label: \\'end\\',\\n                      value: \\'end\\',\\n                    },\\n                    {\\n                      label: \\'space-between\\',\\n                      value: \\'space-between\\',\\n                    },\\n                    {\\n                      label: \\'stretch (with a custom layout)\\',\\n                      value: \\'stretch\\',\\n                    },\\n                  ]}\\n                  value={modalJustify}\\n                />\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter justify={modalJustify}>\\n              {modalJustify === \\'stretch\\' ? (\\n                <Toolbar justify=\\\"space-between\\\">\\n                  <ToolbarGroup>\\n                    <ToolbarItem>\\n                      <Button\\n                        color=\\\"danger\\\"\\n                        label=\\\"Delete\\\"\\n                        onClick={() => setModalOpen(false)}\\n                        ref={modalPrimaryButtonRef}\\n                      />\\n                    </ToolbarItem>\\n                    <ToolbarItem>\\n                      <Button\\n                        color=\\\"warning\\\"\\n                        label=\\\"Archive\\\"\\n                        onClick={() => setModalOpen(false)}\\n                        ref={modalPrimaryButtonRef}\\n                      />\\n                    </ToolbarItem>\\n                  </ToolbarGroup>\\n                  <ToolbarItem>\\n                    <Button\\n                      color=\\\"secondary\\\"\\n                      label=\\\"Close\\\"\\n                      onClick={() => setModalOpen(false)}\\n                      priority=\\\"outline\\\"\\n                      ref={modalCloseButtonRef}\\n                    />\\n                  </ToolbarItem>\\n                </Toolbar>\\n              ) : (\\n                <>\\n                  <Button\\n                    label=\\\"OK\\\"\\n                    onClick={() => setModalOpen(false)}\\n                    ref={modalPrimaryButtonRef}\\n                  />\\n                  <Button\\n                    color=\\\"secondary\\\"\\n                    label=\\\"Close\\\"\\n                    onClick={() => setModalOpen(false)}\\n                    priority=\\\"outline\\\"\\n                    ref={modalCloseButtonRef}\\n                  />\\n                </>\\n              )}\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [modalJustify, setModalJustify] = React.useState('center');\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch modal with footer variants\" onClick={() => setModalOpen(true)} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Footer justification</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <Radio label=\"Footer justification\" onChange={e => setModalJustify(e.target.value)} options={[{\n                    label: 'start',\n                    value: 'start'\n                  }, {\n                    label: 'center',\n                    value: 'center'\n                  }, {\n                    label: 'end',\n                    value: 'end'\n                  }, {\n                    label: 'space-between',\n                    value: 'space-between'\n                  }, {\n                    label: 'stretch (with a custom layout)',\n                    value: 'stretch'\n                  }]} value={modalJustify} mdxType=\"Radio\" />\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter justify={modalJustify} mdxType=\"ModalFooter\">\n                {modalJustify === 'stretch' ? <Toolbar justify=\"space-between\" mdxType=\"Toolbar\">\n                          <ToolbarGroup mdxType=\"ToolbarGroup\">\n                            <ToolbarItem mdxType=\"ToolbarItem\">\n                              <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                            </ToolbarItem>\n                            <ToolbarItem mdxType=\"ToolbarItem\">\n                              <Button color=\"warning\" label=\"Archive\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                            </ToolbarItem>\n                          </ToolbarGroup>\n                        <ToolbarItem mdxType=\"ToolbarItem\">\n                          <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n                        </ToolbarItem>\n                      </Toolbar> : <>\n                        <Button label=\"OK\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                        <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n                      </>}\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Modal is available in three fixed-width sizes: small, medium, large and fullscreen.\nModals of any size automatically shrink when they cannot fit the screen width.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [modalSize, setModalSize] = React.useState(\\'small\\')\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch small modal\\\"\\n        onClick={() => {\\n          setModalSize(\\'small\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch medium modal\\\"\\n        onClick={() => {\\n          setModalSize(\\'medium\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch large modal\\\"\\n        onClick={() => {\\n          setModalSize(\\'large\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch fullscreen modal\\\"\\n        onClick={() => {\\n          setModalSize(\\'fullscreen\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n            size={modalSize}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Delete the user?</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Do you really want to delete the user <code>admin</code>?\\n                  This cannot be undone.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"danger\\\"\\n                label=\\\"Delete\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [modalSize, setModalSize] = React.useState('small');\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch small modal\" onClick={() => {\n            setModalSize('small');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch medium modal\" onClick={() => {\n            setModalSize('medium');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch large modal\" onClick={() => {\n            setModalSize('large');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch fullscreen modal\" onClick={() => {\n            setModalSize('fullscreen');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} size={modalSize} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Do you really want to delete the user <code>admin</code>?\n                    This cannot be undone.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <p>{`On top of that, the modal can adjust to the width of its content.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch auto-width modal\\\"\\n        onClick={() => setModalOpen(true)}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n            size=\\\"auto\\\"\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Delete the user?</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Do you really want to delete the user <code>admin</code>?\\n                  This cannot be undone.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"danger\\\"\\n                label=\\\"Delete\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch auto-width modal\" onClick={() => setModalOpen(true)} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} size=\"auto\" mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Do you really want to delete the user <code>admin</code>?\n                    This cannot be undone.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position\"\n    }}>{`Position`}</h2>\n    <p>{`Modal can be aligned either to the top or center of the screen.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [modalPosition, setModalPosition] = React.useState(\\'center\\')\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch modal at center\\\"\\n        onClick={() => {\\n          setModalPosition(\\'center\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch modal at top\\\"\\n        onClick={() => {\\n          setModalPosition(\\'top\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            position={modalPosition}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Delete the user?</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  Do you really want to delete the user <code>admin</code>?\\n                  This cannot be undone.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"danger\\\"\\n                label=\\\"Delete\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [modalPosition, setModalPosition] = React.useState('center');\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch modal at center\" onClick={() => {\n            setModalPosition('center');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch modal at top\" onClick={() => {\n            setModalPosition('top');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} position={modalPosition} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Delete the user?</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    Do you really want to delete the user <code>admin</code>?\n                    This cannot be undone.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"danger\" label=\"Delete\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"forms-in-modals\"\n    }}>{`Forms in Modals`}</h2>\n    <p>{`You can safely place a FormLayout into a Modal of any size, including the\nauto-width Modal.`}</p>\n    <Playground __position={7} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [agree, setAgree] = React.useState(true)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch auto-width modal with auto-width form\\\"\\n        onClick={() => setModalOpen(true)}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n            size=\\\"auto\\\"\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Auto-width form inside auto-width modal</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <FormLayout autoWidth fieldLayout=\\\"horizontal\\\">\\n                  <TextField\\n                    label=\\\"A form element\\\"\\n                    validationState=\\\"warning\\\"\\n                    validationText={`Account with this name already exists,\\n                     pick a different one.`}\\n                  />\\n                  <TextField label=\\\"Another form element\\\" />\\n                  <TextField label=\\\"Yet another one\\\" />\\n                  <CheckboxField\\n                    checked={agree}\\n                    label=\\\"I agree\\\"\\n                    onChange={() => setAgree(!agree)}\\n                  />\\n                </FormLayout>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                color=\\\"primary\\\"\\n                label=\\\"Save\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Cancel\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [agree, setAgree] = React.useState(true);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch auto-width modal with auto-width form\" onClick={() => setModalOpen(true)} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} size=\"auto\" mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Auto-width form inside auto-width modal</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <FormLayout autoWidth fieldLayout=\"horizontal\" mdxType=\"FormLayout\">\n                    <TextField label=\"A form element\" validationState=\"warning\" validationText={`Account with this name already exists,\n                       pick a different one.`} mdxType=\"TextField\" />\n                    <TextField label=\"Another form element\" mdxType=\"TextField\" />\n                    <TextField label=\"Yet another one\" mdxType=\"TextField\" />\n                    <CheckboxField checked={agree} label=\"I agree\" onChange={() => setAgree(!agree)} mdxType=\"CheckboxField\" />\n                  </FormLayout>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button color=\"primary\" label=\"Save\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Cancel\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <p>{`👉 Inside Modal, we recommend using the `}<inlineCode parentName=\"p\">{`autoWidth`}</inlineCode>{` option of FormLayout. This\nprevents the Modal from unwanted horizontal expansion when a long validation\ntext pops up during user's interaction with the form.`}</p>\n    <p>{`👉 Beware of horizontal FormLayout inside `}<inlineCode parentName=\"p\">{`small`}</inlineCode>{` modals. While automatic\noverflow handling comes to the rescue in this kind of scenario, you will be\nbetter off with the combination of auto-sized modal and horizontal FormLayout.`}</p>\n    <h2 {...{\n      \"id\": \"keyboard-control\"\n    }}>{`Keyboard Control`}</h2>\n    <p>{`Modal can be controlled either by mouse or keyboard. To enhance user\nexperience, primary action can be fired by pressing `}<inlineCode parentName=\"p\">{`Enter`}</inlineCode>{` key and the modal\ncan be closed by pressing the `}<inlineCode parentName=\"p\">{`Escape`}</inlineCode>{` key.`}</p>\n    <p>{`To enable it, you just need to pass a reference to the buttons using\n`}<inlineCode parentName=\"p\">{`primaryButtonRef`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`closeButtonRef`}</inlineCode>{` props on Modal. The advantage of passing\nthe reference to the button is that if the button is disabled, the key press\nwill not fire the event.`}</p>\n    <h2 {...{\n      \"id\": \"autofocus\"\n    }}>{`Autofocus`}</h2>\n    <p>{`Autofocus is implemented to enhance the user experience by automatically\nfocusing an element within the Modal.`}</p>\n    <p>{`How does it work? It tries to find `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`textarea`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`select`}</inlineCode>{` elements\ninside of Modal and moves focus onto the first non-disabled one. If none is\nfound and the `}<inlineCode parentName=\"p\">{`primaryButtonRef`}</inlineCode>{` prop on Modal is set, then the primary button\nis focused. If there are neither, it tries to focus any other focusable elements.\nIn case there are none or `}<inlineCode parentName=\"p\">{`autoFocus`}</inlineCode>{` is disabled, Modal itself is focused.`}</p>\n    <Playground __position={8} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(null)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch modal with autofocus and form\\\"\\n        onClick={() => setModalOpen(1)}\\n      />\\n      <Button\\n        label=\\\"Launch modal with autofocus\\\"\\n        onClick={() => setModalOpen(2)}\\n      />\\n      <Button\\n        label=\\\"Launch modal with autofocus disabled\\\"\\n        onClick={() => setModalOpen(3)}\\n      />\\n      <div>\\n        {modalOpen === 1 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Modal with autoFocus and form</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(null)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <FormLayout autoWidth fieldLayout=\\\"horizontal\\\">\\n                  <TextField disabled label=\\\"A form element\\\" />\\n                  <TextField label=\\\"Another form element\\\" />\\n                  <TextArea label=\\\"Yet another one\\\" />\\n                </FormLayout>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Submit\\\"\\n                onClick={() => setModalOpen(null)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(null)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n        {modalOpen === 2 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>\\n                Modal with autoFocus enabled with no form\\n              </ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(null)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  This Modal autofocuses the primary button or any other\\n                  focusable element.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Acknowledge\\\"\\n                onClick={() => setModalOpen(null)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(null)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n        {modalOpen === 3 && (\\n          <Modal\\n            autoFocus={false}\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Modal with autoFocus disabled</ModalTitle>\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>This Modal focuses the Modal element itself.</p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Acknowledge\\\"\\n                onClick={() => setModalOpen(null)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(null)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(null);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        return <>\n        <Button label=\"Launch modal with autofocus and form\" onClick={() => setModalOpen(1)} mdxType=\"Button\" />\n        <Button label=\"Launch modal with autofocus\" onClick={() => setModalOpen(2)} mdxType=\"Button\" />\n        <Button label=\"Launch modal with autofocus disabled\" onClick={() => setModalOpen(3)} mdxType=\"Button\" />\n        <div>\n          {modalOpen === 1 && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with autoFocus and form</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(null)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <FormLayout autoWidth fieldLayout=\"horizontal\" mdxType=\"FormLayout\">\n                    <TextField disabled label=\"A form element\" mdxType=\"TextField\" />\n                    <TextField label=\"Another form element\" mdxType=\"TextField\" />\n                    <TextArea label=\"Yet another one\" mdxType=\"TextArea\" />\n                  </FormLayout>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Submit\" onClick={() => setModalOpen(null)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(null)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n          {modalOpen === 2 && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with autoFocus enabled with no form</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(null)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    This Modal autofocuses the primary button or any other\n                    focusable element.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Acknowledge\" onClick={() => setModalOpen(null)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(null)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n          {modalOpen === 3 && <Modal autoFocus={false} closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with autoFocus disabled</ModalTitle>\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    This Modal focuses the Modal element itself.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Acknowledge\" onClick={() => setModalOpen(null)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(null)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"scrolling-long-content\"\n    }}>{`Scrolling Long Content`}</h2>\n    <p>{`When modals become too long for the user's viewport or device, they scroll\nindependent of the page itself. This can be done in three ways using the\n`}<inlineCode parentName=\"p\">{`scrolling`}</inlineCode>{` option of the ModalBody component:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`auto`}</inlineCode>{` (default) — ModalBody is responsible for scrolling,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`custom`}</inlineCode>{` — you must provide a custom component to handle scrolling,\ntypically an instance of `}<a parentName=\"li\" {...{\n          \"href\": \"/components/scroll-view\"\n        }}>{`ScrollView`}</a>{` wrapping\nModalContent,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`none`}</inlineCode>{` — entire Modal is responsible for scrolling.`}</li>\n    </ul>\n    <Playground __position={9} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(false)\\n  const [modalScrolling, setModalScrolling] = React.useState(\\'auto\\')\\n  const modalCloseButtonRef = React.useRef()\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalContent = (\\n    <ModalContent>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n        commodo ligula eget dolor. Aenean massa.\\n      </p>\\n      <p>\\n        Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\\n        ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\\n        pretium quis, sem.\\n      </p>\\n      <p>\\n        Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\\n        aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\\n        imperdiet a, venenatis vitae, justo.\\n      </p>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n        commodo ligula eget dolor. Aenean massa.\\n      </p>\\n      <p>\\n        Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\\n        ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\\n        pretium quis, sem.\\n      </p>\\n      <p>\\n        Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\\n        aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\\n        imperdiet a, venenatis vitae, justo.\\n      </p>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n        commodo ligula eget dolor. Aenean massa.\\n      </p>\\n      <p>\\n        Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\\n        ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\\n        pretium quis, sem.\\n      </p>\\n      <p>\\n        Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\\n        aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\\n        imperdiet a, venenatis vitae, justo.\\n      </p>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n        commodo ligula eget dolor. Aenean massa.\\n      </p>\\n      <p>\\n        Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\\n        ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\\n        pretium quis, sem.\\n      </p>\\n      <p>\\n        Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\\n        aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\\n        imperdiet a, venenatis vitae, justo.\\n      </p>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\\n        commodo ligula eget dolor. Aenean massa.\\n      </p>\\n      <p>\\n        Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\\n        ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\\n        pretium quis, sem.\\n      </p>\\n      <p>\\n        Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\\n        aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\\n        imperdiet a, venenatis vitae, justo.\\n      </p>\\n    </ModalContent>\\n  )\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch modal with scrolling body\\\"\\n        onClick={() => {\\n          setModalScrolling(\\'auto\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch modal with ScrollView\\\"\\n        onClick={() => {\\n          setModalScrolling(\\'custom\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <Button\\n        label=\\\"Launch modal with non-scrolling body\\\"\\n        onClick={() => {\\n          setModalScrolling(\\'none\\')\\n          setModalOpen(true)\\n        }}\\n      />\\n      <div>\\n        {modalOpen && (\\n          <Modal\\n            autoFocus={modalScrolling !== \\'none\\'}\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n            size=\\\"small\\\"\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Modal with long content</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(false)} />\\n            </ModalHeader>\\n            <ModalBody scrolling={modalScrolling}>\\n              {modalScrolling === \\'custom\\' ? (\\n                <ScrollView>{modalContent}</ScrollView>\\n              ) : (\\n                modalContent\\n              )}\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"OK\\\"\\n                onClick={() => setModalOpen(false)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(false)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(false);\n        const [modalScrolling, setModalScrolling] = React.useState('auto');\n        const modalCloseButtonRef = React.useRef();\n        const modalPrimaryButtonRef = React.useRef();\n        const modalContent = <ModalContent mdxType=\"ModalContent\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa.\n        </p>\n        <p>\n          Cum sociis natoque penatibus et magnis dis parturient montes,\n          nascetur ridiculus mus. Donec quam felis, ultricies nec,\n          pellentesque eu, pretium quis, sem.\n        </p>\n        <p>\n          Nulla consequat massa quis enim. Donec pede justo, fringilla\n          vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n          ut, imperdiet a, venenatis vitae, justo.\n        </p>\n        <p>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa.\n        </p>\n        <p>\n          Cum sociis natoque penatibus et magnis dis parturient montes,\n          nascetur ridiculus mus. Donec quam felis, ultricies nec,\n          pellentesque eu, pretium quis, sem.\n        </p>\n        <p>\n          Nulla consequat massa quis enim. Donec pede justo, fringilla\n          vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n          ut, imperdiet a, venenatis vitae, justo.\n        </p>\n        <p>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa.\n        </p>\n        <p>\n          Cum sociis natoque penatibus et magnis dis parturient montes,\n          nascetur ridiculus mus. Donec quam felis, ultricies nec,\n          pellentesque eu, pretium quis, sem.\n        </p>\n        <p>\n          Nulla consequat massa quis enim. Donec pede justo, fringilla\n          vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n          ut, imperdiet a, venenatis vitae, justo.\n        </p>\n        <p>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa.\n        </p>\n        <p>\n          Cum sociis natoque penatibus et magnis dis parturient montes,\n          nascetur ridiculus mus. Donec quam felis, ultricies nec,\n          pellentesque eu, pretium quis, sem.\n        </p>\n        <p>\n          Nulla consequat massa quis enim. Donec pede justo, fringilla\n          vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n          ut, imperdiet a, venenatis vitae, justo.\n        </p>\n        <p>\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa.\n        </p>\n        <p>\n          Cum sociis natoque penatibus et magnis dis parturient montes,\n          nascetur ridiculus mus. Donec quam felis, ultricies nec,\n          pellentesque eu, pretium quis, sem.\n        </p>\n        <p>\n          Nulla consequat massa quis enim. Donec pede justo, fringilla\n          vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n          ut, imperdiet a, venenatis vitae, justo.\n        </p>\n      </ModalContent>;\n        return <>\n        <Button label=\"Launch modal with scrolling body\" onClick={() => {\n            setModalScrolling('auto');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch modal with ScrollView\" onClick={() => {\n            setModalScrolling('custom');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <Button label=\"Launch modal with non-scrolling body\" onClick={() => {\n            setModalScrolling('none');\n            setModalOpen(true);\n          }} mdxType=\"Button\" />\n        <div>\n          {modalOpen && <Modal autoFocus={modalScrolling !== 'none'} closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} size=\"small\" mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with long content</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(false)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody scrolling={modalScrolling} mdxType=\"ModalBody\">\n                {modalScrolling === 'custom' ? <ScrollView mdxType=\"ScrollView\">\n                        {modalContent}\n                      </ScrollView> : modalContent}\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"OK\" onClick={() => setModalOpen(false)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(false)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"long-content-and-autofocus\"\n    }}>{`Long Content and Autofocus`}</h3>\n    <p>{`👉 If you have a Modal with `}<inlineCode parentName=\"p\">{`scrolling`}</inlineCode>{` set to `}<inlineCode parentName=\"p\">{`none`}</inlineCode>{`, you may want to disable\n`}<inlineCode parentName=\"p\">{`autoFocus`}</inlineCode>{` to prevent the modal from scrolling to the end immediately after\nbeing opened.`}</p>\n    <h2 {...{\n      \"id\": \"prevent-scrolling-underneath-the-modal\"\n    }}>{`Prevent Scrolling Underneath the Modal`}</h2>\n    <p>{`You can choose the mode in which Modal prevents the scroll of the page underneath.\nDefault mode prevents scrolling on `}<inlineCode parentName=\"p\">{`<body>`}</inlineCode>{` element and accounts for the scrollbar\nwidth. If you choose `}<inlineCode parentName=\"p\">{`off`}</inlineCode>{`, there will be no scroll prevention. If you need more\nflexibility, define your methods `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` (called on Modal's mount) and `}<inlineCode parentName=\"p\">{`reset`}</inlineCode>{`\n(called on Modal unmount) wrapped by an object and handle scroll prevention\nyourself.`}</p>\n    <Playground __position={10} __code={'() => {\\n  const [modalOpen, setModalOpen] = React.useState(null)\\n  const modalPrimaryButtonRef = React.useRef()\\n  const modalCloseButtonRef = React.useRef()\\n  const customScrollPreventionObject = {\\n    start: () => {\\n      // YOUR CUSTOM SCROLL PREVENTING LOGIC GOES HERE\\n      window.document.body.style.overflowY = \\'hidden\\'\\n    },\\n    reset: () => {\\n      // YOUR CUSTOM SCROLL RE-ENABLING LOGIC GOES HERE\\n      window.document.body.style.overflowY = \\'auto\\'\\n    },\\n  }\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Launch modal with default scroll prevention\\\"\\n        onClick={() => setModalOpen(1)}\\n      />\\n      <Button\\n        label=\\\"Launch modal with no scroll prevention\\\"\\n        onClick={() => setModalOpen(2)}\\n      />\\n      <Button\\n        label=\\\"Launch modal with custom scroll prevention\\\"\\n        onClick={() => setModalOpen(3)}\\n      />\\n      <div>\\n        {modalOpen === 1 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Modal with default scroll prevention</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(null)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  This Modal uses default scroll prevention on the document\\'s\\n                  <code>body</code> element.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Acknowledge\\\"\\n                onClick={() => setModalOpen(null)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(null)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n        {modalOpen === 2 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            preventScrollUnderneath=\\\"off\\\"\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Modal with no scroll prevention</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(null)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>This Modal does not prevent scrolling.</p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Acknowledge\\\"\\n                onClick={() => setModalOpen(null)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(null)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n        {modalOpen === 3 && (\\n          <Modal\\n            closeButtonRef={modalCloseButtonRef}\\n            preventScrollUnderneath={customScrollPreventionObject}\\n            primaryButtonRef={modalPrimaryButtonRef}\\n          >\\n            <ModalHeader>\\n              <ModalTitle>Modal with custom scroll prevention</ModalTitle>\\n              <ModalCloseButton onClick={() => setModalOpen(null)} />\\n            </ModalHeader>\\n            <ModalBody>\\n              <ModalContent>\\n                <p>\\n                  This Modal uses provided custom functions to prevent\\n                  scrolling and reset it on unmount.\\n                </p>\\n              </ModalContent>\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button\\n                label=\\\"Acknowledge\\\"\\n                onClick={() => setModalOpen(null)}\\n                ref={modalPrimaryButtonRef}\\n              />\\n              <Button\\n                color=\\\"secondary\\\"\\n                label=\\\"Close\\\"\\n                onClick={() => setModalOpen(null)}\\n                priority=\\\"outline\\\"\\n                ref={modalCloseButtonRef}\\n              />\\n            </ModalFooter>\\n          </Modal>\\n        )}\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Button,\n      CheckboxField,\n      FormLayout,\n      Modal,\n      ModalBody,\n      ModalCloseButton,\n      ModalContent,\n      ModalFooter,\n      ModalHeader,\n      ModalTitle,\n      Radio,\n      ScrollView,\n      TextArea,\n      TextField,\n      Toolbar,\n      ToolbarGroup,\n      ToolbarItem,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = React.useState(null);\n        const modalPrimaryButtonRef = React.useRef();\n        const modalCloseButtonRef = React.useRef();\n        const customScrollPreventionObject = {\n          start: () => {\n            // YOUR CUSTOM SCROLL PREVENTING LOGIC GOES HERE\n            window.document.body.style.overflowY = 'hidden';\n          },\n          reset: () => {\n            // YOUR CUSTOM SCROLL RE-ENABLING LOGIC GOES HERE\n            window.document.body.style.overflowY = 'auto';\n          }\n        };\n        return <>\n        <Button label=\"Launch modal with default scroll prevention\" onClick={() => setModalOpen(1)} mdxType=\"Button\" />\n        <Button label=\"Launch modal with no scroll prevention\" onClick={() => setModalOpen(2)} mdxType=\"Button\" />\n        <Button label=\"Launch modal with custom scroll prevention\" onClick={() => setModalOpen(3)} mdxType=\"Button\" />\n        <div>\n          {modalOpen === 1 && <Modal closeButtonRef={modalCloseButtonRef} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with default scroll prevention</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(null)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    This Modal uses default scroll prevention on the document's\n                    <code>body</code> element.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Acknowledge\" onClick={() => setModalOpen(null)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(null)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n          {modalOpen === 2 && <Modal closeButtonRef={modalCloseButtonRef} preventScrollUnderneath=\"off\" primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with no scroll prevention</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(null)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    This Modal does not prevent scrolling.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Acknowledge\" onClick={() => setModalOpen(null)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(null)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n          {modalOpen === 3 && <Modal closeButtonRef={modalCloseButtonRef} preventScrollUnderneath={customScrollPreventionObject} primaryButtonRef={modalPrimaryButtonRef} mdxType=\"Modal\">\n              <ModalHeader mdxType=\"ModalHeader\">\n                <ModalTitle mdxType=\"ModalTitle\">Modal with custom scroll prevention</ModalTitle>\n                <ModalCloseButton onClick={() => setModalOpen(null)} mdxType=\"ModalCloseButton\" />\n              </ModalHeader>\n              <ModalBody mdxType=\"ModalBody\">\n                <ModalContent mdxType=\"ModalContent\">\n                  <p>\n                    This Modal uses provided custom functions to prevent scrolling\n                    and reset it on unmount.\n                  </p>\n                </ModalContent>\n              </ModalBody>\n              <ModalFooter mdxType=\"ModalFooter\">\n                <Button label=\"Acknowledge\" onClick={() => setModalOpen(null)} ref={modalPrimaryButtonRef} mdxType=\"Button\" />\n                <Button color=\"secondary\" label=\"Close\" onClick={() => setModalOpen(null)} priority=\"outline\" ref={modalCloseButtonRef} mdxType=\"Button\" />\n              </ModalFooter>\n            </Modal>}\n        </div>\n      </>;\n      }}\n    </Playground>\n    {\n      /* markdownlint-disable MD024 */\n    }\n    <h2 {...{\n      \"id\": \"forwarding-html-attributes\"\n    }}>{`Forwarding HTML Attributes`}</h2>\n    <p>{`In addition to the options below in the `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`component's API`}</a>{` section, you\ncan specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or `}<strong parentName=\"p\">{`any HTML attribute you like.`}</strong>{` All\nattributes that don't interfere with the API are forwarded to the:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<div>`}</inlineCode>{` HTML element in case of the `}<inlineCode parentName=\"li\">{`Modal`}</inlineCode>{` component. This `}<inlineCode parentName=\"li\">{`<div>`}</inlineCode>{` is not the\nroot, but its first child which represents the modal window.`}</li>\n      <li parentName=\"ul\">{`root `}<inlineCode parentName=\"li\">{`<div>`}</inlineCode>{` HTML element in case of `}<inlineCode parentName=\"li\">{`ModalHeader`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`ModalBody`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`ModalContent`}</inlineCode>{`\nand `}<inlineCode parentName=\"li\">{`ModalFooter`}</inlineCode>{` components.`}</li>\n      <li parentName=\"ul\">{`heading HTML element, which level can be specified through `}<inlineCode parentName=\"li\">{`level`}</inlineCode>{` option, in\ncase of the `}<inlineCode parentName=\"li\">{`ModalTitle`}</inlineCode>{` component.`}</li>\n      <li parentName=\"ul\">{`native HTML `}<inlineCode parentName=\"li\">{`<button>`}</inlineCode>{` in case of the `}<inlineCode parentName=\"li\">{`ModalCloseButton`}</inlineCode>{` component.`}</li>\n    </ul>\n    <p>{`This enables making the component interactive and helps to improve its\naccessibility.`}</p>\n    <p>{`👉 Refer to the MDN reference for the full list of supported attributes of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div#attributes\"\n      }}>{`div`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#attributes\"\n      }}>{`heading`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attributes\"\n      }}>{`button`}</a>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props table of={Modal} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"modalheader-1\"\n    }}>{`ModalHeader`}</h3>\n    <Props table of={ModalHeader} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"modaltitle\"\n    }}>{`ModalTitle`}</h3>\n    <Props table of={ModalTitle} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"modalclosebutton\"\n    }}>{`ModalCloseButton`}</h3>\n    <Props table of={ModalCloseButton} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"modalbody-1\"\n    }}>{`ModalBody`}</h3>\n    <Props table of={ModalBody} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"modalcontent\"\n    }}>{`ModalContent`}</h3>\n    <Props table of={ModalContent} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"modalfooter-1\"\n    }}>{`ModalFooter`}</h3>\n    <Props table of={ModalFooter} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__padding-x`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Inline padding of individual modal components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__padding-y`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Block padding of individual modal components`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__background`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal background (including `}<inlineCode parentName=\"td\">{`url()`}</inlineCode>{` or gradient)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__box-shadow`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal box shadow`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__separator__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of separator between modal header, body, and footer`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__separator__color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Color of separator between modal header, body, and footer`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__outer-spacing-xs`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Spacing around modal, `}<inlineCode parentName=\"td\">{`xs`}</inlineCode>{` screen size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__outer-spacing-sm`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Spacing around modal, `}<inlineCode parentName=\"td\">{`sm`}</inlineCode>{` screen size and bigger`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__header__gap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal header gap between children`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__footer__background`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal footer background (including `}<inlineCode parentName=\"td\">{`url()`}</inlineCode>{` or gradient)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__footer__gap`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal footer gap between children`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal__backdrop__background`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Modal backdrop background (including `}<inlineCode parentName=\"td\">{`url()`}</inlineCode>{` or gradient)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--auto__min-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Min width of auto-sized modal (when enough screen estate)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--auto__max-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Max width of auto-sized modal (when enough screen estate)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--small__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of small modal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--medium__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of medium modal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--large__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of large modal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--fullscreen__width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of fullscreen modal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-Modal--fullscreen__height`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Height of fullscreen modal`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}