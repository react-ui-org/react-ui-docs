(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{KEof:function(e,t,l){"use strict";l.r(t),l.d(t,"_frontmatter",(function(){return m})),l.d(t,"default",(function(){return s}));var a=l("Fcif"),n=l("dV/x"),i=l("mXGw"),r=l("/FXl"),d=l("TjRS"),o=l("ZFoC"),b=l("XZkq"),c=l("m+kp");l("aD51");const m={};void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/customize/theming.mdx"}});const u={_frontmatter:m},p=d.a;function s(e){let{components:t}=e,l=Object(n.a)(e,["components"]);return Object(r.b)(p,Object(a.a)({},u,l,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"theming"},"Theming"),Object(r.b)("p",null,"From the very beginning, React UI has been designed with a great emphasis on\ncustomizability. We decided to leverage CSS custom properties for this feature\nfor two main reasons:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"We believe in ",Object(r.b)("strong",{parentName:"p"},"power of native CSS"),". Preprocessors are still a thing, but\nit's not necessary to go as far as for CSS-in-JS to make a UI customizable.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Thanks to its JavaScript API, CSS custom properties are both ",Object(r.b)("strong",{parentName:"p"},"readable and\nwritable from JS code"),"."))),Object(r.b)("h2",{id:"theming-options"},"Theming Options"),Object(r.b)("p",null,"CSS custom properties are used to define common visual properties like colors,\nfonts, borders, shadows, or spacing. They come prefixed with ",Object(r.b)("inlineCode",{parentName:"p"},"rui-")," so they\ndon't get in way of other custom properties in your project."),Object(r.b)("p",null,"Example ",Object(r.b)("inlineCode",{parentName:"p"},"theme.scss"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scss"},":root {\n  // Brand colors\n  --rui-color-primary: #00778b;\n  --rui-color-primary-light: #{lighten(#00778b, 70%)};\n  --rui-color-primary-dark: #{darken(#00778b, 4%)};\n  --rui-color-primary-darker: #{darken(#00778b, 8%)};\n  --rui-color-on-primary: #fff;\n  --rui-color-secondary: #fa4616;\n  --rui-color-secondary-light: #{lighten(#fa4616, 45%)};\n  --rui-color-secondary-dark: #{darken(#fa4616, 4%)};\n  --rui-color-secondary-darker: #{darken(#fa4616, 8%)};\n  --rui-color-on-secondary: #fff;\n}\n")),Object(r.b)("p",null,"It is also possible to adjust some properties on individual components level,\npreferably by reusing the global settings:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scss"},":root {\n  // Alerts: common properties\n  --rui-alert-border-width: var(--rui-border-width);\n  --rui-alert-border-radius: var(--rui-border-radius);\n  --rui-alert-padding: var(--rui-spacing-2);\n}\n")),Object(r.b)("p",null,"You can adjust any of these options in your styles. See the\n",Object(r.b)("a",{parentName:"p",href:"https://github.com/react-ui-org/react-ui/blob/master/src/lib/theme.scss"},"default theme"),"\nfor the full list of available settings."),Object(r.b)("p",null,"Ô∏èüëâ Please note that ",Object(r.b)("strong",{parentName:"p"},"breakpoint values are exported as read-only")," since CSS\ncustom properties\n",Object(r.b)("a",{parentName:"p",href:"https://www.w3.org/TR/css-variables-1/#using-variables"},"cannot be used within media queries"),"\n(because media query is not a CSS property)."),Object(r.b)("h2",{id:"forms"},"Forms"),Object(r.b)("h3",{id:"basic-theming"},"Basic Theming"),Object(r.b)("p",null,"The following theme options define basic appearance of form fields. The options\ncan be divided into three groups by their specificity:"),Object(r.b)("h4",{id:"common-options"},"Common Options"),Object(r.b)("p",null,"Theming options affecting all form components."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-label-color")),Object(r.b)("td",{parentName:"tr",align:null},"Label text color")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-label-font-size")),Object(r.b)("td",{parentName:"tr",align:null},"Label font size")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-help-text-font-size")),Object(r.b)("td",{parentName:"tr",align:null},"Help text font size")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-help-text-font-style")),Object(r.b)("td",{parentName:"tr",align:null},"Help text font style, eg. italic")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-help-text-color")),Object(r.b)("td",{parentName:"tr",align:null},"Help text color")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-required-sign")),Object(r.b)("td",{parentName:"tr",align:null},"Text appended to required input labels")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-required-sign-color")),Object(r.b)("td",{parentName:"tr",align:null},"Color of text appended to required input labels")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-disabled-cursor")),Object(r.b)("td",{parentName:"tr",align:null},"Cursor to show on hovering disabled form fields")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-disabled-opacity")),Object(r.b)("td",{parentName:"tr",align:null},"Opacity of disabled form fields (inc. label and help text)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-horizontal-label-alignment")),Object(r.b)("td",{parentName:"tr",align:null},"Text alignment of labels in horizontal layout")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-horizontal-label-min-width")),Object(r.b)("td",{parentName:"tr",align:null},"Minimum width of labels in horizontal layout")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-horizontal-label-width")),Object(r.b)("td",{parentName:"tr",align:null},"Default width of labels in horizontal layout")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-horizontal-full-width-label-width")),Object(r.b)("td",{parentName:"tr",align:null},"Default width of labels in full-width horizontal layout")))),Object(r.b)("h4",{id:"shared-textfield-textarea-and-selectfield-options"},"Shared TextField, TextArea and SelectField Options"),Object(r.b)("p",null,"Options shared by some components. This includes\n",Object(r.b)("a",{parentName:"p",href:"/components/ui/text-field"},"TextField"),",\n",Object(r.b)("a",{parentName:"p",href:"/components/ui/text-area"},"TextArea"),", and\n",Object(r.b)("a",{parentName:"p",href:"/components/ui/select-field"},"SelectField"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-input-width")),Object(r.b)("td",{parentName:"tr",align:null},"Default text input and select box width")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-input-min-width")),Object(r.b)("td",{parentName:"tr",align:null},"Minimum text input and select box width")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-border-width")),Object(r.b)("td",{parentName:"tr",align:null},"Control border width")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-border-radius")),Object(r.b)("td",{parentName:"tr",align:null},"Control corner radius")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-placeholder-color")),Object(r.b)("td",{parentName:"tr",align:null},"Placeholder text color")))),Object(r.b)("h4",{id:"selectfield-specific-options"},"SelectField Specific Options"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-caret-border-style")),Object(r.b)("td",{parentName:"tr",align:null},"SelectField arrow border style (eg. solid)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-caret-background")),Object(r.b)("td",{parentName:"tr",align:null},"SelectField arrow background")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-field-disabled-select-option-color")),Object(r.b)("td",{parentName:"tr",align:null},"Text color of disabled SelectField options")))),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)(o.c,{__position:0,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n        .example--themed-form-fields {\n          --rui-form-field-input-width: 300px;\n          --rui-form-field-border-width: 2px;\n          --rui-form-field-border-radius: 0.5rem;\n          --rui-form-field-caret-border-style: solid;\n        }\n      `}\n      </style>\n      <TextField\n        id="default-outline-text-field"\n        label="Default outline text field"\n      />\n      <TextField\n        id="default-filled-text-field"\n        label="Default filled text field"\n        variant="filled"\n      />\n      <SelectField\n        changeHandler={e => setFruit(e.target.value)}\n        id="default-outline-select-field"\n        label="Default outline select field"\n        options={options}\n        value={fruit}\n      />\n      <div className="example example--themed-form-fields">\n        <TextField\n          id="themed-outline-text-field"\n          label="Themed outline text field"\n        />\n        <TextField\n          id="themed-filled-text-field"\n          label="Themed filled text field"\n          variant="filled"\n        />\n        <SelectField\n          changeHandler={e => setFruit(e.target.value)}\n          id="themed-outline-select-field"\n          label="Themed outline select field"\n          options={options}\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:l,DefaultLayout:d.a,Playground:o.c,SelectField:b.a,TextField:c.a,DefaultLayout:d.a,_frontmatter:m},mdxType:"Playground"},()=>{const[e,t]=i.useState("apple"),l=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(r.b)(i.Fragment,null,Object(r.b)("style",{type:"text/css"},"\n          .example--themed-form-fields {\n            --rui-form-field-input-width: 300px;\n            --rui-form-field-border-width: 2px;\n            --rui-form-field-border-radius: 0.5rem;\n            --rui-form-field-caret-border-style: solid;\n          }\n        "),Object(r.b)(c.a,{id:"default-outline-text-field",label:"Default outline text field",mdxType:"TextField"}),Object(r.b)(c.a,{id:"default-filled-text-field",label:"Default filled text field",variant:"filled",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"default-outline-select-field",label:"Default outline select field",options:l,value:e,mdxType:"SelectField"}),Object(r.b)("div",{className:"example example--themed-form-fields"},Object(r.b)(c.a,{id:"themed-outline-text-field",label:"Themed outline text field",mdxType:"TextField"}),Object(r.b)(c.a,{id:"themed-filled-text-field",label:"Themed filled text field",variant:"filled",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"themed-outline-select-field",label:"Themed outline select field",options:l,value:e,mdxType:"SelectField"})))}),Object(r.b)("h4",{id:"validation-states"},"Validation States"),Object(r.b)("p",null,"Theming options for validation states are shared by all components. Naming\nconvention looks as follows:"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"--rui-form-field-<VALIDATION STATE>-<INTERACTION STATE>-<PROPERTY>")),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<VALIDATION STATE>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"invalid"),", ",Object(r.b)("inlineCode",{parentName:"li"},"valid"),", or ",Object(r.b)("inlineCode",{parentName:"li"},"warning")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<INTERACTION STATE>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"default")," or ",Object(r.b)("inlineCode",{parentName:"li"},"disabled")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<PROPERTY>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"color"),", ",Object(r.b)("inlineCode",{parentName:"li"},"border-color"),", ",Object(r.b)("inlineCode",{parentName:"li"},"background"),", ",Object(r.b)("inlineCode",{parentName:"li"},"box-shadow"),", or\n",Object(r.b)("inlineCode",{parentName:"li"},"surrounding-text-color"))),Object(r.b)("p",null,"Not all properties are used by all components, this varies from component to\ncomponent. Also, ",Object(r.b)("inlineCode",{parentName:"p"},"hover")," interaction state is unavailable for validation states,\n",Object(r.b)("inlineCode",{parentName:"p"},"default")," state appearance is retained on hovering. ",Object(r.b)("inlineCode",{parentName:"p"},"focus")," state is inherited\nfrom default form field appearance (i.e. as if no validation state was set)."),Object(r.b)("p",null,"Example:"),Object(r.b)(o.c,{__position:1,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n      .example--themed-form-field-validation-states {\n        --rui-form-field-valid-default-color: white;\n        --rui-form-field-valid-default-background: var(--rui-color-success);\n      }\n    `}\n      </style>\n      <TextField\n        id="default-valid-text-field"\n        label="Default valid text field"\n        validationState="valid"\n        validationText="This field is valid"\n      />\n      <SelectField\n        changeHandler={e => setFruit(e.target.value)}\n        id="default-valid-select-field"\n        label="Default valid select field"\n        options={options}\n        validationState="valid"\n        validationText="This field is valid"\n        value={fruit}\n      />\n      <div className="example example--themed-form-field-validation-states">\n        <TextField\n          id="themed-valid-text-field"\n          label="Themed valid text field"\n          validationState="valid"\n          validationText="This field is valid"\n        />\n        <SelectField\n          changeHandler={e => setFruit(e.target.value)}\n          id="themed-valid-select-field"\n          label="Themed valid select field"\n          options={options}\n          validationState="valid"\n          validationText="This field is valid"\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:l,DefaultLayout:d.a,Playground:o.c,SelectField:b.a,TextField:c.a,DefaultLayout:d.a,_frontmatter:m},mdxType:"Playground"},()=>{const[e,t]=i.useState("apple"),l=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(r.b)(i.Fragment,null,Object(r.b)("style",{type:"text/css"},"\n        .example--themed-form-field-validation-states {\n          --rui-form-field-valid-default-color: white;\n          --rui-form-field-valid-default-background: var(--rui-color-success);\n        }\n      "),Object(r.b)(c.a,{id:"default-valid-text-field",label:"Default valid text field",validationState:"valid",validationText:"This field is valid",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"default-valid-select-field",label:"Default valid select field",options:l,validationState:"valid",validationText:"This field is valid",value:e,mdxType:"SelectField"}),Object(r.b)("div",{className:"example example--themed-form-field-validation-states"},Object(r.b)(c.a,{id:"themed-valid-text-field",label:"Themed valid text field",validationState:"valid",validationText:"This field is valid",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"themed-valid-select-field",label:"Themed valid select field",options:l,validationState:"valid",validationText:"This field is valid",value:e,mdxType:"SelectField"})))}),Object(r.b)("h4",{id:"text-control-and-select-box-variants"},"Text Control and Select Box Variants"),Object(r.b)("p",null,"Theming options for textual controls and select boxes:\n",Object(r.b)("a",{parentName:"p",href:"/components/ui/text-field"},"TextField"),",\n",Object(r.b)("a",{parentName:"p",href:"/components/ui/text-area"},"TextArea"),", and\n",Object(r.b)("a",{parentName:"p",href:"/components/ui/select-field"},"SelectField"),".\nNaming is very similar to validation state options:"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"--rui-form-field-<VISUAL VARIANT>-<INTERACTION STATE>-<PROPERTY>")),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<VISUAL VARIANT>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"filled")," or ",Object(r.b)("inlineCode",{parentName:"li"},"outline")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<INTERACTION STATE>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"default"),", ",Object(r.b)("inlineCode",{parentName:"li"},"hover"),", ",Object(r.b)("inlineCode",{parentName:"li"},"focus"),", or ",Object(r.b)("inlineCode",{parentName:"li"},"disabled")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<PROPERTY>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"color"),", ",Object(r.b)("inlineCode",{parentName:"li"},"border-color"),", ",Object(r.b)("inlineCode",{parentName:"li"},"background"),", ",Object(r.b)("inlineCode",{parentName:"li"},"box-shadow"),", or\n",Object(r.b)("inlineCode",{parentName:"li"},"surrounding-text-color")," (the last one being available only for\n",Object(r.b)("inlineCode",{parentName:"li"},"default")," and ",Object(r.b)("inlineCode",{parentName:"li"},"disabled")," interaction states)")),Object(r.b)("p",null,"Example:"),Object(r.b)(o.c,{__position:2,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n      .example--themed-form-field-variants {\n        --rui-form-field-border-width: 0px;\n        --rui-form-field-outline-default-box-shadow:\n          0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n        --rui-form-field-outline-hover-box-shadow:\n          0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n        --rui-form-field-outline-focus-box-shadow:\n          inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n      }\n    `}\n      </style>\n      <TextField\n        id="default-outline-text-field"\n        label="Default outline text field"\n      />\n      <SelectField\n        changeHandler={e => setFruit(e.target.value)}\n        id="default-outline-select-field"\n        label="Default outline select field"\n        options={options}\n        value={fruit}\n      />\n      <div className="example example--themed-form-field-variants">\n        <TextField\n          id="themed-outline-text-field"\n          label="Themed outline text field"\n        />\n        <SelectField\n          changeHandler={e => setFruit(e.target.value)}\n          id="themed-outline-select-field"\n          label="Themed outline select field"\n          options={options}\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:l,DefaultLayout:d.a,Playground:o.c,SelectField:b.a,TextField:c.a,DefaultLayout:d.a,_frontmatter:m},mdxType:"Playground"},()=>{const[e,t]=i.useState("apple"),l=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(r.b)(i.Fragment,null,Object(r.b)("style",{type:"text/css"},"\n        .example--themed-form-field-variants {\n          --rui-form-field-border-width: 0px;\n          --rui-form-field-outline-default-box-shadow:\n            0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n          --rui-form-field-outline-hover-box-shadow:\n            0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n          --rui-form-field-outline-focus-box-shadow:\n            inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n        }\n      "),Object(r.b)(c.a,{id:"default-outline-text-field",label:"Default outline text field",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"default-outline-select-field",label:"Default outline select field",options:l,value:e,mdxType:"SelectField"}),Object(r.b)("div",{className:"example example--themed-form-field-variants"},Object(r.b)(c.a,{id:"themed-outline-text-field",label:"Themed outline text field",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"themed-outline-select-field",label:"Themed outline select field",options:l,value:e,mdxType:"SelectField"})))}),Object(r.b)("h3",{id:"form-field-sizes"},"Form Field Sizes"),Object(r.b)("p",null,"Available sizes can be adjusted as follows:"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"--rui-form-field-<SIZE>-<PROPERTY>")),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<SIZE>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"small"),", ",Object(r.b)("inlineCode",{parentName:"li"},"medium"),", or ",Object(r.b)("inlineCode",{parentName:"li"},"large")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<PROPERTY>")," is one of ",Object(r.b)("inlineCode",{parentName:"li"},"height"),", ",Object(r.b)("inlineCode",{parentName:"li"},"padding-x"),", ",Object(r.b)("inlineCode",{parentName:"li"},"padding-y"),", or ",Object(r.b)("inlineCode",{parentName:"li"},"font-size"))),Object(r.b)("p",null,"Example:"),Object(r.b)(o.c,{__position:3,__code:'() => {\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <>\n      <style type="text/css">\n        {`\n      .example--themed-form-field-sizes {\n        --rui-form-field-border-radius: 0.5rem;\n        --rui-form-field-medium-height: 3rem;\n        --rui-form-field-medium-padding-x: 1.25rem;\n        --rui-form-field-caret-border-style: solid;\n      }\n    `}\n      </style>\n      <TextField\n        id="default-medium-text-field"\n        label="Default medium text field"\n      />\n      <SelectField\n        changeHandler={e => setFruit(e.target.value)}\n        id="default-medium-select-field"\n        label="Default medium select field"\n        options={options}\n        value={fruit}\n      />\n      <div className="example example--themed-form-field-sizes">\n        <TextField\n          id="themed-medium-text-field"\n          label="Themed medium text field"\n        />\n        <SelectField\n          changeHandler={e => setFruit(e.target.value)}\n          id="themed-medium-select-field"\n          label="Themed medium select field"\n          options={options}\n          value={fruit}\n        />\n      </div>\n    </>\n  )\n}',__scope:{props:l,DefaultLayout:d.a,Playground:o.c,SelectField:b.a,TextField:c.a,DefaultLayout:d.a,_frontmatter:m},mdxType:"Playground"},()=>{const[e,t]=i.useState("apple"),l=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(r.b)(i.Fragment,null,Object(r.b)("style",{type:"text/css"},"\n        .example--themed-form-field-sizes {\n          --rui-form-field-border-radius: 0.5rem;\n          --rui-form-field-medium-height: 3rem;\n          --rui-form-field-medium-padding-x: 1.25rem;\n          --rui-form-field-caret-border-style: solid;\n        }\n      "),Object(r.b)(c.a,{id:"default-medium-text-field",label:"Default medium text field",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"default-medium-select-field",label:"Default medium select field",options:l,value:e,mdxType:"SelectField"}),Object(r.b)("div",{className:"example example--themed-form-field-sizes"},Object(r.b)(c.a,{id:"themed-medium-text-field",label:"Themed medium text field",mdxType:"TextField"}),Object(r.b)(b.a,{changeHandler:e=>t(e.target.value),id:"themed-medium-select-field",label:"Themed medium select field",options:l,value:e,mdxType:"SelectField"})))}),Object(r.b)("h3",{id:"form-layout"},"Form Layout"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-layout-horizontal-label-auto-width")),Object(r.b)("td",{parentName:"tr",align:null},"Width of labels in horizontal form layout, ",Object(r.b)("inlineCode",{parentName:"td"},"auto")," sizing")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-layout-horizontal-label-limited-width")),Object(r.b)("td",{parentName:"tr",align:null},"Width of labels in horizontal form layout, ",Object(r.b)("inlineCode",{parentName:"td"},"limited")," sizing")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"--rui-form-layout-horizontal-label-default-width")),Object(r.b)("td",{parentName:"tr",align:null},"Width of labels in horizontal form layout, ",Object(r.b)("inlineCode",{parentName:"td"},"default")," sizing")))),Object(r.b)("h2",{id:"best-practices"},"Best Practices"),Object(r.b)("p",null,"It's a good idea to start with changing the ",Object(r.b)("strong",{parentName:"p"},"global settings first"),". Widely\nreused settings such as colors, typography, borders or spacing values should be\nadjusted first because they define the basic appearance of all components."),Object(r.b)("p",null,"Having finished the customization at the global level, you can ",Object(r.b)("strong",{parentName:"p"},"then proceed to\ncustomize the appearance of individual components")," ‚Äî if necessary at all. Even\nthen you should also reuse existing global settings as much as possible to\nensure that your UI is consistent and works as a system."),Object(r.b)("p",null,"For the same reason, if you have any custom components in your UI, you should\n",Object(r.b)("strong",{parentName:"p"},"reuse the global theming options in your own CSS"),", too."))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/customize/theming.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-customize-theming-mdx-f3d445eff44ff4b0e83f.js.map