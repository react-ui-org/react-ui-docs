(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"7f4T":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return h}));var a=t("Fcif"),o=t("6CzD"),i=t("dV/x"),r=t("mXGw"),s=t("/FXl"),l=t("TjRS"),c=t("ZFoC"),m=t("R5VZ"),u=t("zIt3"),d=t("QiaH");t("aD51");const b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/ui/Table/README.mdx"}});const p={_frontmatter:b},f=l.a;function h(e){let{components:n}=e,t=Object(i.a)(e,["components"]);return Object(s.b)(f,Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"table"},"Table"),Object(s.b)("p",null,"Table presents complex tabular data in an easy-to-scan way."),Object(s.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(s.b)("p",null,"To implement the Table component, you need to import it first:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"import { Table } from '@react-ui-org/react-ui';\n")),Object(s.b)("p",null,"And use it:"),Object(s.b)(c.c,{__position:0,__code:"<Table\n  columns={[\n    {\n      label: 'ID',\n      name: 'id',\n    },\n    {\n      label: 'Name',\n      name: 'name',\n    },\n    {\n      format: row => row.dateOfBirth.toLocaleDateString('en-GB'),\n      label: 'Date of birth',\n      name: 'dateOfBirth',\n    },\n  ]}\n  rows={[\n    {\n      dateOfBirth: new Date(1940, 10, 9),\n      id: 1,\n      name: 'John Lennon',\n    },\n    {\n      dateOfBirth: new Date(1942, 6, 18),\n      id: 2,\n      name: 'Paul McCartney',\n    },\n    {\n      dateOfBirth: new Date(1943, 2, 25),\n      id: 3,\n      name: 'George Harrison',\n    },\n    {\n      dateOfBirth: new Date(1940, 7, 7),\n      id: 4,\n      name: 'Richard Starkey (Ringo Starr)',\n    },\n  ]}\n/>",__scope:{props:t,DefaultLayout:l.a,Playground:c.c,Props:c.d,Icon:m.a,ScrollView:u.a,Table:d.a,DefaultLayout:l.a,_frontmatter:b},mdxType:"Playground"},Object(s.b)(d.a,{columns:[{label:"ID",name:"id"},{label:"Name",name:"name"},{format:e=>e.dateOfBirth.toLocaleDateString("en-GB"),label:"Date of birth",name:"dateOfBirth"}],rows:[{dateOfBirth:new Date(1940,10,9),id:1,name:"John Lennon"},{dateOfBirth:new Date(1942,6,18),id:2,name:"Paul McCartney"},{dateOfBirth:new Date(1943,2,25),id:3,name:"George Harrison"},{dateOfBirth:new Date(1940,7,7),id:4,name:"Richard Starkey (Ringo Starr)"}],mdxType:"Table"})),Object(s.b)("p",null,"See ",Object(s.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(s.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Keep headers short")," so users can quickly scan the content of the table.\nJust one or two words should be enough.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Tables are ",Object(s.b)("strong",{parentName:"p"},"good for displaying complex tabular data.")," For simpler data sets\nor even plain key-value pairs, consider using the\n",Object(s.b)("a",{parentName:"p",href:"/components/layout/list"},"List")," component.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Tables make ",Object(s.b)("strong",{parentName:"p"},"lots of information easier to scan and compare.")," If you have\nfewer sections and want to emphasize each group more, consider using\n",Object(s.b)("a",{parentName:"p",href:"/components/ui/card"},"Cards"),"."))),Object(s.b)("h2",{id:"responsive-tables"},"Responsive Tables"),Object(s.b)("p",null,"The easiest way to make tables responsive is to wrap them with the\n",Object(s.b)("a",{parentName:"p",href:"/components/ui/scroll-view"},"ScrollView")," component in the horizontal mode."),Object(s.b)(c.c,{__position:1,__code:"<ScrollView direction=\"horizontal\" shadowSize=\"100px\">\n  <Table\n    columns={[\n      {\n        label: 'ID',\n        name: 'id',\n      },\n      {\n        format: row => (\n          <span style={{ whiteSpace: 'nowrap' }}>{row.name}</span>\n        ),\n        label: 'Name',\n        name: 'name',\n      },\n      {\n        format: row => (\n          <span style={{ whiteSpace: 'nowrap' }}>{row.note}</span>\n        ),\n        label: 'Note',\n        name: 'note',\n      },\n      {\n        format: row => row.dateOfBirth.toLocaleDateString('en-GB'),\n        label: 'Date of birth',\n        name: 'dateOfBirth',\n      },\n    ]}\n    rows={[\n      {\n        dateOfBirth: new Date(1940, 10, 9),\n        id: 1,\n        name: 'John Lennon',\n        note:\n          'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' +\n          'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' +\n          'natoque penatibus et magnis dis parturient montes, nascetur ' +\n          'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' +\n          'eu, pretium quis, sem.',\n      },\n      {\n        dateOfBirth: new Date(1942, 6, 18),\n        id: 2,\n        name: 'Paul McCartney',\n        note:\n          'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' +\n          'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' +\n          'natoque penatibus et magnis dis parturient montes, nascetur ' +\n          'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' +\n          'eu, pretium quis, sem.',\n      },\n      {\n        dateOfBirth: new Date(1943, 2, 25),\n        id: 3,\n        name: 'George Harrison',\n        note:\n          'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' +\n          'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' +\n          'natoque penatibus et magnis dis parturient montes, nascetur ' +\n          'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' +\n          'eu, pretium quis, sem.',\n      },\n      {\n        dateOfBirth: new Date(1940, 7, 7),\n        id: 4,\n        name: 'Richard Starkey (Ringo Starr)',\n        note:\n          'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' +\n          'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' +\n          'natoque penatibus et magnis dis parturient montes, nascetur ' +\n          'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' +\n          'eu, pretium quis, sem.',\n      },\n    ]}\n  />\n</ScrollView>",__scope:{props:t,DefaultLayout:l.a,Playground:c.c,Props:c.d,Icon:m.a,ScrollView:u.a,Table:d.a,DefaultLayout:l.a,_frontmatter:b},mdxType:"Playground"},Object(s.b)(u.a,{direction:"horizontal",shadowSize:"100px",mdxType:"ScrollView"},Object(s.b)(d.a,{columns:[{label:"ID",name:"id"},{format:e=>Object(s.b)("span",{style:{whiteSpace:"nowrap"}},e.name),label:"Name",name:"name"},{format:e=>Object(s.b)("span",{style:{whiteSpace:"nowrap"}},e.note),label:"Note",name:"note"},{format:e=>e.dateOfBirth.toLocaleDateString("en-GB"),label:"Date of birth",name:"dateOfBirth"}],rows:[{dateOfBirth:new Date(1940,10,9),id:1,name:"John Lennon",note:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem."},{dateOfBirth:new Date(1942,6,18),id:2,name:"Paul McCartney",note:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem."},{dateOfBirth:new Date(1943,2,25),id:3,name:"George Harrison",note:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem."},{dateOfBirth:new Date(1940,7,7),id:4,name:"Richard Starkey (Ringo Starr)",note:"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem."}],mdxType:"Table"}))),Object(s.b)("h2",{id:"sortable-columns"},"Sortable Columns"),Object(s.b)("p",null,"The Table supports sorting indicators by adding a simple configuration."),Object(s.b)("p",null,"⚠️ The Table component only provides necessary visual support for sorting. Aside\nfrom icons, you must ",Object(s.b)("strong",{parentName:"p"},"provide the comparing functionality yourself")," if you\naren't rendering ",Object(s.b)("strong",{parentName:"p"},"already sorted data.")," The reason for this decision is that\nclient often does not have access to the full dataset."),Object(s.b)("p",null,"The following is an example of custom sorting function executed on the client."),Object(s.b)(c.c,{__position:2,__code:"() => {\n  const [tableSortColumn, setTableSortColumn] = React.useState('id')\n  const [tableSortDirection, setTableSortDirection] = React.useState('asc')\n  const [rows, setRows] = React.useState([\n    {\n      dateOfBirth: new Date(1940, 10, 9),\n      id: 1,\n      name: 'John Lennon',\n    },\n    {\n      dateOfBirth: new Date(1942, 6, 18),\n      id: 2,\n      name: 'Paul McCartney',\n    },\n    {\n      dateOfBirth: new Date(1943, 2, 25),\n      id: 3,\n      name: 'George Harrison',\n    },\n    {\n      dateOfBirth: new Date(1940, 7, 7),\n      id: 4,\n      name: 'Richard Starkey (Ringo Starr)',\n    },\n  ])\n  const compare = (items, key, direction) => {\n    const sortedItems = [...items]\n    if (key === 'id' || key === 'dateOfBirth') {\n      sortedItems.sort((a, b) => b[key] - a[key])\n    } else if (key === 'name') {\n      sortedItems.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1\n        }\n        if (a.name > b.name) {\n          return 1\n        }\n        return 0\n      })\n    }\n    return direction === 'desc' ? sortedItems.reverse() : sortedItems\n  }\n  const columns = [\n    {\n      isSortable: true,\n      label: 'ID',\n      name: 'id',\n    },\n    {\n      isSortable: true,\n      label: 'Name',\n      name: 'name',\n    },\n    {\n      format: row => row.dateOfBirth.toISOString(),\n      isSortable: true,\n      label: 'Date of birth',\n      name: 'dateOfBirth',\n    },\n  ]\n  return (\n    <Table\n      columns={columns}\n      rows={rows}\n      sort={{\n        ascendingIcon: <Icon icon=\"up\" />,\n        changeHandler: (column, direction) => {\n          setTableSortColumn(column)\n          setTableSortDirection(direction === 'asc' ? 'desc' : 'asc')\n          setRows(compare(rows, column, direction))\n        },\n        column: tableSortColumn,\n        descendingIcon: <Icon icon=\"down\" />,\n        direction: tableSortDirection,\n      }}\n    />\n  )\n}",__scope:{props:t,DefaultLayout:l.a,Playground:c.c,Props:c.d,Icon:m.a,ScrollView:u.a,Table:d.a,DefaultLayout:l.a,_frontmatter:b},mdxType:"Playground"},()=>{const[e,n]=r.useState("id"),[t,a]=r.useState("asc"),[i,l]=r.useState([{dateOfBirth:new Date(1940,10,9),id:1,name:"John Lennon"},{dateOfBirth:new Date(1942,6,18),id:2,name:"Paul McCartney"},{dateOfBirth:new Date(1943,2,25),id:3,name:"George Harrison"},{dateOfBirth:new Date(1940,7,7),id:4,name:"Richard Starkey (Ringo Starr)"}]);return Object(s.b)(d.a,{columns:[{isSortable:!0,label:"ID",name:"id"},{isSortable:!0,label:"Name",name:"name"},{format:e=>e.dateOfBirth.toISOString(),isSortable:!0,label:"Date of birth",name:"dateOfBirth"}],rows:i,sort:{ascendingIcon:Object(s.b)(m.a,{icon:"up",mdxType:"Icon"}),changeHandler:(e,t)=>{n(e),a("asc"===t?"desc":"asc"),l(((e,n,t)=>{const a=Object(o.a)(e);return"id"===n||"dateOfBirth"===n?a.sort((e,t)=>t[n]-e[n]):"name"===n&&a.sort((e,n)=>e.name<n.name?-1:e.name>n.name?1:0),"desc"===t?a.reverse():a})(i,e,t))},column:e,descendingIcon:Object(s.b)(m.a,{icon:"down",mdxType:"Icon"}),direction:t},mdxType:"Table"})}),Object(s.b)("h2",{id:"api"},"API"),Object(s.b)(c.d,{table:!0,of:d.a,mdxType:"Props"}))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/ui/Table/README.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-ui-table-readme-mdx-6fb730834c97b186e04e.js.map