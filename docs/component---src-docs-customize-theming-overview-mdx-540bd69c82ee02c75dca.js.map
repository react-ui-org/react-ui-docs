{"version":3,"sources":["webpack:///../src/docs/customize/theming/overview.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yRAQaA,EAAe,Q,+OAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,WADR,WAGA,8IACsC,iBAAGC,WAAW,IAChD,KAAQ,gFAD0B,yBADtC,4CAKA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,6CAAiE,sBAAQA,WAAW,KAAnB,cAAjE,2JAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,4DAAgF,sBAAQA,WAAW,KAAnB,gCAAhF,OAIJ,kBACE,GAAM,mBADR,mBAGA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,6BADT,iBAAH,uFAG2C,iBAAGA,WAAW,IACrD,KAAQ,gFAD+B,yBAH3C,wEAOA,iFAAgE,0BAAYA,WAAW,KAAvB,OAAhE,8EAEA,qFAAoE,iBAAGA,WAAW,IAC9E,KAAQ,2EADwD,iBAApE,mDAIA,kBACE,GAAM,qCADR,qCAGA,wIAEA,uEACA,qBAAG,0BAAYA,WAAW,KAAvB,4CACH,+BACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,eAAuF,0BAAYA,WAAW,MAAvB,SAAvF,KAA+I,0BAAYA,WAAW,MAAvB,aAA/I,KAA2M,0BAAYA,WAAW,MAAvB,eAA3M,KAAyQ,0BAAYA,WAAW,MAAvB,eAAzQ,MACJ,0BAAYA,WAAW,MAAvB,UADI,yBACyE,iBAAGA,WAAW,KACnF,KAAQ,2DAD6D,wBADzE,qDAIyB,0BAAYA,WAAW,MAAvB,aAJzB,KAIqF,0BAAYA,WAAW,MAAvB,eAJrF,QAIsJ,0BAAYA,WAAW,MAAvB,mBAJtJ,+CAMA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,oDAA6H,0BAAYA,WAAW,MAAvB,QAA7H,MACJ,0BAAYA,WAAW,MAAvB,cADI,KACyD,0BAAYA,WAAW,MAAvB,UADzD,UAEA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,mCAA2G,0BAAYA,WAAW,MAAvB,WAA3G,KAAqK,0BAAYA,WAAW,MAAvB,QAArK,QAA+N,0BAAYA,WAAW,MAAvB,SAA/N,0DACyC,0BAAYA,WAAW,MAAvB,eADzC,KACuG,0BAAYA,WAAW,MAAvB,cADvG,UAEA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,4DAAqI,0BAAYA,WAAW,MAAvB,SAArI,MACJ,0BAAYA,WAAW,MAAvB,SADI,KACoD,0BAAYA,WAAW,MAAvB,UADpD,QACgH,0BAAYA,WAAW,MAAvB,YADhH,MAGF,wGACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2KAQL,6CAA4B,sBAAQA,WAAW,KAAnB,mCAA5B,wDAEF,iBAAGA,WAAW,IACR,KAAQ,0DADd,uCAFE,oDAMA,kBACE,GAAM,oBADR,oBAGA,sKAEA,8JACkD,iBAAGA,WAAW,IAC5D,KAAQ,sBADsC,OADlD,yDAI+B,iBAAGA,WAAW,IACzC,KAAQ,6BADmB,YAJ/B,qBAOA,qBAAG,0BAAYA,WAAW,KAAvB,+GACH,+BACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAApB,+CAAgI,0BAAYA,WAAW,MAAvB,UAAhI,MACJ,0BAAYA,WAAW,MAAvB,aADI,iHAEuC,0BAAYA,WAAW,MAAvB,aAFvC,aAGA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,6DACJ,0BAAYA,WAAW,MAAvB,WADI,KACsD,0BAAYA,WAAW,MAAvB,UADtD,KAC+G,0BAAYA,WAAW,MAAvB,OAD/G,2BAC2L,0BAAYA,WAAW,MAAvB,WAD3L,KACqP,0BAAYA,WAAW,MAAvB,SADrP,MAEJ,0BAAYA,WAAW,MAAvB,SAFI,KAEoD,0BAAYA,WAAW,MAAvB,UAFpD,KAE6G,0BAAYA,WAAW,MAAvB,YAF7G,MAGA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,kDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,oCAAgH,0BAAYA,WAAW,MAAvB,SAAhH,KAAwK,0BAAYA,WAAW,MAAvB,cAAxK,MACJ,0BAAYA,WAAW,MAAvB,oBADI,KAC+D,0BAAYA,WAAW,MAAvB,SAD/D,KACuH,0BAAYA,WAAW,MAAvB,cADvH,uFAE4C,0BAAYA,WAAW,MAAvB,kBAF5C,MAGJ,0BAAYA,WAAW,MAAvB,0BAHI,KAGqE,0BAAYA,WAAW,MAAvB,mBAHrE,OAKF,kDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+pBAaL,kBACE,GAAM,kBADR,kBAGA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,+CAAmE,sBAAQA,WAAW,KAAnB,uBAAnE,mFAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,4JAEN,sBAAQA,WAAW,KAAnB,mBAFM,YAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gFACN,sBAAQA,WAAW,KAAnB,qEADM,4BAGA,iBAAGA,WAAW,MAAd,oJAEA,iBAAGA,WAAW,MAAd,kFACN,sBAAQA,WAAW,KAAnB,oDADM,WAIJ,kBACE,GAAM,eADR,iBAGA,yEAAwD,0BAAYA,WAAW,KAAvB,cAAxD,2DAEA,sBACE,kBAAIA,WAAW,MAAf,yDACA,kBAAIA,WAAW,MAAf,gEACA,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,cAA7B,gCAEF,2GACG,0BAAYA,WAAW,KAAvB,cADH,QACkE,0BAAYA,WAAW,KAAvB,aADlE,kHAGA,2DAA0C,iBAAGA,WAAW,IACpD,KAAQ,uFAD8B,mBAA1C,iDAGe,0BAAYA,WAAW,KAAvB,cAHf,0GAIoD,0BAAYA,WAAW,KAAvB,cAJpD,2FAMF,0BAAYA,WAAW,KAAvB,2BANE,QAOF,0BAAYA,WAAW,KAAvB,0EAPE,yD,6OAaJJ,EAAWK,gBAAiB","file":"component---src-docs-customize-theming-overview-mdx-540bd69c82ee02c75dca.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <p>{`From the very beginning, React UI has been designed with a great emphasis on\ncustomizability. We decided to leverage `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n      }}>{`CSS custom properties`}</a>{` for this feature\nfor two main reasons:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`We take advantage of the possibilities of `}<strong parentName=\"p\">{`native CSS`}</strong>{`. Preprocessors are\nstill a thing, but it's not necessary to go as far as for CSS-in-JS to make\na UI customizable, not even speaking of performance.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Thanks to JavaScript API, CSS custom properties are both `}<strong parentName=\"p\">{`readable and\nwritable by JS`}</strong>{`.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"theming-options\"\n    }}>{`Theming Options`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/foundation/design-tokens\"\n      }}>{`Design tokens`}</a>{` define common visual properties like\ncolors, fonts, borders, shadows, or spacing. `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n      }}>{`CSS custom properties`}</a>{` are the\ntechnical representation of the design tokens in React UI.`}</p>\n    <p>{`All CSS custom properties in React UI come prefixed with `}<inlineCode parentName=\"p\">{`rui`}</inlineCode>{` so they don't\nget in the way of other custom properties in your project.`}</p>\n    <p>{`You can adjust any of the properties in your styles. See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/theme.scss\"\n      }}>{`default theme`}</a>{` for\nthe full list of available design tokens.`}</p>\n    <h3 {...{\n      \"id\": \"global-and-semantic-design-tokens\"\n    }}>{`Global and Semantic Design Tokens`}</h3>\n    <p>{`Global and semantic token names are not complex or long. That is why they are\nsimply lowercase and hyphenated.`}</p>\n    <p>{`The names are written in the following format:`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-<type>-[<group>]-<name>-[<state>]`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<type>`}</inlineCode>{` is one of: `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`dimension`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`font-family`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`font-weight`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`shadow`}</inlineCode>{`, as suggested by the `}<a parentName=\"li\" {...{\n          \"href\": \"https://design-tokens.github.io/community-group/format/\"\n        }}>{`Design Tokens Format`}</a>{` proposal. However,\nadditional custom types like `}<inlineCode parentName=\"li\">{`font-size`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`line-height`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`text-decoration`}</inlineCode>{`\nhave been added as they proved necessary.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<group>`}</inlineCode>{` optionally groups multiple related values, e.g. `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`action`}</inlineCode>{`, etc.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<name>`}</inlineCode>{` is the name of the token, e.g. `}<inlineCode parentName=\"li\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`base`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`light`}</inlineCode>{`. Scales\ncan be presented as numbered sequences, e.g. `}<inlineCode parentName=\"li\">{`space-[0-7]`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`size-[1-6]`}</inlineCode>{`, etc.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<state>`}</inlineCode>{` describes additional interaction variants of the token: `}<inlineCode parentName=\"li\">{`hover`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`focus`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`active`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Example global and semantic design tokens represented by CSS custom properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`:root {\n  --rui-color-text-primary: #000;\n  --rui-dimension-space-3: 0.75rem;\n  --rui-font-family-base: \"Titillium Web\", helvetica, roboto, arial, sans-serif;\n}\n`}</code></pre>\n    <p>{`Ô∏èüëâ Please note that `}<strong parentName=\"p\">{`breakpoint values are read-only`}</strong>{` (e.g. for JavaScript)\nsince CSS custom properties\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/css-variables-1/#using-variables\"\n      }}>{`cannot be used within media queries`}</a>{` (because a media\nquery is not a CSS property).`}</p>\n    <h3 {...{\n      \"id\": \"component-tokens\"\n    }}>{`Component Tokens`}</h3>\n    <p>{`It is also possible to adjust some properties on individual components level,\npreferably by reusing (inheriting) the semantic design tokens.`}</p>\n    <p>{`Due to higher complexity, component tokens use a naming convention that many web\ndevelopers will find familiar because it works like `}<a parentName=\"p\" {...{\n        \"href\": \"https://getbem.com\"\n      }}>{`BEM`}</a>{` (with prefixes and\ncomponent name syntax taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://suitcss.github.io\"\n      }}>{`SUIT CSS`}</a>{`, to be precise):`}</p>\n    <p><inlineCode parentName=\"p\">{`--rui-<ComponentName>--[<modification(s)>]__[<element>]--[<modification(s)>]__<property>--[<modification>]`}</inlineCode></p>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<ComponentName>`}</inlineCode>{` stands for the actual component name (e.g. `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`FormField`}</inlineCode>{`, etc.) with a reasonable exception to form fields whose settings\nare widely shared and therefore grouped as `}<inlineCode parentName=\"li\">{`FormField`}</inlineCode>{` options.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<modifications(s)>`}</inlineCode>{` can be one or more modifiers, typically a variant (e.g.\n`}<inlineCode parentName=\"li\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`filled`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box`}</inlineCode>{`) or interaction state (`}<inlineCode parentName=\"li\">{`default`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`hover`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`focus`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`active`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<element>`}</inlineCode>{` stands for a nested element of the component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<property>`}</inlineCode>{` is usually a CSS property (e.g. `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`background`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`background-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`box-shadow`}</inlineCode>{`), or a brief property description\nwhere a CSS property wouldn't tell enough (e.g. `}<inlineCode parentName=\"li\">{`initial-offset`}</inlineCode>{`,\n`}<inlineCode parentName=\"li\">{`check-background-color`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`tap-target-size`}</inlineCode>{`).`}</li>\n    </ul>\n    <p>{`Example component tokens:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`:root {\n  --rui-Button--filled--primary--default__color: var(--rui-color-action-on-primary);\n  --rui-Button--filled--primary--default__border-color: var(--rui-color-action-primary);\n  --rui-Button--filled--primary--default__background: var(--rui-color-action-primary);\n  --rui-Button--filled--primary--default__box-shadow: none;\n  --rui-Button--filled--primary--hover__color: var(--rui-color-action-on-primary);\n  --rui-Button--filled--primary--hover__border-color: var(--rui-color-action-primary-hover);\n  --rui-Button--filled--primary--hover__background: var(--rui-color-action-primary-hover);\n  --rui-Button--filled--primary--hover__box-shadow: none;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best Practices`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`It's a good idea to start with changing the `}<strong parentName=\"p\">{`global tokens first`}</strong>{`. Adjust\nany context-agnostic values to see how the system reacts and scales.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Widely reused context-aware settings such as semantic colors, typography, or\nborders define the character of your design system which is stored in the\n`}<strong parentName=\"p\">{`semantic tokens`}</strong>{` layer.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Having finished the customization at the global and semantic level, you can\n`}<strong parentName=\"p\">{`then proceed to customize the appearance of individual components`}</strong>{` ‚Äî if\nnecessary at all.`}</p>\n        <p parentName=\"li\">{`Even then you should also reuse existing semantic design tokens as much as\npossible to ensure that your UI is consistent and works as a system.`}</p>\n        <p parentName=\"li\">{`For the same reason, if you have any custom components in your UI, you should\n`}<strong parentName=\"p\">{`reuse the semantic design tokens in your own CSS`}</strong>{` too.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"css-or-sass\"\n    }}>{`CSS, or Sass?`}</h2>\n    <p>{`Colors, breakpoints, and SVG definitions used in `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{` are preprocessed\nwith Sass first. This enables us to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`generate our internal color palette programmatically,`}</li>\n      <li parentName=\"ul\">{`keep actual breakpoint values in a single place in the code,`}</li>\n      <li parentName=\"ul\">{`keep `}<inlineCode parentName=\"li\">{`theme.scss`}</inlineCode>{` uncluttered by inline SVG.`}</li>\n    </ul>\n    <p>{`It's entirely up to you what format you decide to use for storing the theme.\nBoth `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`theme.css`}</inlineCode>{` will work equally well. It only matters if the\ncustom properties make it from the theme file to the browser.`}</p>\n    <p>{`üëâ Just remember everything in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/react-ui-org/react-ui/blob/master/src/lib/styles/theme-constants\"\n      }}>{`theme constants`}</a>{` directory is intended only\nfor usage within `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{`. Otherwise, the theming system may not work as\nexpected. We recommend calling custom properties from `}<inlineCode parentName=\"p\">{`theme.scss`}</inlineCode>{` either\ndirectly in your stylesheet, or through an intermediate, shareable layer like\n`}<inlineCode parentName=\"p\">{`MyComponent/_theme.scss`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`styles/shared-by-components/_my-sass-variables-referring-to-theme.scss`}</inlineCode>{`\n(the latter of which is the approach we use).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}