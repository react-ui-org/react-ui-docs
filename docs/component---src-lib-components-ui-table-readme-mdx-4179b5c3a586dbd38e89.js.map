{"version":3,"sources":["webpack:///../src/lib/components/ui/Table/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Icon","ScrollView","Table","columns","label","name","format","row","dateOfBirth","toLocaleDateString","rows","Date","id","direction","shadowSize","style","whiteSpace","note","tableSortColumn","setTableSortColumn","React","tableSortDirection","setTableSortDirection","setRows","isSortable","toISOString","sort","ascendingIcon","icon","changeHandler","column","items","key","sortedItems","a","b","reverse","compare","descendingIcon","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-ui-table-readme-mdx-4179b5c3a586dbd38e89.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Icon } from '../../../../docs/_components/Icon/Icon';\nimport { TranslatedScrollView as ScrollView } from '../ScrollView/ScrollView';\nimport { Table } from './Table';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`Table presents complex tabular data in an easy-to-scan way.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Table component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Table } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<Table\\n  columns={[\\n    {\\n      label: \\'ID\\',\\n      name: \\'id\\',\\n    },\\n    {\\n      label: \\'Name\\',\\n      name: \\'name\\',\\n    },\\n    {\\n      format: row => row.dateOfBirth.toLocaleDateString(\\'en-GB\\'),\\n      label: \\'Date of birth\\',\\n      name: \\'dateOfBirth\\',\\n    },\\n  ]}\\n  rows={[\\n    {\\n      dateOfBirth: new Date(1940, 10, 9),\\n      id: 1,\\n      name: \\'John Lennon\\',\\n    },\\n    {\\n      dateOfBirth: new Date(1942, 6, 18),\\n      id: 2,\\n      name: \\'Paul McCartney\\',\\n    },\\n    {\\n      dateOfBirth: new Date(1943, 2, 25),\\n      id: 3,\\n      name: \\'George Harrison\\',\\n    },\\n    {\\n      dateOfBirth: new Date(1940, 7, 7),\\n      id: 4,\\n      name: \\'Richard Starkey (Ringo Starr)\\',\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      ScrollView,\n      Table,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Table columns={[{\n        label: 'ID',\n        name: 'id'\n      }, {\n        label: 'Name',\n        name: 'name'\n      }, {\n        format: row => row.dateOfBirth.toLocaleDateString('en-GB'),\n        label: 'Date of birth',\n        name: 'dateOfBirth'\n      }]} rows={[{\n        dateOfBirth: new Date(1940, 10, 9),\n        id: 1,\n        name: 'John Lennon'\n      }, {\n        dateOfBirth: new Date(1942, 6, 18),\n        id: 2,\n        name: 'Paul McCartney'\n      }, {\n        dateOfBirth: new Date(1943, 2, 25),\n        id: 3,\n        name: 'George Harrison'\n      }, {\n        dateOfBirth: new Date(1940, 7, 7),\n        id: 4,\n        name: 'Richard Starkey (Ringo Starr)'\n      }]} mdxType=\"Table\" />\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Keep headers short`}</strong>{` so users can quickly scan the content of the table.\nJust one or two words should be enough.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Tables are `}<strong parentName=\"p\">{`good for displaying complex tabular data.`}</strong>{` For simpler data sets\nor even plain key-value pairs, consider using the\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/layout/list\"\n          }}>{`List`}</a>{` component.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Tables make `}<strong parentName=\"p\">{`lots of information easier to scan and compare.`}</strong>{` If you have\nfewer sections and want to emphasize each group more, consider using\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/card\"\n          }}>{`Cards`}</a>{`.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"responsive-tables\"\n    }}>{`Responsive Tables`}</h2>\n    <p>{`The easiest way to make tables responsive is to wrap them with the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/scroll-view\"\n      }}>{`ScrollView`}</a>{` component in the horizontal mode.`}</p>\n    <Playground __position={1} __code={'<ScrollView direction=\\\"horizontal\\\" shadowSize=\\\"100px\\\">\\n  <Table\\n    columns={[\\n      {\\n        label: \\'ID\\',\\n        name: \\'id\\',\\n      },\\n      {\\n        format: row => (\\n          <span style={{ whiteSpace: \\'nowrap\\' }}>{row.name}</span>\\n        ),\\n        label: \\'Name\\',\\n        name: \\'name\\',\\n      },\\n      {\\n        format: row => (\\n          <span style={{ whiteSpace: \\'nowrap\\' }}>{row.note}</span>\\n        ),\\n        label: \\'Note\\',\\n        name: \\'note\\',\\n      },\\n      {\\n        format: row => row.dateOfBirth.toLocaleDateString(\\'en-GB\\'),\\n        label: \\'Date of birth\\',\\n        name: \\'dateOfBirth\\',\\n      },\\n    ]}\\n    rows={[\\n      {\\n        dateOfBirth: new Date(1940, 10, 9),\\n        id: 1,\\n        name: \\'John Lennon\\',\\n        note:\\n          \\'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \\' +\\n          \\'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis \\' +\\n          \\'natoque penatibus et magnis dis parturient montes, nascetur \\' +\\n          \\'ridiculus mus. Donec quam felis, ultricies nec, pellentesque \\' +\\n          \\'eu, pretium quis, sem.\\',\\n      },\\n      {\\n        dateOfBirth: new Date(1942, 6, 18),\\n        id: 2,\\n        name: \\'Paul McCartney\\',\\n        note:\\n          \\'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \\' +\\n          \\'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis \\' +\\n          \\'natoque penatibus et magnis dis parturient montes, nascetur \\' +\\n          \\'ridiculus mus. Donec quam felis, ultricies nec, pellentesque \\' +\\n          \\'eu, pretium quis, sem.\\',\\n      },\\n      {\\n        dateOfBirth: new Date(1943, 2, 25),\\n        id: 3,\\n        name: \\'George Harrison\\',\\n        note:\\n          \\'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \\' +\\n          \\'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis \\' +\\n          \\'natoque penatibus et magnis dis parturient montes, nascetur \\' +\\n          \\'ridiculus mus. Donec quam felis, ultricies nec, pellentesque \\' +\\n          \\'eu, pretium quis, sem.\\',\\n      },\\n      {\\n        dateOfBirth: new Date(1940, 7, 7),\\n        id: 4,\\n        name: \\'Richard Starkey (Ringo Starr)\\',\\n        note:\\n          \\'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \\' +\\n          \\'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis \\' +\\n          \\'natoque penatibus et magnis dis parturient montes, nascetur \\' +\\n          \\'ridiculus mus. Donec quam felis, ultricies nec, pellentesque \\' +\\n          \\'eu, pretium quis, sem.\\',\\n      },\\n    ]}\\n  />\\n</ScrollView>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      ScrollView,\n      Table,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ScrollView direction=\"horizontal\" shadowSize=\"100px\" mdxType=\"ScrollView\">\n    <Table columns={[{\n          label: 'ID',\n          name: 'id'\n        }, {\n          format: row => <span style={{\n            whiteSpace: 'nowrap'\n          }}>{row.name}</span>,\n          label: 'Name',\n          name: 'name'\n        }, {\n          format: row => <span style={{\n            whiteSpace: 'nowrap'\n          }}>{row.note}</span>,\n          label: 'Note',\n          name: 'note'\n        }, {\n          format: row => row.dateOfBirth.toLocaleDateString('en-GB'),\n          label: 'Date of birth',\n          name: 'dateOfBirth'\n        }]} rows={[{\n          dateOfBirth: new Date(1940, 10, 9),\n          id: 1,\n          name: 'John Lennon',\n          note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' + 'natoque penatibus et magnis dis parturient montes, nascetur ' + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' + 'eu, pretium quis, sem.'\n        }, {\n          dateOfBirth: new Date(1942, 6, 18),\n          id: 2,\n          name: 'Paul McCartney',\n          note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' + 'natoque penatibus et magnis dis parturient montes, nascetur ' + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' + 'eu, pretium quis, sem.'\n        }, {\n          dateOfBirth: new Date(1943, 2, 25),\n          id: 3,\n          name: 'George Harrison',\n          note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' + 'natoque penatibus et magnis dis parturient montes, nascetur ' + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' + 'eu, pretium quis, sem.'\n        }, {\n          dateOfBirth: new Date(1940, 7, 7),\n          id: 4,\n          name: 'Richard Starkey (Ringo Starr)',\n          note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. ' + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis ' + 'natoque penatibus et magnis dis parturient montes, nascetur ' + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque ' + 'eu, pretium quis, sem.'\n        }]} mdxType=\"Table\" />\n  </ScrollView>\n    </Playground>\n    <h2 {...{\n      \"id\": \"sortable-columns\"\n    }}>{`Sortable Columns`}</h2>\n    <p>{`The Table supports sorting indicators by adding a simple configuration.`}</p>\n    <p>{`⚠️ The Table component only provides necessary visual support for sorting. Aside\nfrom icons, you must `}<strong parentName=\"p\">{`provide the comparing functionality yourself`}</strong>{` if you\naren't rendering `}<strong parentName=\"p\">{`already sorted data.`}</strong>{` The reason for this decision is that\nclient often does not have access to the full dataset.`}</p>\n    <p>{`The following is an example of custom sorting function executed on the client.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [tableSortColumn, setTableSortColumn] = React.useState(\\'id\\')\\n  const [tableSortDirection, setTableSortDirection] = React.useState(\\'asc\\')\\n  const [rows, setRows] = React.useState([\\n    {\\n      dateOfBirth: new Date(1940, 10, 9),\\n      id: 1,\\n      name: \\'John Lennon\\',\\n    },\\n    {\\n      dateOfBirth: new Date(1942, 6, 18),\\n      id: 2,\\n      name: \\'Paul McCartney\\',\\n    },\\n    {\\n      dateOfBirth: new Date(1943, 2, 25),\\n      id: 3,\\n      name: \\'George Harrison\\',\\n    },\\n    {\\n      dateOfBirth: new Date(1940, 7, 7),\\n      id: 4,\\n      name: \\'Richard Starkey (Ringo Starr)\\',\\n    },\\n  ])\\n  const compare = (items, key, direction) => {\\n    const sortedItems = [...items]\\n    if (key === \\'id\\' || key === \\'dateOfBirth\\') {\\n      sortedItems.sort((a, b) => b[key] - a[key])\\n    } else if (key === \\'name\\') {\\n      sortedItems.sort((a, b) => {\\n        if (a.name < b.name) {\\n          return -1\\n        }\\n        if (a.name > b.name) {\\n          return 1\\n        }\\n        return 0\\n      })\\n    }\\n    return direction === \\'desc\\' ? sortedItems.reverse() : sortedItems\\n  }\\n  const columns = [\\n    {\\n      isSortable: true,\\n      label: \\'ID\\',\\n      name: \\'id\\',\\n    },\\n    {\\n      isSortable: true,\\n      label: \\'Name\\',\\n      name: \\'name\\',\\n    },\\n    {\\n      format: row => row.dateOfBirth.toISOString(),\\n      isSortable: true,\\n      label: \\'Date of birth\\',\\n      name: \\'dateOfBirth\\',\\n    },\\n  ]\\n  return (\\n    <Table\\n      columns={columns}\\n      rows={rows}\\n      sort={{\\n        ascendingIcon: <Icon icon=\\\"up\\\" />,\\n        changeHandler: (column, direction) => {\\n          setTableSortColumn(column)\\n          setTableSortDirection(direction === \\'asc\\' ? \\'desc\\' : \\'asc\\')\\n          setRows(compare(rows, column, direction))\\n        },\\n        column: tableSortColumn,\\n        descendingIcon: <Icon icon=\\\"down\\\" />,\\n        direction: tableSortDirection,\\n      }}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Icon,\n      ScrollView,\n      Table,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [tableSortColumn, setTableSortColumn] = React.useState('id');\n        const [tableSortDirection, setTableSortDirection] = React.useState('asc');\n        const [rows, setRows] = React.useState([{\n          dateOfBirth: new Date(1940, 10, 9),\n          id: 1,\n          name: 'John Lennon'\n        }, {\n          dateOfBirth: new Date(1942, 6, 18),\n          id: 2,\n          name: 'Paul McCartney'\n        }, {\n          dateOfBirth: new Date(1943, 2, 25),\n          id: 3,\n          name: 'George Harrison'\n        }, {\n          dateOfBirth: new Date(1940, 7, 7),\n          id: 4,\n          name: 'Richard Starkey (Ringo Starr)'\n        }]);\n\n        const compare = (items, key, direction) => {\n          const sortedItems = [...items];\n\n          if (key === 'id' || key === 'dateOfBirth') {\n            sortedItems.sort((a, b) => b[key] - a[key]);\n          } else if (key === 'name') {\n            sortedItems.sort((a, b) => {\n              if (a.name < b.name) {\n                return -1;\n              }\n\n              if (a.name > b.name) {\n                return 1;\n              }\n\n              return 0;\n            });\n          }\n\n          return direction === 'desc' ? sortedItems.reverse() : sortedItems;\n        };\n\n        const columns = [{\n          isSortable: true,\n          label: 'ID',\n          name: 'id'\n        }, {\n          isSortable: true,\n          label: 'Name',\n          name: 'name'\n        }, {\n          format: row => row.dateOfBirth.toISOString(),\n          isSortable: true,\n          label: 'Date of birth',\n          name: 'dateOfBirth'\n        }];\n        return <Table columns={columns} rows={rows} sort={{\n          ascendingIcon: <Icon icon=\"up\" mdxType=\"Icon\" />,\n          changeHandler: (column, direction) => {\n            setTableSortColumn(column);\n            setTableSortDirection(direction === 'asc' ? 'desc' : 'asc');\n            setRows(compare(rows, column, direction));\n          },\n          column: tableSortColumn,\n          descendingIcon: <Icon icon=\"down\" mdxType=\"Icon\" />,\n          direction: tableSortDirection\n        }} mdxType=\"Table\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <hr></hr>\n    <p>{`Next: `}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/text-area\"\n      }}>{`TextArea →`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}