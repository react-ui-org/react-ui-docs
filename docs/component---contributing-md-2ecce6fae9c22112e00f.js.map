{"version":3,"sources":["webpack:///../CONTRIBUTING.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---contributing-md-2ecce6fae9c22112e00f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"contributing\"\n    }}>{`Contributing`}</h1>\n    <p>{`In the first place, thank you for your interest in contributing! üôè`}</p>\n    <h2 {...{\n      \"id\": \"development\"\n    }}>{`Development`}</h2>\n    <p>{`To build the project:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Install local npm packages: `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode></li>\n      <li parentName=\"ol\">{`Run the build: `}<inlineCode parentName=\"li\">{`npm run build`}</inlineCode></li>\n    </ol>\n    <p>{`To run the dev server:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Install local npm packages: `}<inlineCode parentName=\"li\">{`npm install`}</inlineCode></li>\n      <li parentName=\"ol\">{`Run the dev server (usually on `}<inlineCode parentName=\"li\">{`http://localhost:3000`}</inlineCode>{`): `}<inlineCode parentName=\"li\">{`npm start`}</inlineCode></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"git-workflow\"\n    }}>{`Git Workflow`}</h2>\n    <p>{`In order for the automation to work in the best possible way (we use GitHub\nActions), please follow these guidelines:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`One pull request per subject.`}</strong>{` Don't combine unrelated changes in a single\nPR unless they are really subtle details such as fix of a typo.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Only PRs into `}<inlineCode parentName=\"strong\">{`master`}</inlineCode>{` branch are listed in changelog.`}</strong>{` PRs into other\nbranches are not picked up by release automation.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Name your branches according to nature of change.`}</strong>{` Choose one of:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bc/*`}</inlineCode>{` for breaking changes`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`feature/*`}</inlineCode>{` for features`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bugfix/*`}</inlineCode>{` for bugfixes`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`refactoring/*`}</inlineCode>{` for refactoring of the library`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`docs/*`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`documentation/*`}</inlineCode>{` for changes in docs`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`maintenance/*`}</inlineCode>{` for maintenance (builds, dependencies, automation, etc.)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`release/*`}</inlineCode>{` for `}<a parentName=\"li\" {...{\n              \"href\": \"/contribute/releasing\"\n            }}>{`releases`}</a>{` (administrators only)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Write clear, helpful and descriptive commit messages.`}</strong></p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\"><strong parentName=\"li\">{`Use imperative and write in English,`}</strong>{` e.g. `}<em parentName=\"li\">{`Update dependencies`}</em>{` or\n`}<em parentName=\"li\">{`Claim support for controlled components only`}</em>{`.`}</li>\n          <li parentName=\"ol\"><strong parentName=\"li\">{`If an issue exists for your changes, append the issue number`}</strong>{` in\nparentheses to the end of the commit message, e.g. `}<em parentName=\"li\">{`Update dependencies\n(#261)`}</em>{`.`}</li>\n          <li parentName=\"ol\">{`Optionally use Markdown code blocks to emphasize, e.g.\n`}<em parentName=\"li\">{`Create `}<inlineCode parentName=\"em\">{`ScrollView`}</inlineCode>{` component (#53)`}</em>{`.`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Write clear, helpful and descriptive PR names.`}</strong></p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\"><strong parentName=\"li\">{`All rules for commit messages apply`}</strong>{` also for PR names.`}</li>\n          <li parentName=\"ol\"><strong parentName=\"li\">{`Always check that PR name meets the requirements`}</strong>{` above because `}<strong parentName=\"li\">{`PR\nnames are used in changelog`}</strong>{`. GitHub automatically truncates long PR\nnames and picks up branch name for multi-commit PRs, so it's necessary to\nmake sure the PR name is what we want to have in the changelog.`}</li>\n          <li parentName=\"ol\"><strong parentName=\"li\">{`If an issue exists for your changes, append this text to PR\ndescription`}</strong>{` (the topmost comment in the PR) in order for the issue to be\nclosed automatically once the PR is merged: `}<inlineCode parentName=\"li\">{`Closes #<ISSUE NUMBER>`}</inlineCode>{`. You\nwill know the issue is linked correctly when it appears in the `}<em parentName=\"li\">{`Linked\nissues`}</em>{` section of the PR. (Having the issue mentioned in commit message\nand/or PR name does `}<em parentName=\"li\">{`not`}</em>{` have this effect.)`}</li>\n          <li parentName=\"ol\"><strong parentName=\"li\">{`If there is no issue for your changes, please add your PR to `}<inlineCode parentName=\"strong\">{`The\nBoard`}</inlineCode></strong>{` GitHub project in the `}<em parentName=\"li\">{`Projects`}</em>{` section of the PR. The correct\nboard column will be selected automatically. This helps us keep track of\nwhat is in development.`}</li>\n        </ol>\n      </li>\n    </ol>\n    <p>{`Pull requests are labelled automatically. You can add more labels to better\nqualify the nature of the change ‚Äî in such case, it will be included in all\ncorresponding changelog groups. Or use the `}<inlineCode parentName=\"p\">{`skip changelog`}</inlineCode>{` label to exclude a\npull request from the changelog.`}</p>\n    <h2 {...{\n      \"id\": \"package-linking\"\n    }}>{`Package Linking`}</h2>\n    <p>{`The best way for development of React UI is to link `}<inlineCode parentName=\"p\">{`react-ui`}</inlineCode>{` into your\napplication with `}<inlineCode parentName=\"p\">{`npm link`}</inlineCode>{` so you can see it in action.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`In React UI repository, run `}<inlineCode parentName=\"li\">{`npm link`}</inlineCode></li>\n      <li parentName=\"ol\">{`In your application, run `}<inlineCode parentName=\"li\">{`npm link @react-ui-org/react-ui`}</inlineCode></li>\n    </ol>\n    <p>{`To prevent\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/warnings/invalid-hook-call-warning.html#duplicate-react\"\n      }}>{`Invalid Hook Call Warning`}</a>{`\nwhen React UI is linked, add the following code to your app's Webpack config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const path = require('path');\n\nmodule.exports = {\n  resolve: {\n    alias: {\n      react: path.resolve('./node_modules/react'),\n      'react-dom': path.resolve('./node_modules/react-dom'),\n    },\n  },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"documenting\"\n    }}>{`Documenting`}</h2>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://docz.site\"\n      }}>{`Docz`}</a>{` (powered by `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.com\"\n      }}>{`Gatsby`}</a>{`)\nas the documentation platform. The documentation itself is written in\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://mdxjs.com\"\n      }}>{`MDX`}</a>{` format ‚Äî a human-readable blend of the popular Markdown\nand JSX syntax.`}</p>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`npm start`}</inlineCode>{` to run the docs in development mode, and open\n`}<inlineCode parentName=\"p\">{`http://localhost:3000`}</inlineCode>{` in your browser to see the docs in live-reload mode.`}</p>\n    <p>{`A few things to note:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`In order to get component props parsed and rendered by Docz, it's crucial to\n`}<strong parentName=\"p\">{`import the component into an MDX file right from its source file`}</strong>{` ‚Äî parsing\na re-exported component (typically via `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{`) isn't currently supported.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you don't want Gatsby to collect `}<strong parentName=\"p\">{`anonymous statistics`}</strong>{`, you may want to\ndisable `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.gatsbyjs.com/docs/telemetry/\"\n          }}>{`Gatsby telemetry`}</a>{` by\nrunning `}<inlineCode parentName=\"p\">{`npx gatsby telemetry --disable`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you see the Not found page after having `}<strong parentName=\"p\">{`changed the configuration of Docz\nor Gatsby in the live-reload mode,`}</strong>{` you may either restart the Docz\ndevelopment server (`}<inlineCode parentName=\"p\">{`ctrl + c`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`npm start`}</inlineCode>{`), or try to edit an MDX file\nwhich makes the Docz rebuild, too.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To `}<strong parentName=\"p\">{`make your authoring experience better,`}</strong>{` we recommend to make sure your\nIDE understands the MDX syntax and is able to help you wrap lines in MD and\nMDX files automatically (Jetbrains IDE's and VSCode support both features\nout-of-the-box or through a plugin).`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}