(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{AXr1:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return p}));var i=n("Fcif"),o=n("dV/x"),a=(n("mXGw"),n("/FXl")),r=n("TjRS");n("aD51");const s=["components"],l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/customize/theming/overview.mdx"}});const c={_frontmatter:l},b=r.a;function p(e){let{components:t}=e,n=Object(o.a)(e,s);return Object(a.b)(b,Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"theming"},"Theming"),Object(a.b)("p",null,"From the very beginning, React UI has been designed with a great emphasis on\ncustomizability. We decided to leverage CSS custom properties for this feature\nfor two main reasons:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"We take advantage of possibilities of ",Object(a.b)("strong",{parentName:"p"},"native CSS"),". Preprocessors are still\na thing, but it's not necessary to go as far as for CSS-in-JS to make a UI\ncustomizable.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Thanks to its JavaScript API, CSS custom properties are both ",Object(a.b)("strong",{parentName:"p"},"readable and\nwritable by JS"),"."))),Object(a.b)("h2",{id:"theming-options"},"Theming Options"),Object(a.b)("p",null,"CSS custom properties are used to define common visual properties like colors,\nfonts, borders, shadows, or spacing. They come prefixed with ",Object(a.b)("inlineCode",{parentName:"p"},"rui-")," so they\ndon't get in way of other custom properties in your project."),Object(a.b)("p",null,"Theming options come grouped into three sections according to what they\ndescribe:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"design tokens,"),Object(a.b)("li",{parentName:"ol"},"layout components,"),Object(a.b)("li",{parentName:"ol"},"UI components.")),Object(a.b)("p",null,"You can adjust any of these options in your styles. See the\n",Object(a.b)("a",{parentName:"p",href:"https://github.com/react-ui-org/react-ui/blob/master/src/lib/theme.scss"},"default theme"),"\nfor the full list of available settings."),Object(a.b)("h3",{id:"design-tokens"},"Design Tokens"),Object(a.b)("p",null,"Design tokens are special variables that define the smallest pieces of a design\nlanguage, especially colors, typography, or spacing."),Object(a.b)("p",null,"Design token names shouldn't be complex nor long so they are simply lowercase\nand hyphenated:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-css"},":root {\n  --rui-spacing-0: 0;\n  --rui-spacing-1: 0.25rem;\n  --rui-spacing-2: 0.5rem;\n  --rui-spacing-3: 0.75rem;\n  --rui-spacing-4: 1rem;\n  --rui-spacing-5: 1.5rem;\n  --rui-spacing-6: 2rem;\n  --rui-spacing-7: 3rem;\n}\n")),Object(a.b)("p",null,"Ô∏èüëâ Please note that ",Object(a.b)("strong",{parentName:"p"},"breakpoint values are exported as read-only")," since CSS\ncustom properties\n",Object(a.b)("a",{parentName:"p",href:"https://www.w3.org/TR/css-variables-1/#using-variables"},"cannot be used within media queries"),"\n(because media query is not a CSS property)."),Object(a.b)("h3",{id:"components"},"Components"),Object(a.b)("p",null,"It is also possible to adjust some properties on individual components level,\npreferably by reusing design tokens."),Object(a.b)("p",null,"Component names use naming convention that is familiar to many\nweb developers because it looks like BEM (or SUIT CSS, more precisely):"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"--rui-<ComponentName>--[<modification(s)>]__[<element>]--[<modification(s)>]__<property>--[<modification>]")),Object(a.b)("p",null,"Where:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<ComponentName>")," stands for actual component name (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"Button"),",\n",Object(a.b)("inlineCode",{parentName:"li"},"FormField")," etc.) with a reasonable exception to form fields whose settings\nare widely shared and therefore grouped as ",Object(a.b)("inlineCode",{parentName:"li"},"FormField")," options."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<modifications(s)>")," can be one or more modifiers, typically a variant (e.g.\n",Object(a.b)("inlineCode",{parentName:"li"},"primary"),", ",Object(a.b)("inlineCode",{parentName:"li"},"filled"),", ",Object(a.b)("inlineCode",{parentName:"li"},"box"),") or interaction state (",Object(a.b)("inlineCode",{parentName:"li"},"default"),", ",Object(a.b)("inlineCode",{parentName:"li"},"hover"),",\n",Object(a.b)("inlineCode",{parentName:"li"},"focus"),", ",Object(a.b)("inlineCode",{parentName:"li"},"active"),", ",Object(a.b)("inlineCode",{parentName:"li"},"disabled"),")."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<element>")," stands for a nested element of the component."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<property>")," is usually a CSS property (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"color"),", ",Object(a.b)("inlineCode",{parentName:"li"},"background"),",\n",Object(a.b)("inlineCode",{parentName:"li"},"background-color"),", ",Object(a.b)("inlineCode",{parentName:"li"},"width"),", ",Object(a.b)("inlineCode",{parentName:"li"},"box-shadow"),"), or a brief property description\nwhere a CSS property wouldn't tell enough (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"initial-offset"),",\n",Object(a.b)("inlineCode",{parentName:"li"},"check-background-color"),", ",Object(a.b)("inlineCode",{parentName:"li"},"tap-target-size"),").")),Object(a.b)("p",null,"Example component theming options:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-css"},":root {\n  --rui-Button--filled--primary--default__color: var(--rui-color-on-primary);\n  --rui-Button--filled--primary--default__border-color: var(--rui-color-primary);\n  --rui-Button--filled--primary--default__background: var(--rui-color-primary);\n  --rui-Button--filled--primary--default__box-shadow: none;\n  --rui-Button--filled--primary--hover__color: var(--rui-color-on-primary);\n  --rui-Button--filled--primary--hover__border-color: var(--rui-color-primary-dark);\n  --rui-Button--filled--primary--hover__background: var(--rui-color-primary-dark);\n  --rui-Button--filled--primary--hover__box-shadow: none;\n}\n")),Object(a.b)("h3",{id:"css-or-scss"},"CSS, or SCSS?"),Object(a.b)("p",null,"Colors, breakpoints, and SVG definitions used in ",Object(a.b)("inlineCode",{parentName:"p"},"theme.scss")," are preprocessed\nwith SCSS first. This enables us to:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"generate color palette programmatically,"),Object(a.b)("li",{parentName:"ul"},"keep actual breakpoint values in a single place in the code,"),Object(a.b)("li",{parentName:"ul"},"keep ",Object(a.b)("inlineCode",{parentName:"li"},"theme.scss")," uncluttered by inline SVG.")),Object(a.b)("p",null,"It's entirely up to you what format you decide to use for storing the theme.\nBoth ",Object(a.b)("inlineCode",{parentName:"p"},"theme.scss")," and ",Object(a.b)("inlineCode",{parentName:"p"},"theme.css")," will work equally well, it only matters if\nthe custom properties make it from the theme file to browser."),Object(a.b)("p",null,"üëâ Just remember everything in the\n",Object(a.b)("a",{parentName:"p",href:"https://github.com/react-ui-org/react-ui/blob/master/src/lib/styles/theme-constants"},"theme constants"),"\ndirectory is intended only for usage within ",Object(a.b)("inlineCode",{parentName:"p"},"theme.scss"),". Otherwise, the theming\nsystem may not work as expected. We recommend calling custom properties from\n",Object(a.b)("inlineCode",{parentName:"p"},"theme.scss")," either directly in your stylesheet, or through an intermediate,\nshareable layer like ",Object(a.b)("inlineCode",{parentName:"p"},"MyComponent/_theme.scss")," or\n",Object(a.b)("inlineCode",{parentName:"p"},"styles/shared-by-components/_my-sass-variables-referring-to-theme.scss"),"\n(latter of which is the approach we use)."),Object(a.b)("h2",{id:"best-practices"},"Best Practices"),Object(a.b)("p",null,"It's a good idea to start with changing ",Object(a.b)("strong",{parentName:"p"},"design tokens first"),". Widely reused\nsettings such as colors, typography, borders, or spacing values should be\nadjusted first because they define basic appearance of all components."),Object(a.b)("p",null,"Having finished the customization at the global level, you can ",Object(a.b)("strong",{parentName:"p"},"then proceed to\ncustomizing the appearance of individual components")," ‚Äî if necessary at all.\nEven then you should also reuse existing design tokens as much as possible to\nensure that your UI is consistent and works as a system."),Object(a.b)("p",null,"For the same reason, if you have any custom components in your UI, you should\n",Object(a.b)("strong",{parentName:"p"},"reuse design tokens in your own CSS")," too."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/customize/theming/overview.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-customize-theming-overview-mdx-e6d118a8e97b0074ec35.js.map