(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{xtVv:function(e,t,l){"use strict";l.r(t),l.d(t,"_frontmatter",(function(){return c})),l.d(t,"default",(function(){return h}));var o=l("Fcif"),a=l("dV/x"),n=l("mXGw"),i=l("/FXl"),r=l("TjRS"),d=l("ZFoC"),b=l("s0IP"),m=l("nBnF");l("aD51");const u=["components"],c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/FormLayout/README.mdx"}});const s={_frontmatter:c},p=r.a;function h(e){let{components:t}=e,l=Object(a.a)(e,u);return Object(i.b)(p,Object(o.a)({},s,l,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"formlayout"},"FormLayout"),Object(i.b)("p",null,"The FormLayout aligns form fields into an organized grid."),Object(i.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(i.b)("p",null,"To implement the FormLayout component, you need to import it first:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { FormLayout } from '@react-ui-org/react-ui';\n")),Object(i.b)("p",null,"And use it:"),Object(i.b)(d.c,{__position:0,__code:'<FormLayout>\n  <TextField label="A form element" />\n</FormLayout>',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},Object(i.b)(m.j,{mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}))),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(i.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(i.b)("p",null,"Since all form fields in React UI are styled as inline blocks, they ",Object(i.b)("strong",{parentName:"p"},"queue up\none after another in a row by default.")," The FormLayout component is there to\nmake building ",Object(i.b)("strong",{parentName:"p"},"vertical and horizontal forms")," easy. It uses the right tool for\nthe job: the ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"},"CSS grid layout"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Put ",Object(i.b)("strong",{parentName:"p"},"only form field components")," from React UI inside the FormLayout and\nmake sure they are ",Object(i.b)("strong",{parentName:"p"},"direct descendants")," of it (React ",Object(i.b)("a",{parentName:"p",href:"https://reactjs.org/docs/fragments.html"},"fragments")," are\nsupported!). All React UI form components are ready for this use case and\ndon't need to be wrapped in any ",Object(i.b)("inlineCode",{parentName:"p"},"div"),"s. Namely, the FormLayout supports the\nfollowing React UI components:\n",Object(i.b)("a",{parentName:"p",href:"/components/checkbox-field"},"CheckboxField"),",\n",Object(i.b)("a",{parentName:"p",href:"/components/radio"},"Radio"),", ",Object(i.b)("a",{parentName:"p",href:"/components/select-field"},"SelectField"),",\n",Object(i.b)("a",{parentName:"p",href:"/components/text-area"},"TextArea"),", ",Object(i.b)("a",{parentName:"p",href:"/components/text-field"},"TextField"),",\nand ",Object(i.b)("a",{parentName:"p",href:"/components/toggle"},"Toggle"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use the ",Object(i.b)("a",{parentName:"p",href:"#custom-fields"},"FormLayoutCustomField")," component when you need to\nplace any ",Object(i.b)("strong",{parentName:"p"},"custom content")," inside the FormLayout. This layout helper ensures\nyour content is properly spaced and aligned with other FormLayout elements.\nDo ",Object(i.b)("strong",{parentName:"p"},"not")," try to put any custom HTML or React components directly into\nFormLayout without wrapping it with the FormLayoutCustomField first."))),Object(i.b)("p",null,"👉 For usage in auto-width Modal, you may need to turn on the ",Object(i.b)("inlineCode",{parentName:"p"},"autoWidth")," option\nfor your FormLayout. This prevents FormLayout from unexpectedly growing in\nbrowsers that ",Object(i.b)("a",{parentName:"p",href:"https://github.com/react-ui-org/react-ui/issues/232"},"don't support")," ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid"},"CSS subgrid")," in cases when\nthere are longer validation messages or help texts."),Object(i.b)("h2",{id:"vertical-layout"},"Vertical Layout"),Object(i.b)("p",null,"Vertical FormLayout works similar to single-column ",Object(i.b)("a",{parentName:"p",href:"/components/grid"},"Grid"),"\nlayout while it also forces vertical layout mode on form fields. To use this\nlayout, simply wrap your form fields with the FormLayout component:"),Object(i.b)(d.c,{__position:1,__code:'<FormLayout>\n  <TextField label="A form element" />\n  <TextField label="Another form element" />\n  <TextField label="Yet another one" />\n</FormLayout>',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},Object(i.b)(m.j,{mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Another form element",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Yet another one",mdxType:"TextField"}))),Object(i.b)("h2",{id:"horizontal-layout"},"Horizontal Layout"),Object(i.b)("p",null,"Horizontal FormLayout is designed for horizontal form fields: it nicely ",Object(i.b)("strong",{parentName:"p"},"aligns\nlabels and inputs in an organized grid.")," It is applied starting from the ",Object(i.b)("inlineCode",{parentName:"p"},"md"),"\nviewport size onward and it forces the horizontal layout on the fields."),Object(i.b)(d.c,{__position:2,__code:'<FormLayout fieldLayout="horizontal">\n  <TextField label="A form element" />\n  <TextField label="Another form element" />\n  <TextField label="Yet another one" />\n</FormLayout>',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},Object(i.b)(m.j,{fieldLayout:"horizontal",mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Another form element",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Yet another one",mdxType:"TextField"}))),Object(i.b)("h3",{id:"label-width"},"Label Width"),Object(i.b)("p",null,"In the horizontal layout mode, it's possible to fine-tune the way how the form\nwill be aligned through the ",Object(i.b)("inlineCode",{parentName:"p"},"labelWidth")," option to cover various design\nrequirements. It comes with ",Object(i.b)("strong",{parentName:"p"},"three globally shared options:")," default width,\nauto width, and limited width. For cases where an individual manual width works\nbetter, there is the ",Object(i.b)("strong",{parentName:"p"},"local custom width mode")," which enables setting a width\nthat is applied just for the current FormLayout."),Object(i.b)("p",null,"👉 All global label width options can be easily ",Object(i.b)("a",{parentName:"p",href:"/customize/theming/overview"},"customized"),"\nwith CSS custom properties."),Object(i.b)("h4",{id:"label-width-options"},"Label Width Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"default")," mode (global) sets the width of all labels to a ",Object(i.b)("strong",{parentName:"p"},"global default\nvalue")," which is 10 em.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"auto")," mode (global) aligns the form ",Object(i.b)("strong",{parentName:"p"},"according to the longest label."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"limited")," mode (global) works as ",Object(i.b)("inlineCode",{parentName:"p"},"auto")," except it's intended for values\nthat ",Object(i.b)("strong",{parentName:"p"},"set a limit for the label width.")," Its default value is\n",Object(i.b)("inlineCode",{parentName:"p"},"fitcontent(50%)")," which also aligns the form according to the longest label\nlike ",Object(i.b)("inlineCode",{parentName:"p"},"auto"),", but with the difference that the labels cannot be wider than\n50 % of the FormLayout.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"custom")," mode (local) allows you to enter any ",Object(i.b)("strong",{parentName:"p"},"custom label width for\nindividual FormLayouts.")))),Object(i.b)("p",null,"📐 Try resizing the playground to see how individual options work."),Object(i.b)(d.c,{__position:3,__code:"() => {\n  const [labelWidth, setLabelWidth] = React.useState('default')\n  const [customLabelWidth, setCustomLabelWidth] = React.useState('20em')\n  return (\n    <div>\n      <Toolbar align=\"baseline\">\n        <ToolbarItem>\n          <span id=\"label-width-options-label\">Label width:</span>\n        </ToolbarItem>\n        <ToolbarItem>\n          <ButtonGroup aria-labelledby=\"label-width-options-label\">\n            <Button\n              color={labelWidth === 'default' ? 'dark' : 'primary'}\n              label=\"default\"\n              onClick={() => setLabelWidth('default')}\n            />\n            <Button\n              color={labelWidth === 'auto' ? 'dark' : 'primary'}\n              label=\"auto\"\n              onClick={() => setLabelWidth('auto')}\n            />\n            <Button\n              color={labelWidth === 'limited' ? 'dark' : 'primary'}\n              label=\"limited\"\n              onClick={() => setLabelWidth('limited')}\n            />\n            <Button\n              color={labelWidth === 'custom' ? 'dark' : 'primary'}\n              label=\"custom\"\n              onClick={() => setLabelWidth('custom')}\n            />\n          </ButtonGroup>\n        </ToolbarItem>\n        {labelWidth === 'custom' && (\n          <ToolbarItem>\n            <TextField\n              inputSize={5}\n              isLabelVisible={false}\n              label=\"Custom label width\"\n              layout=\"horizontal\"\n              onChange={e => setCustomLabelWidth(e.target.value)}\n              value={customLabelWidth}\n            />\n          </ToolbarItem>\n        )}\n      </Toolbar>\n      <FormLayout\n        fieldLayout=\"horizontal\"\n        labelWidth={labelWidth === 'custom' ? customLabelWidth : labelWidth}\n      >\n        <TextField label=\"A form element\" />\n        <TextField\n          label={\n            'Another form element with a very long label that is so ' +\n            'long that in the auto mode, it should make the label column ' +\n            'grow until the inputs reach the end of the line, but it will ' +\n            'not exceed 50 % of the FormLayout width in the limited label ' +\n            'width mode'\n          }\n        />\n        <TextField label=\"Yet another one\" />\n      </FormLayout>\n    </div>\n  )\n}",__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},()=>{const[e,t]=n.useState("default"),[l,o]=n.useState("20em");return Object(i.b)("div",null,Object(i.b)(m.I,{align:"baseline",mdxType:"Toolbar"},Object(i.b)(m.K,{mdxType:"ToolbarItem"},Object(i.b)("span",{id:"label-width-options-label"},"Label width:")),Object(i.b)(m.K,{mdxType:"ToolbarItem"},Object(i.b)(m.d,{"aria-labelledby":"label-width-options-label",mdxType:"ButtonGroup"},Object(i.b)(m.c,{color:"default"===e?"dark":"primary",label:"default",onClick:()=>t("default"),mdxType:"Button"}),Object(i.b)(m.c,{color:"auto"===e?"dark":"primary",label:"auto",onClick:()=>t("auto"),mdxType:"Button"}),Object(i.b)(m.c,{color:"limited"===e?"dark":"primary",label:"limited",onClick:()=>t("limited"),mdxType:"Button"}),Object(i.b)(m.c,{color:"custom"===e?"dark":"primary",label:"custom",onClick:()=>t("custom"),mdxType:"Button"}))),"custom"===e&&Object(i.b)(m.K,{mdxType:"ToolbarItem"},Object(i.b)(m.F,{inputSize:5,isLabelVisible:!1,label:"Custom label width",layout:"horizontal",onChange:e=>o(e.target.value),value:l,mdxType:"TextField"}))),Object(i.b)(m.j,{fieldLayout:"horizontal",labelWidth:"custom"===e?l:e,mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Another form element with a very long label that is so long that in the auto mode, it should make the label column grow until the inputs reach the end of the line, but it will not exceed 50 % of the FormLayout width in the limited label width mode",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Yet another one",mdxType:"TextField"})))}),Object(i.b)("h3",{id:"limitations"},"Limitations"),Object(i.b)("h4",{id:"label-position"},"Label Position"),Object(i.b)("p",null,"Label position of inline form fields (CheckboxField, Toggle) is ignored in\nhorizontal FormLayout."),Object(i.b)("h4",{id:"modals"},"Modals"),Object(i.b)("p",null,"Please note the ",Object(i.b)("inlineCode",{parentName:"p"},"auto")," and ",Object(i.b)("inlineCode",{parentName:"p"},"limited")," label width options may not function\ncorrectly in combination with other auto layout mechanisms, e.g. the auto-width\n",Object(i.b)("a",{parentName:"p",href:"/components/modal"},"Modal"),". It's just too much of magic that does not quite\nwork together yet 🎩."),Object(i.b)("h2",{id:"custom-fields"},"Custom Fields"),Object(i.b)("p",null,"You can even place any content you need into the FormLayout — just wrap it with\nthe ",Object(i.b)("a",{parentName:"p",href:"#formlayoutcustomfield"},"FormLayoutCustomField")," component. This layout\nhelper ensures your content is properly spaced and aligned with to other\nFormLayout elements. FormLayoutCustomFields are designed to work solely inside\nthe FormLayout component."),Object(i.b)(d.c,{__position:4,__code:'<FormLayout fieldLayout="horizontal" labelWidth="auto">\n  <TextField label="A form element" />\n  <FormLayoutCustomField label="Optional custom field label">\n    <Placeholder bordered>Custom field content</Placeholder>\n  </FormLayoutCustomField>\n  <TextField label="Another form element" />\n</FormLayout>',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},Object(i.b)(m.j,{fieldLayout:"horizontal",labelWidth:"auto",mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.k,{label:"Optional custom field label",mdxType:"FormLayoutCustomField"},Object(i.b)(b.a,{bordered:!0,mdxType:"Placeholder"},"Custom field content")),Object(i.b)(m.F,{label:"Another form element",mdxType:"TextField"}))),Object(i.b)("p",null,"👉 While you can set FormLayoutCustomField as ",Object(i.b)("inlineCode",{parentName:"p"},"disabled"),", ",Object(i.b)("inlineCode",{parentName:"p"},"valid")," or ",Object(i.b)("inlineCode",{parentName:"p"},"required"),"\nand its styles may affect contained form fields through CSS cascade, don't\nforget to mirror the aforementioned properties to the contained form fields too\nas API options as such are ",Object(i.b)("strong",{parentName:"p"},"not")," inherited."),Object(i.b)("h3",{id:"label-alignment"},"Label Alignment"),Object(i.b)("p",null,"If you are in a situation with one or more box form fields inside your\nFormLayoutCustomField, you may want to have its label aligned with the fields\ninside. Since it's ",Object(i.b)("a",{parentName:"p",href:"https://github.com/react-ui-org/react-ui/issues/265"},"not quite possible to do this automatically")," due to\nlimited browser support, there is ",Object(i.b)("inlineCode",{parentName:"p"},"innerFieldSize")," option which accepts any of\nexisting box field sizes (small, medium, or large) and is intended right for\nthis task."),Object(i.b)(d.c,{__position:5,__code:'<FormLayout fieldLayout="horizontal" labelWidth="auto">\n  <TextField label="A form element" />\n  <FormLayoutCustomField\n    innerFieldSize="medium"\n    label="Custom field label aligned to inner text input"\n  >\n    <TextField\n      isLabelVisible={false}\n      label="A form element"\n      placeholder="Text field with invisible label"\n    />\n  </FormLayoutCustomField>\n  <TextField label="Another form element" />\n</FormLayout>',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},Object(i.b)(m.j,{fieldLayout:"horizontal",labelWidth:"auto",mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.k,{innerFieldSize:"medium",label:"Custom field label aligned to inner text input",mdxType:"FormLayoutCustomField"},Object(i.b)(m.F,{isLabelVisible:!1,label:"A form element",placeholder:"Text field with invisible label",mdxType:"TextField"})),Object(i.b)(m.F,{label:"Another form element",mdxType:"TextField"}))),Object(i.b)("h3",{id:"validation-states"},"Validation States"),Object(i.b)("p",null,"Custom fields support the same validation states as regular form fields to\nprovide labels with optional feedback style."),Object(i.b)(d.c,{__position:6,__code:'<FormLayout fieldLayout="horizontal" labelWidth="auto">\n  <TextField label="A form element" />\n  <FormLayoutCustomField\n    label="Custom field label in valid state"\n    validationState="valid"\n  >\n    <Placeholder bordered>Custom field content</Placeholder>\n  </FormLayoutCustomField>\n  <TextField label="Another form element" />\n</FormLayout>',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},Object(i.b)(m.j,{fieldLayout:"horizontal",labelWidth:"auto",mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.k,{label:"Custom field label in valid state",validationState:"valid",mdxType:"FormLayoutCustomField"},Object(i.b)(b.a,{bordered:!0,mdxType:"Placeholder"},"Custom field content")),Object(i.b)(m.F,{label:"Another form element",mdxType:"TextField"}))),Object(i.b)("h3",{id:"accessibility"},"Accessibility"),Object(i.b)("p",null,"If possible, use the ",Object(i.b)("inlineCode",{parentName:"p"},"labelForId")," option to provide ID of contained form field\nso the field remains accessible via custom field label."),Object(i.b)("p",null,"You can also specify size of contained form field so custom field label is\nproperly vertically aligned."),Object(i.b)(d.c,{__position:7,__code:'() => {\n  const [isChecked, setIsChecked] = React.useState(false)\n  return (\n    <FormLayout fieldLayout="horizontal" labelWidth="auto">\n      <TextField label="A form element" />\n      <FormLayoutCustomField\n        fullWidth\n        label="Custom field label aligned with medium form field"\n        labelForId="my-text-field-custom-accessibility-2"\n        innerFieldSize="medium"\n      >\n        <Toolbar align="middle" dense>\n          <ToolbarItem>\n            <TextField\n              isLabelVisible={false}\n              label="A form element"\n              placeholder="Text field with invisible label"\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <CheckboxField\n              checked={isChecked}\n              label="Another form field"\n              onChange={() => setIsChecked(!isChecked)}\n            />\n          </ToolbarItem>\n        </Toolbar>\n      </FormLayoutCustomField>\n      <TextField label="Another form element" />\n    </FormLayout>\n  )\n}',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},()=>{const[e,t]=n.useState(!1);return Object(i.b)(m.j,{fieldLayout:"horizontal",labelWidth:"auto",mdxType:"FormLayout"},Object(i.b)(m.F,{label:"A form element",mdxType:"TextField"}),Object(i.b)(m.k,{fullWidth:!0,label:"Custom field label aligned with medium form field",labelForId:"my-text-field-custom-accessibility-2",innerFieldSize:"medium",mdxType:"FormLayoutCustomField"},Object(i.b)(m.I,{align:"middle",dense:!0,mdxType:"Toolbar"},Object(i.b)(m.K,{mdxType:"ToolbarItem"},Object(i.b)(m.F,{isLabelVisible:!1,label:"A form element",placeholder:"Text field with invisible label",mdxType:"TextField"})),Object(i.b)(m.K,{mdxType:"ToolbarItem"},Object(i.b)(m.h,{checked:e,label:"Another form field",onChange:()=>t(!e),mdxType:"CheckboxField"})))),Object(i.b)(m.F,{label:"Another form element",mdxType:"TextField"}))}),Object(i.b)("h2",{id:"full-example"},"Full Example"),Object(i.b)("p",null,"This is a demo of all components supported by FormLayout."),Object(i.b)(d.c,{__position:8,__code:'() => {\n  const [fieldLayout, setFieldLayout] = React.useState(\'vertical\')\n  const [fruit, setFruit] = React.useState(\'apple\')\n  const [isDeliveryAddress, setIsDeliveryAddress] = React.useState(true)\n  const [receiveNewsletter, setReceiveNewsletter] = React.useState(true)\n  const options = [\n    {\n      label: \'Apple\',\n      value: \'apple\',\n    },\n    {\n      label: \'Banana\',\n      value: \'banana\',\n    },\n    {\n      label: \'Grapefruit\',\n      value: \'grapefruit\',\n    },\n  ]\n  return (\n    <div>\n      <Toolbar>\n        <ToolbarItem>\n          <ButtonGroup>\n            <Button\n              color={fieldLayout === \'vertical\' ? \'dark\' : \'primary\'}\n              label="Vertical layout"\n              onClick={() => setFieldLayout(\'vertical\')}\n            />\n            <Button\n              color={fieldLayout === \'horizontal\' ? \'dark\' : \'primary\'}\n              label="Horizontal layout"\n              onClick={() => setFieldLayout(\'horizontal\')}\n            />\n          </ButtonGroup>\n        </ToolbarItem>\n      </Toolbar>\n      <FormLayout fieldLayout={fieldLayout} labelWidth="auto">\n        <>\n          <TextField label="First Name" />\n          <TextField label="Last Name" />\n        </>\n        <TextField helpText="Optional" label="Email address" type="email" />\n        <>\n          <TextField label="Address" placeholder="Address line 1" />\n          <TextField\n            isLabelVisible={false}\n            label="Address 2"\n            placeholder="Address line 2"\n          />\n          <TextField\n            inputSize={6}\n            label="ZIP"\n            validationState="invalid"\n            validationText="ZIP should be 5 to 6 digits long code."\n          />\n          <FormLayoutCustomField label="Country">\n            <span>Czech Republic</span>\n          </FormLayoutCustomField>\n          <CheckboxField\n            checked={isDeliveryAddress}\n            helpText="Uncheck if you wish to deliver to a different address."\n            label="This is my delivery address"\n            onChange={() => setIsDeliveryAddress(!isDeliveryAddress)}\n          />\n        </>\n        <SelectField\n          label="Your favourite fruit"\n          onChange={e => setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        />\n        <TextArea fullWidth label="Message" rows={3} />\n        <FileInputField label="Attachment" />\n        <Toggle\n          checked={receiveNewsletter}\n          helpText="Only once per week!"\n          label="Receive weekly newsletter"\n          onChange={() => setReceiveNewsletter(!receiveNewsletter)}\n          required\n        />\n        <Radio\n          label="And fruit again!"\n          onChange={e => setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        />\n      </FormLayout>\n    </div>\n  )\n}',__scope:{props:l,DefaultLayout:r.a,Playground:d.c,Props:d.d,Placeholder:b.a,Button:m.c,ButtonGroup:m.d,CheckboxField:m.h,FileInputField:m.i,Radio:m.x,SelectField:m.z,TextArea:m.E,TextField:m.F,Toggle:m.H,Toolbar:m.I,ToolbarItem:m.K,FormLayout:m.j,FormLayoutCustomField:m.k,DefaultLayout:r.a,_frontmatter:c},mdxType:"Playground"},()=>{const[e,t]=n.useState("vertical"),[l,o]=n.useState("apple"),[a,r]=n.useState(!0),[d,b]=n.useState(!0),u=[{label:"Apple",value:"apple"},{label:"Banana",value:"banana"},{label:"Grapefruit",value:"grapefruit"}];return Object(i.b)("div",null,Object(i.b)(m.I,{mdxType:"Toolbar"},Object(i.b)(m.K,{mdxType:"ToolbarItem"},Object(i.b)(m.d,{mdxType:"ButtonGroup"},Object(i.b)(m.c,{color:"vertical"===e?"dark":"primary",label:"Vertical layout",onClick:()=>t("vertical"),mdxType:"Button"}),Object(i.b)(m.c,{color:"horizontal"===e?"dark":"primary",label:"Horizontal layout",onClick:()=>t("horizontal"),mdxType:"Button"})))),Object(i.b)(m.j,{fieldLayout:e,labelWidth:"auto",mdxType:"FormLayout"},Object(i.b)(n.Fragment,null,Object(i.b)(m.F,{label:"First Name",mdxType:"TextField"}),Object(i.b)(m.F,{label:"Last Name",mdxType:"TextField"})),Object(i.b)(m.F,{helpText:"Optional",label:"Email address",type:"email",mdxType:"TextField"}),Object(i.b)(n.Fragment,null,Object(i.b)(m.F,{label:"Address",placeholder:"Address line 1",mdxType:"TextField"}),Object(i.b)(m.F,{isLabelVisible:!1,label:"Address 2",placeholder:"Address line 2",mdxType:"TextField"}),Object(i.b)(m.F,{inputSize:6,label:"ZIP",validationState:"invalid",validationText:"ZIP should be 5 to 6 digits long code.",mdxType:"TextField"}),Object(i.b)(m.k,{label:"Country",mdxType:"FormLayoutCustomField"},Object(i.b)("span",null,"Czech Republic")),Object(i.b)(m.h,{checked:a,helpText:"Uncheck if you wish to deliver to a different address.",label:"This is my delivery address",onChange:()=>r(!a),mdxType:"CheckboxField"})),Object(i.b)(m.z,{label:"Your favourite fruit",onChange:e=>o(e.target.value),options:u,value:l,mdxType:"SelectField"}),Object(i.b)(m.E,{fullWidth:!0,label:"Message",rows:3,mdxType:"TextArea"}),Object(i.b)(m.i,{label:"Attachment",mdxType:"FileInputField"}),Object(i.b)(m.H,{checked:d,helpText:"Only once per week!",label:"Receive weekly newsletter",onChange:()=>b(!d),required:!0,mdxType:"Toggle"}),Object(i.b)(m.x,{label:"And fruit again!",onChange:e=>o(e.target.value),options:u,value:l,mdxType:"Radio"})))}),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)(d.d,{table:!0,of:m.j,mdxType:"Props"}),Object(i.b)("h3",{id:"formlayoutcustomfield-api"},"FormLayoutCustomField API"),Object(i.b)("p",null,"A place for custom content inside FormLayout."),Object(i.b)(d.d,{table:!0,of:m.k,mdxType:"Props"}),Object(i.b)("h2",{id:"theming"},"Theming"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-FormLayout__row-gap")),Object(i.b)("td",{parentName:"tr",align:null},"Gap between individual rows")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-FormLayout--horizontal__label__width")),Object(i.b)("td",{parentName:"tr",align:null},"Default label width")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-FormLayout--horizontal__label__width--auto")),Object(i.b)("td",{parentName:"tr",align:null},"Label width in automatic layout")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-FormLayout--horizontal__label__width--limited")),Object(i.b)("td",{parentName:"tr",align:null},"Label width in limited-width layout")))),Object(i.b)("h3",{id:"formlayoutcustomfield-theming"},"FormLayoutCustomField Theming"),Object(i.b)("p",null,"FormLayoutCustomField can be styled using a small subset of\n",Object(i.b)("a",{parentName:"p",href:"/customize/theming/forms"},"other form fields theming options"),"."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Custom Property"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-FormField--custom--default__surrounding-text-color")),Object(i.b)("td",{parentName:"tr",align:null},"Custom field label color in default state")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"--rui-FormField--custom--disabled__surrounding-text-color")),Object(i.b)("td",{parentName:"tr",align:null},"Custom field label color in disabled-like state")))))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!Object.prototype.hasOwnProperty.call(h,"__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/FormLayout/README.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-form-layout-readme-mdx-a1ac93fedaa87d0d697b.js.map