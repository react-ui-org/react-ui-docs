{"version":3,"sources":["webpack:///../src/lib/components/layout/FormLayout/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Placeholder","Button","ButtonGroup","CheckboxField","Radio","SelectField","TextArea","TextField","Toggle","Center","Toolbar","ToolbarItem","FormLayout","FormLayoutCustomField","id","label","fieldLayout","labelWidth","setLabelWidth","React","customLabelWidth","setCustomLabelWidth","className","align","aria-labelledby","clickHandler","variant","changeHandler","e","target","value","inputSize","isLabelVisible","layout","bordered","height","autoWidth","helpText","type","placeholder","validationState","validationText","options","fullWidth","rows","checked","required","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-layout-form-layout-readme-mdx-0d51fdd71cc939ae08a1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Placeholder } from '../../../../docs/_components/Placeholder/Placeholder';\nimport { Button } from '../../ui/Button/Button';\nimport { ButtonGroup } from '../../ui/ButtonGroup/ButtonGroup';\nimport { CheckboxField } from '../../ui/CheckboxField/CheckboxField';\nimport { Radio } from '../../ui/Radio/Radio';\nimport { SelectField } from '../../ui/SelectField/SelectField';\nimport { TextArea } from '../../ui/TextArea/TextArea';\nimport { TextField } from '../../ui/TextField/TextField';\nimport { Toggle } from '../../ui/Toggle/Toggle';\nimport { Center } from '../Center/Center';\nimport { Toolbar } from '../Toolbar/Toolbar';\nimport { ToolbarItem } from '../Toolbar/ToolbarItem';\nimport { FormLayout } from './FormLayout';\nimport { FormLayoutCustomField } from './FormLayoutCustomField';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formlayout\"\n    }}>{`FormLayout`}</h1>\n    <p>{`The FormLayout aligns form fields into an organized grid.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the FormLayout component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { FormLayout } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<FormLayout>\\n  <TextField id=\\\"my-text-field\\\" label=\\\"A form element\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field\" label=\"A form element\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <p>{`Since all form fields in React UI are styled as inline blocks, they `}<strong parentName=\"p\">{`queue up\none after another in a row by default.`}</strong>{` The FormLayout component is there to\nmake building `}<strong parentName=\"p\">{`vertical and horizontal forms`}</strong>{` easy. It uses the right tool for\nthe job: the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\"\n      }}>{`CSS grid layout`}</a>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Put `}<strong parentName=\"p\">{`only form field components`}</strong>{` from React UI inside the FormLayout and\nmake sure they are `}<strong parentName=\"p\">{`direct descendants`}</strong>{` of it (React\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://reactjs.org/docs/fragments.html\"\n          }}>{`fragments`}</a>{`\nare supported!). All React UI form components are ready for this use case and\ndon't need to be wrapped in any `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`s. Namely, the FormLayout supports the\nfollowing React UI components:\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/checkbox-field\"\n          }}>{`CheckboxField`}</a>{`,\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/radio\"\n          }}>{`Radio`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/select-field\"\n          }}>{`SelectField`}</a>{`,\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/text-area\"\n          }}>{`TextArea`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/text-field\"\n          }}>{`TextField`}</a>{`,\nand `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/toggle\"\n          }}>{`Toggle`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the `}<a parentName=\"p\" {...{\n            \"href\": \"#custom-fields\"\n          }}>{`FormLayoutCustomField`}</a>{` component when you need to\nplace any `}<strong parentName=\"p\">{`custom content`}</strong>{` inside the FormLayout. This layout helper ensures\nyour content is properly spaced and aligned with other FormLayout elements.\nDo `}<strong parentName=\"p\">{`not`}</strong>{` try to put any custom HTML or React components directly into\nFormLayout without wrapping it with the FormLayoutCustomField first.`}</p>\n      </li>\n    </ul>\n    <p>{`👉 For usage in auto-width Modal, you may need to turn on the `}<inlineCode parentName=\"p\">{`autoWidth`}</inlineCode>{` option\nfor your FormLayout. This prevents FormLayout from unexpectedly growing in\nbrowsers that don't support\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\"\n      }}>{`CSS subgrid`}</a>{`\nin cases when there are longer validation messages or help texts.`}</p>\n    <h2 {...{\n      \"id\": \"vertical-layout\"\n    }}>{`Vertical Layout`}</h2>\n    <p>{`Vertical FormLayout works similar to the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/layout/list\"\n      }}>{`List`}</a>{` layout\nexcept that no equivalent of ListItems is needed. It stacks the form fields\nvertically while it forces the vertical layout mode on them. To use this layout,\nsimply wrap your form fields with the FormLayout component:`}</p>\n    <Playground __position={1} __code={'<FormLayout>\\n  <TextField id=\\\"my-text-field-vertical-1\\\" label=\\\"A form element\\\" />\\n  <TextField id=\\\"my-text-field-vertical-2\\\" label=\\\"Another form element\\\" />\\n  <TextField id=\\\"my-text-field-vertical-3\\\" label=\\\"Yet another one\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-vertical-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-vertical-2\" label=\"Another form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-vertical-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`Horizontal FormLayout is designed for horizontal form fields: it nicely `}<strong parentName=\"p\">{`aligns\nlabels and inputs in an organized grid.`}</strong>{` It is applied starting from the `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`\nviewport size onward and it forces the horizontal layout on the fields.`}</p>\n    <Playground __position={2} __code={'<FormLayout fieldLayout=\\\"horizontal\\\">\\n  <TextField id=\\\"my-text-field-horizontal-1\\\" label=\\\"A form element\\\" />\\n  <TextField id=\\\"my-text-field-horizontal-2\\\" label=\\\"Another form element\\\" />\\n  <TextField id=\\\"my-text-field-horizontal-3\\\" label=\\\"Yet another one\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-horizontal-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-horizontal-2\" label=\"Another form element\" mdxType=\"TextField\" />\n    <TextField id=\"my-text-field-horizontal-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h3 {...{\n      \"id\": \"label-width\"\n    }}>{`Label Width`}</h3>\n    <p>{`In the horizontal layout mode, it's possible to fine-tune the way how the form\nwill be aligned through the `}<inlineCode parentName=\"p\">{`labelWidth`}</inlineCode>{` option to cover various design\nrequirements. It comes with `}<strong parentName=\"p\">{`three globally shared options:`}</strong>{` default width,\nauto width, and limited width. For cases where an individual manual width works\nbetter, there is the `}<strong parentName=\"p\">{`local custom width mode`}</strong>{` which enables setting a width\nthat is applied just for the current FormLayout.`}</p>\n    <p>{`👉 All global label width options can be easily `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming\"\n      }}>{`customized`}</a>{`\nwith CSS custom properties.`}</p>\n    <h4 {...{\n      \"id\": \"label-width-options\"\n    }}>{`Label Width Options`}</h4>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` mode (global) sets the width of all labels to a `}<strong parentName=\"p\">{`global default\nvalue`}</strong>{` which is 10 em.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` mode (global) aligns the form `}<strong parentName=\"p\">{`according to the longest label.`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`limited`}</inlineCode>{` mode (global) works as `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` except it's intended for values\nthat `}<strong parentName=\"p\">{`set a limit for the label width.`}</strong>{` Its default value is\n`}<inlineCode parentName=\"p\">{`fitcontent(50%)`}</inlineCode>{` which also aligns the form according to the longest label\nlike `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{`, but with the difference that the labels cannot be wider than\n50 % of the FormLayout.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`custom`}</inlineCode>{` mode (local) allows you to enter any `}<strong parentName=\"p\">{`custom label width for\nindividual FormLayouts.`}</strong></p>\n      </li>\n    </ul>\n    <p>{`👉 Please note the `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`limited`}</inlineCode>{` label width options may not function\ncorrectly in combination with other auto layout mechanisms, eg. the auto-width\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/ui/modal\"\n      }}>{`Modal`}</a>{`. It's just too much of magic that doesn't quite\nwork together yet 🎩.`}</p>\n    <p>{`Try to resize the playground to see how individual options work.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [labelWidth, setLabelWidth] = React.useState(\\'default\\')\\n  const [customLabelWidth, setCustomLabelWidth] = React.useState(\\'20em\\')\\n  return (\\n    <div>\\n      <div className=\\\"mb-6\\\">\\n        <Toolbar align=\\\"baseline\\\">\\n          <ToolbarItem>\\n            <span id=\\\"label-width-options-label\\\">Label width:</span>\\n          </ToolbarItem>\\n          <ToolbarItem>\\n            <ButtonGroup aria-labelledby=\\\"#label-width-options-label\\\">\\n              <Button\\n                label=\\\"default\\\"\\n                clickHandler={() => setLabelWidth(\\'default\\')}\\n                variant={labelWidth === \\'default\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"auto\\\"\\n                clickHandler={() => setLabelWidth(\\'auto\\')}\\n                variant={labelWidth === \\'auto\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"limited\\\"\\n                clickHandler={() => setLabelWidth(\\'limited\\')}\\n                variant={labelWidth === \\'limited\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n              <Button\\n                label=\\\"custom\\\"\\n                clickHandler={() => setLabelWidth(\\'custom\\')}\\n                variant={labelWidth === \\'custom\\' ? \\'dark\\' : \\'primary\\'}\\n              />\\n            </ButtonGroup>\\n          </ToolbarItem>\\n          {labelWidth === \\'custom\\' && (\\n            <ToolbarItem>\\n              <TextField\\n                changeHandler={e => setCustomLabelWidth(e.target.value)}\\n                id=\\\"form-layout-custom-label-width\\\"\\n                inputSize={5}\\n                isLabelVisible={false}\\n                label=\\\"Custom label width\\\"\\n                layout=\\\"horizontal\\\"\\n                value={customLabelWidth}\\n              />\\n            </ToolbarItem>\\n          )}\\n        </Toolbar>\\n      </div>\\n      <FormLayout\\n        fieldLayout=\\\"horizontal\\\"\\n        labelWidth={labelWidth === \\'custom\\' ? customLabelWidth : labelWidth}\\n      >\\n        <TextField id=\\\"my-text-field-label-width-1\\\" label=\\\"A form element\\\" />\\n        <TextField\\n          id=\\\"my-text-field-label-width-2\\\"\\n          label={\\n            \\'Another form element with a very long label that is so \\' +\\n            \\'long that in the auto mode, it should make the label column \\' +\\n            \\'grow until the inputs reach the end of the line, but it will \\' +\\n            \\'not exceed 50 % of the FormLayout width in the limited label \\' +\\n            \\'width mode\\'\\n          }\\n        />\\n        <TextField id=\\\"my-text-field-label-width-3\\\" label=\\\"Yet another one\\\" />\\n      </FormLayout>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [labelWidth, setLabelWidth] = React.useState('default');\n        const [customLabelWidth, setCustomLabelWidth] = React.useState('20em');\n        return <div>\n        <div className=\"mb-6\">\n          <Toolbar align=\"baseline\" mdxType=\"Toolbar\">\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <span id=\"label-width-options-label\">Label width:</span>\n            </ToolbarItem>\n            <ToolbarItem mdxType=\"ToolbarItem\">\n              <ButtonGroup aria-labelledby=\"#label-width-options-label\" mdxType=\"ButtonGroup\">\n                <Button label=\"default\" clickHandler={() => setLabelWidth('default')} variant={labelWidth === 'default' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"auto\" clickHandler={() => setLabelWidth('auto')} variant={labelWidth === 'auto' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"limited\" clickHandler={() => setLabelWidth('limited')} variant={labelWidth === 'limited' ? 'dark' : 'primary'} mdxType=\"Button\" />\n                <Button label=\"custom\" clickHandler={() => setLabelWidth('custom')} variant={labelWidth === 'custom' ? 'dark' : 'primary'} mdxType=\"Button\" />\n              </ButtonGroup>\n            </ToolbarItem>\n            {labelWidth === 'custom' && <ToolbarItem mdxType=\"ToolbarItem\">\n                <TextField changeHandler={e => setCustomLabelWidth(e.target.value)} id=\"form-layout-custom-label-width\" inputSize={5} isLabelVisible={false} label=\"Custom label width\" layout=\"horizontal\" value={customLabelWidth} mdxType=\"TextField\" />\n              </ToolbarItem>}\n          </Toolbar>\n        </div>\n        <FormLayout fieldLayout=\"horizontal\" labelWidth={labelWidth === 'custom' ? customLabelWidth : labelWidth} mdxType=\"FormLayout\">\n          <TextField id=\"my-text-field-label-width-1\" label=\"A form element\" mdxType=\"TextField\" />\n          <TextField id=\"my-text-field-label-width-2\" label={'Another form element with a very long label that is so ' + 'long that in the auto mode, it should make the label column ' + 'grow until the inputs reach the end of the line, but it will ' + 'not exceed 50 % of the FormLayout width in the limited label ' + 'width mode'} mdxType=\"TextField\" />\n          <TextField id=\"my-text-field-label-width-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n        </FormLayout>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"alignment\"\n    }}>{`Alignment`}</h2>\n    <p>{`To align whole FormLayout to center of a container, simply wrap it with the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/layout/center\"\n      }}>{`Center`}</a>{` layout.`}</p>\n    <Playground __position={4} __code={'<Placeholder bordered height=\\\"24rem\\\">\\n  <Center>\\n    <FormLayout autoWidth>\\n      <TextField id=\\\"my-text-field-auto-width-1\\\" label=\\\"A form element\\\" />\\n      <TextField\\n        id=\\\"my-text-field-auto-width-2\\\"\\n        label=\\\"Another form element\\\"\\n      />\\n      <TextField id=\\\"my-text-field-auto-width-3\\\" label=\\\"Yet another one\\\" />\\n    </FormLayout>\\n  </Center>\\n</Placeholder>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Placeholder bordered height=\"24rem\" mdxType=\"Placeholder\">\n    <Center mdxType=\"Center\">\n      <FormLayout autoWidth mdxType=\"FormLayout\">\n        <TextField id=\"my-text-field-auto-width-1\" label=\"A form element\" mdxType=\"TextField\" />\n        <TextField id=\"my-text-field-auto-width-2\" label=\"Another form element\" mdxType=\"TextField\" />\n        <TextField id=\"my-text-field-auto-width-3\" label=\"Yet another one\" mdxType=\"TextField\" />\n      </FormLayout>\n    </Center>\n  </Placeholder>\n    </Playground>\n    <h2 {...{\n      \"id\": \"custom-fields\"\n    }}>{`Custom Fields`}</h2>\n    <p>{`You can even place any content you need into the FormLayout — just wrap it with\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"#formlayoutcustomfield\"\n      }}>{`FormLayoutCustomField`}</a>{` component. This layout\nhelper ensures your content is properly spaced and aligned with to other\nFormLayout elements. FormLayoutCustomFields are designed to work solely inside\nthe FormLayout component.`}</p>\n    <Playground __position={5} __code={'<FormLayout fieldLayout=\\\"horizontal\\\">\\n  <TextField id=\\\"my-text-field-custom-1\\\" label=\\\"A form element\\\" />\\n  <FormLayoutCustomField label=\\\"Optional label\\\">\\n    <Placeholder bordered>Custom content</Placeholder>\\n  </FormLayoutCustomField>\\n  <TextField id=\\\"my-text-field-custom-2\\\" label=\\\"Another form element\\\" />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" mdxType=\"FormLayout\">\n    <TextField id=\"my-text-field-custom-1\" label=\"A form element\" mdxType=\"TextField\" />\n    <FormLayoutCustomField label=\"Optional label\" mdxType=\"FormLayoutCustomField\">\n      <Placeholder bordered mdxType=\"Placeholder\">Custom content</Placeholder>\n    </FormLayoutCustomField>\n    <TextField id=\"my-text-field-custom-2\" label=\"Another form element\" mdxType=\"TextField\" />\n  </FormLayout>\n    </Playground>\n    <h2 {...{\n      \"id\": \"full-example\"\n    }}>{`Full Example`}</h2>\n    <p>{`This is a demo of all components supported by FormLayout.`}</p>\n    <Playground __position={6} __code={'<FormLayout fieldLayout=\\\"horizontal\\\" labelWidth=\\\"auto\\\">\\n  <>\\n    <TextField\\n      id=\\\"form-layout-horizontal-first-name\\\"\\n      changeHandler={() => {}}\\n      label=\\\"First Name\\\"\\n    />\\n    <TextField\\n      id=\\\"form-layout-horizontal-last-name\\\"\\n      changeHandler={() => {}}\\n      label=\\\"Last Name\\\"\\n    />\\n  </>\\n  <TextField\\n    id=\\\"form-layout-horizontal-email\\\"\\n    changeHandler={() => {}}\\n    helpText=\\\"Optional\\\"\\n    label=\\\"Email address\\\"\\n    type=\\\"email\\\"\\n  />\\n  <>\\n    <TextField\\n      id=\\\"form-layout-horizontal-address-1\\\"\\n      changeHandler={() => {}}\\n      label=\\\"Address\\\"\\n      placeholder=\\\"Address line 1\\\"\\n    />\\n    <TextField\\n      id=\\\"form-layout-horizontal-address-2\\\"\\n      changeHandler={() => {}}\\n      isLabelVisible={false}\\n      label=\\\"Address 2\\\"\\n      placeholder=\\\"Address line 2\\\"\\n    />\\n    <TextField\\n      id=\\\"form-layout-horizontal-zip\\\"\\n      changeHandler={() => {}}\\n      label=\\\"ZIP\\\"\\n      inputSize={6}\\n      validationState=\\\"invalid\\\"\\n      validationText=\\\"ZIP should be 5 to 6 digits long code.\\\"\\n    />\\n    <FormLayoutCustomField\\n      id=\\\"form-layout-horizontal-country\\\"\\n      label=\\\"Country\\\"\\n    >\\n      <span>Czech Republic</span>\\n    </FormLayoutCustomField>\\n    <CheckboxField\\n      id=\\\"form-layout-horizontal-delivery\\\"\\n      changeHandler={() => {}}\\n      label=\\\"This is my delivery address\\\"\\n    />\\n  </>\\n  <SelectField\\n    id=\\\"form-layout-horizontal-fruit\\\"\\n    changeHandler={() => {}}\\n    label=\\\"Your favourite fruit\\\"\\n    options={[\\n      {\\n        label: \\'Apple\\',\\n        value: \\'apple\\',\\n      },\\n      {\\n        label: \\'Banana\\',\\n        value: \\'banana\\',\\n      },\\n      {\\n        label: \\'Grapefruit\\',\\n        value: \\'grapefruit\\',\\n      },\\n    ]}\\n  />\\n  <TextArea\\n    id=\\\"form-layout-horizontal-message\\\"\\n    changeHandler={() => {}}\\n    fullWidth\\n    label=\\\"Message\\\"\\n    rows={3}\\n  />\\n  <Toggle\\n    id=\\\"form-layout-horizontal-newsletter\\\"\\n    changeHandler={() => {}}\\n    checked\\n    helpText=\\\"Only once per week!\\\"\\n    label=\\\"Receive weekly newsletter\\\"\\n    required\\n  />\\n  <Radio\\n    id=\\\"form-layout-horizontal-fruit-2\\\"\\n    changeHandler={() => {}}\\n    label=\\\"And fruit again!\\\"\\n    options={[\\n      {\\n        label: \\'Apple\\',\\n        value: \\'apple\\',\\n      },\\n      {\\n        label: \\'Banana\\',\\n        value: \\'banana\\',\\n      },\\n      {\\n        label: \\'Grapefruit\\',\\n        value: \\'grapefruit\\',\\n      },\\n    ]}\\n    value=\\\"apple\\\"\\n  />\\n</FormLayout>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Placeholder,\n      Button,\n      ButtonGroup,\n      CheckboxField,\n      Radio,\n      SelectField,\n      TextArea,\n      TextField,\n      Toggle,\n      Center,\n      Toolbar,\n      ToolbarItem,\n      FormLayout,\n      FormLayoutCustomField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\" mdxType=\"FormLayout\">\n    <>\n      <TextField id=\"form-layout-horizontal-first-name\" changeHandler={() => {}} label=\"First Name\" mdxType=\"TextField\" />\n      <TextField id=\"form-layout-horizontal-last-name\" changeHandler={() => {}} label=\"Last Name\" mdxType=\"TextField\" />\n    </>\n    <TextField id=\"form-layout-horizontal-email\" changeHandler={() => {}} helpText=\"Optional\" label=\"Email address\" type=\"email\" mdxType=\"TextField\" />\n    <>\n      <TextField id=\"form-layout-horizontal-address-1\" changeHandler={() => {}} label=\"Address\" placeholder=\"Address line 1\" mdxType=\"TextField\" />\n      <TextField id=\"form-layout-horizontal-address-2\" changeHandler={() => {}} isLabelVisible={false} label=\"Address 2\" placeholder=\"Address line 2\" mdxType=\"TextField\" />\n      <TextField id=\"form-layout-horizontal-zip\" changeHandler={() => {}} label=\"ZIP\" inputSize={6} validationState=\"invalid\" validationText=\"ZIP should be 5 to 6 digits long code.\" mdxType=\"TextField\" />\n      <FormLayoutCustomField id=\"form-layout-horizontal-country\" label=\"Country\" mdxType=\"FormLayoutCustomField\">\n        <span>Czech Republic</span>\n      </FormLayoutCustomField>\n      <CheckboxField id=\"form-layout-horizontal-delivery\" changeHandler={() => {}} label=\"This is my delivery address\" mdxType=\"CheckboxField\" />\n    </>\n    <SelectField id=\"form-layout-horizontal-fruit\" changeHandler={() => {}} label=\"Your favourite fruit\" options={[{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }]} mdxType=\"SelectField\" />\n    <TextArea id=\"form-layout-horizontal-message\" changeHandler={() => {}} fullWidth label=\"Message\" rows={3} mdxType=\"TextArea\" />\n    <Toggle id=\"form-layout-horizontal-newsletter\" changeHandler={() => {}} checked helpText=\"Only once per week!\" label=\"Receive weekly newsletter\" required mdxType=\"Toggle\" />\n    <Radio id=\"form-layout-horizontal-fruit-2\" changeHandler={() => {}} label=\"And fruit again!\" options={[{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }]} value=\"apple\" mdxType=\"Radio\" />\n  </FormLayout>\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={FormLayout} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"formlayoutcustomfield\"\n    }}>{`FormLayoutCustomField`}</h3>\n    <p>{`A place for custom content inside FormLayout.`}</p>\n    <Props of={FormLayoutCustomField} mdxType=\"Props\" />\n    <hr></hr>\n    <p>{`Next: `}<a parentName=\"p\" {...{\n        \"href\": \"/components/layout/grid\"\n      }}>{`Grid →`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}