{"version":3,"sources":["webpack:///../src/lib/components/Radio/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Radio","fruit","setFruit","React","label","onChange","e","target","value","options","frequency","setFrequency","isLabelVisible","layout","helpText","required","validationState","validationText","disabled","table","of","isMDXComponent"],"mappings":"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","file":"component---src-lib-components-radio-readme-mdx-20fd5060dd1d52569fbc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Radio } from './Radio';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"radio\"\n    }}>{`Radio`}</h1>\n    <p>{`Radio allows users to select one option from a set.`}</p>\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To implement the Radio component, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Radio } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  return (\\n    <Radio\\n      label=\\\"Your favourite fruit\\\"\\n      onChange={e => setFruit(e.target.value)}\\n      options={[\\n        {\\n          label: \\'Apple\\',\\n          value: \\'apple\\',\\n        },\\n        {\\n          label: \\'Banana\\',\\n          value: \\'banana\\',\\n        },\\n        {\\n          label: \\'Grapefruit\\',\\n          value: \\'grapefruit\\',\\n        },\\n      ]}\\n      value={fruit}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        return <Radio label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={[{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }]} value={fruit} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`API`}</a>{` for all available options.`}</p>\n    <h2 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use Radio for `}<strong parentName=\"p\">{`just a few options`}</strong>{`. For larger sets of many options (say 4\nand more) consider using the `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/select-field\"\n          }}>{`SelectField`}</a>{`\ncomponent. This will help keep your UI clean and uncluttered and prevent your\nusers from being overwhelmed by too many options.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Don't use for boolean`}</strong>{` (true/false) selection or to toggle things on and\noff. `}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/checkbox-field\"\n          }}>{`CheckboxField`}</a>{` and\n`}<a parentName=\"p\" {...{\n            \"href\": \"/components/ui/toggle\"\n          }}>{`Toggle`}</a>{` are more suitable for such cases.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`short and descriptive labels`}</strong>{`, ideally nouns rather than seemingly\npolite phrases like `}<em parentName=\"p\">{`Please select your favourite fruit`}</em>{`. Short labels will\nhelp your users accomplish their task faster.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Only make the Radio's label invisible when there is `}<strong parentName=\"p\">{`another visual\nclue`}</strong>{` to guide users through filling the input.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a short label is not enough, use `}<strong parentName=\"p\">{`help texts to guide users`}</strong>{` before\nthey enter anything.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<strong parentName=\"p\">{`clear, calm error messages`}</strong>{` when there's a problem with what they\nentered.`}</p>\n      </li>\n    </ul>\n    <p>{`ðŸ“– `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/\"\n      }}>{`Read more about checkboxes and radios at Nielsen Norman Group.`}</a></p>\n    <h2 {...{\n      \"id\": \"invisible-label\"\n    }}>{`Invisible Label`}</h2>\n    <p>{`While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should `}<strong parentName=\"p\">{`provide another visual clue`}</strong>{` so users know what to fill into\nthe input.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [frequency, setFrequency] = React.useState(\\'weekly\\')\\n  return (\\n    <Radio\\n      isLabelVisible={false}\\n      label=\\\"Newsletter frequency\\\"\\n      onChange={e => setFrequency(e.target.value)}\\n      options={[\\n        {\\n          label: \\'I want to subscribe to the weekly newsletter\\',\\n          value: \\'weekly\\',\\n        },\\n        {\\n          label: \\'I want to subscribe to the monthly newsletter\\',\\n          value: \\'monthly\\',\\n        },\\n        {\\n          label: \\\"I don\\'t wish to receive anything\\\",\\n          value: \\'never\\',\\n        },\\n      ]}\\n      value={frequency}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [frequency, setFrequency] = React.useState('weekly');\n        return <Radio isLabelVisible={false} label=\"Newsletter frequency\" onChange={e => setFrequency(e.target.value)} options={[{\n          label: 'I want to subscribe to the weekly newsletter',\n          value: 'weekly'\n        }, {\n          label: 'I want to subscribe to the monthly newsletter',\n          value: 'monthly'\n        }, {\n          label: \"I don't wish to receive anything\",\n          value: 'never'\n        }]} value={frequency} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-layout\"\n    }}>{`Horizontal Layout`}</h2>\n    <p>{`The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better â€” and that's why React UI\nsupports this kind of layout as well.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [frequency, setFrequency] = React.useState(\\'weekly\\')\\n  return (\\n    <Radio\\n      label=\\\"Newsletter frequency\\\"\\n      layout=\\\"horizontal\\\"\\n      onChange={e => setFrequency(e.target.value)}\\n      options={[\\n        {\\n          label: \\'I want to subscribe to the weekly newsletter\\',\\n          value: \\'weekly\\',\\n        },\\n        {\\n          label: \\'I want to subscribe to the monthly newsletter\\',\\n          value: \\'monthly\\',\\n        },\\n        {\\n          label: \\\"I don\\'t wish to receive anything\\\",\\n          value: \\'never\\',\\n        },\\n      ]}\\n      value={frequency}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [frequency, setFrequency] = React.useState('weekly');\n        return <Radio label=\"Newsletter frequency\" layout=\"horizontal\" onChange={e => setFrequency(e.target.value)} options={[{\n          label: 'I want to subscribe to the weekly newsletter',\n          value: 'weekly'\n        }, {\n          label: 'I want to subscribe to the monthly newsletter',\n          value: 'monthly'\n        }, {\n          label: \"I don't wish to receive anything\",\n          value: 'never'\n        }]} value={frequency} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"help-text\"\n    }}>{`Help Text`}</h2>\n    <p>{`You may provide an additional help text to clarify how the input should be\nfilled.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  return (\\n    <Radio\\n      helpText=\\\"What do you prefer?\\\"\\n      label=\\\"Your favourite fruit\\\"\\n      onChange={e => setFruit(e.target.value)}\\n      options={[\\n        {\\n          label: \\'Apple\\',\\n          value: \\'apple\\',\\n        },\\n        {\\n          label: \\'Banana\\',\\n          value: \\'banana\\',\\n        },\\n        {\\n          label: \\'Grapefruit\\',\\n          value: \\'grapefruit\\',\\n        },\\n      ]}\\n      value={fruit}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        return <Radio helpText=\"What do you prefer?\" label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={[{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }]} value={fruit} mdxType=\"Radio\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"validation-states\"\n    }}>{`Validation States`}</h3>\n    <p>{`Validation states visually present the result of validation of the input. You\nshould always `}<strong parentName=\"p\">{`provide a validation message for states other than valid`}</strong>{` so\nusers know what happened and what action they should take or what options they\nhave.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <Radio\\n        label=\\\"Your favourite fruit\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        required\\n        validationState=\\\"valid\\\"\\n        validationText=\\\"Great, they\\'re in stock!\\\"\\n        value={fruit}\\n      />\\n      <Radio\\n        label=\\\"Your favourite fruit\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        required\\n        validationState=\\\"warning\\\"\\n        validationText=\\\"Oh, really?\\\"\\n        value={fruit}\\n      />\\n      <Radio\\n        label=\\\"Your favourite fruit\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        required\\n        validationState=\\\"invalid\\\"\\n        validationText=\\\"You must select one kind of fruit.\\\"\\n        value={fruit}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <Radio label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={options} required validationState=\"valid\" validationText=\"Great, they're in stock!\" value={fruit} mdxType=\"Radio\" />\n        <Radio label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={options} required validationState=\"warning\" validationText=\"Oh, really?\" value={fruit} mdxType=\"Radio\" />\n        <Radio label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={options} required validationState=\"invalid\" validationText=\"You must select one kind of fruit.\" value={fruit} mdxType=\"Radio\" />\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled State`}</h3>\n    <p>{`It's possible to disable just some options or the whole set.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const [fruit, setFruit] = React.useState(\\'apple\\')\\n  const options = [\\n    {\\n      label: \\'Apple\\',\\n      value: \\'apple\\',\\n    },\\n    {\\n      label: \\'Banana\\',\\n      value: \\'banana\\',\\n    },\\n    {\\n      disabled: true,\\n      label: \\'Grapefruit\\',\\n      value: \\'grapefruit\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      <Radio\\n        label=\\\"Your favourite fruit\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        value={fruit}\\n      />\\n      <Radio\\n        disabled\\n        label=\\\"Your favourite fruit\\\"\\n        onChange={e => setFruit(e.target.value)}\\n        options={options}\\n        value=\\\"apple\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Radio,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [fruit, setFruit] = React.useState('apple');\n        const options = [{\n          label: 'Apple',\n          value: 'apple'\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }, {\n          disabled: true,\n          label: 'Grapefruit',\n          value: 'grapefruit'\n        }];\n        return <>\n        <Radio label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={options} value={fruit} mdxType=\"Radio\" />\n        <Radio disabled label=\"Your favourite fruit\" onChange={e => setFruit(e.target.value)} options={options} value=\"apple\" mdxType=\"Radio\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`In addition to the options below, you can specify `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/events.html\"\n      }}>{`React synthetic events`}</a>{` or\nany custom HTML attributes that do not interfere with the API, and they will be\npassed to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` HTML element. This enables making the component\ninteractive and helps improve its accessibility.`}</p>\n    <Props table of={Radio} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h2>\n    <p>{`Head to `}<a parentName=\"p\" {...{\n        \"href\": \"/customize/theming/forms\"\n      }}>{`Forms Theming`}</a>{` to see shared form theming\noptions. On top of that, the following options are available for Radio.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Custom Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--radio__border-radius`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input corner radius`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--rui-FormField--check__input--radio--checked__background-image`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checked input background image (inline, URL, â€¦)`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}