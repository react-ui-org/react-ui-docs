(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{"6pVE":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return p})),a.d(t,"default",(function(){return u}));var l=a("Fcif"),n=a("dV/x"),i=(a("mXGw"),a("/FXl")),o=a("TjRS"),r=a("ZFoC"),d=a("ET+1");a("aD51");const b=["components"],p={};void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/lib/components/TextField/README.mdx"}});const s={_frontmatter:p},m=o.a;function u(e){let{components:t}=e,a=Object(n.a)(e,b);return Object(i.b)(m,Object(l.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"textfield"},"TextField"),Object(i.b)("p",null,"TextField allows users to input text information."),Object(i.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(i.b)("p",null,"To implement the TextField component, you need to import it first:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { TextField } from '@react-ui-org/react-ui';\n")),Object(i.b)("p",null,"And use it:"),Object(i.b)(r.c,{__position:0,__code:'<TextField label="First name" />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"First name",mdxType:"TextField"})),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"#api"},"API")," for all available options."),Object(i.b)("h2",{id:"general-guidelines"},"General Guidelines"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use the ",Object(i.b)("strong",{parentName:"p"},"most suitable input type")," for current context: aside from the\ncommon ",Object(i.b)("inlineCode",{parentName:"p"},"text")," type, there are also ",Object(i.b)("inlineCode",{parentName:"p"},"email"),", ",Object(i.b)("inlineCode",{parentName:"p"},"number"),", ",Object(i.b)("inlineCode",{parentName:"p"},"password"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"tel"),"\ntypes at your disposal. A properly chosen input type is especially important\nfor touch users as it triggers an appropriate virtual keyboard, so it helps\nspeed up the completion of the field.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Beware of the ",Object(i.b)("inlineCode",{parentName:"strong"},"number")," input type:")," it may not be always what you want.\nNot all number-like values are actually numbers, e.g. phone numbers, credit\ncard numbers, or business IDs. In such cases use the most appropriate input\ntype (probably ",Object(i.b)("inlineCode",{parentName:"p"},"text")," or ",Object(i.b)("inlineCode",{parentName:"p"},"tel"),") along with the ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern"},Object(i.b)("inlineCode",{parentName:"a"},"pattern")," attribute"),"\nto improve the input experience for touch users.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use ",Object(i.b)("strong",{parentName:"p"},"short and descriptive labels"),", ideally nouns rather than seemingly\npolite phrases like ",Object(i.b)("em",{parentName:"p"},"Please enter your first name"),". Short labels will help\nyour users accomplish their task faster.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Only make the TextField's label invisible when there is ",Object(i.b)("strong",{parentName:"p"},"another visual\nclue")," to guide users through filling the input.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"When a short label is not enough, use ",Object(i.b)("strong",{parentName:"p"},"help texts to guide users")," before\nthey enter anything.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Optionally you can ",Object(i.b)("strong",{parentName:"p"},"pre-fill your text fields with a placeholder")," to give\nusers an example of what they're expected to fill in. Just remember the\nplaceholder disappears once a value is entered so don't put anything important\nthere. Usually, en example value starting with ‚ÄúEg.‚Äù works best.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use ",Object(i.b)("strong",{parentName:"p"},"clear, calm error messages")," when there's a problem with what they\nentered. Be positive and focus on solutions to make the error message helpful.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"When asking users for their contact information or other personal information,\nmake use of the ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete"},Object(i.b)("inlineCode",{parentName:"a"},"autocomplete")," attribute")," to help them fill the\nform faster."))),Object(i.b)("h2",{id:"design-variants"},"Design Variants"),Object(i.b)("p",null,"To satisfy the design requirements of your project, all input fields in React UI\ncome in ",Object(i.b)("strong",{parentName:"p"},"two design variants")," to choose from: outline and filled. Both can be\nfurther ",Object(i.b)("a",{parentName:"p",href:"#theming"},"customized")," with CSS custom properties."),Object(i.b)(r.c,{__position:1,__code:'<TextField label="First name" />\n<TextField label="First name" variant="filled" />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"First name",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",variant:"filled",mdxType:"TextField"})),Object(i.b)("h2",{id:"sizes"},"Sizes"),Object(i.b)("p",null,"Aside from the default (medium) size, two additional sizes are available: small\nand large."),Object(i.b)(r.c,{__position:2,__code:'<TextField label="First name" size="small" />\n<TextField label="First name" />\n<TextField label="First name" size="large" />\n<TextField label="First name" size="small" variant="filled" />\n<TextField label="First name" variant="filled" />\n<TextField label="First name" size="large" variant="filled" />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"First name",size:"small",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",size:"large",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",size:"small",variant:"filled",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",variant:"filled",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",size:"large",variant:"filled",mdxType:"TextField"})),Object(i.b)("p",null,"Full-width fields span the full width of a parent:"),Object(i.b)(r.c,{__position:3,__code:'<TextField label="First name" fullWidth />\n<TextField label="First name" variant="filled" fullWidth />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"First name",fullWidth:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",variant:"filled",fullWidth:!0,mdxType:"TextField"})),Object(i.b)("h2",{id:"input-types"},"Input Types"),Object(i.b)("p",null,"Aside from the common ",Object(i.b)("inlineCode",{parentName:"p"},"text")," type, there are also ",Object(i.b)("inlineCode",{parentName:"p"},"email"),", ",Object(i.b)("inlineCode",{parentName:"p"},"number"),", ",Object(i.b)("inlineCode",{parentName:"p"},"password"),",\nand ",Object(i.b)("inlineCode",{parentName:"p"},"tel")," types at your disposal."),Object(i.b)(r.c,{__position:4,__code:'<TextField label="Email" type="email" />\n<TextField label="Email" variant="filled" type="email" />\n<TextField label="Age" type="number" />\n<TextField label="Age" variant="filled" type="number" />\n<TextField label="Password" type="password" />\n<TextField label="Password" variant="filled" type="password" />\n<TextField label="Phone" type="tel" />\n<TextField label="Phone" variant="filled" type="tel" />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"Email",type:"email",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Email",variant:"filled",type:"email",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Age",type:"number",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Age",variant:"filled",type:"number",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Password",type:"password",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Password",variant:"filled",type:"password",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Phone",type:"tel",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Phone",variant:"filled",type:"tel",mdxType:"TextField"})),Object(i.b)("h2",{id:"input-size"},"Input Size"),Object(i.b)("p",null,"The default width of all inputs is 240 px, and it can be ",Object(i.b)("a",{parentName:"p",href:"#theming"},"customized"),"\nwith a CSS custom property. However, you can also ",Object(i.b)("strong",{parentName:"p"},"change the width of\nindividual text fields")," using the ",Object(i.b)("inlineCode",{parentName:"p"},"inputSize")," property. It (obviously) sets the\n",Object(i.b)("inlineCode",{parentName:"p"},"size")," attribute of the ",Object(i.b)("inlineCode",{parentName:"p"},"input")," element and is further picked up by CSS to\nnormalize rendering across browsers."),Object(i.b)("p",null,"üëâ Remember that the ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text#size"},Object(i.b)("inlineCode",{parentName:"a"},"size"))," and ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#max"},Object(i.b)("inlineCode",{parentName:"a"},"max"))," HTML attributes ",Object(i.b)("strong",{parentName:"p"},"don't\nlimit on how many characters")," the user can enter. Use the ",Object(i.b)("inlineCode",{parentName:"p"},"maxlength"),"\nattribute to achieve that effect (doesn't work for ",Object(i.b)("inlineCode",{parentName:"p"},"number")," input type though)."),Object(i.b)("p",null,"üëâ Note that according to the HTML specification, the ",Object(i.b)("inlineCode",{parentName:"p"},"size")," attribute (invoked\nby ",Object(i.b)("inlineCode",{parentName:"p"},"inputSize")," API option) is\n",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#Controlling_input_size"},"not available for ",Object(i.b)("inlineCode",{parentName:"a"},"number")," input type"),". TextField supports\n",Object(i.b)("inlineCode",{parentName:"p"},"inputSize")," option for all types of inputs, so you can use it whenever you find\nit suitable. Just keep in mind the ",Object(i.b)("inlineCode",{parentName:"p"},"size")," attribute will not be present for\nnumeric inputs."),Object(i.b)(r.c,{__position:5,__code:'<TextField inputSize={3} label="Title" />\n<TextField inputSize={3} label="Title" variant="filled" />\n<TextField inputSize={3} label="Age" type="number" />\n<TextField inputSize={3} label="Age" type="number" variant="filled" />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{inputSize:3,label:"Title",mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,label:"Title",variant:"filled",mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,label:"Age",type:"number",mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,label:"Age",type:"number",variant:"filled",mdxType:"TextField"})),Object(i.b)("h2",{id:"forwarding-html-attributes"},"Forwarding HTML Attributes"),Object(i.b)("p",null,"When you want to improve the accessibility of your text fields even further, you\ncan ",Object(i.b)("strong",{parentName:"p"},"add whatever HTML attribute you like.")," All attributes that don't\ninterfere with ",Object(i.b)("a",{parentName:"p",href:"#api"},"component's API")," are forwarded to the native HTML input."),Object(i.b)(r.c,{__position:6,__code:'<TextField\n  label="Address"\n  autoComplete="street-address"\n  minLength={3}\n  maxLength={80}\n/>\n<TextField\n  label="Address"\n  variant="filled"\n  autoComplete="street-address"\n  minLength={3}\n  maxLength={80}\n/>\n<TextField inputSize={3} min={13} max={120} label="Age" type="number" />\n<TextField\n  inputSize={3}\n  min={13}\n  max={120}\n  label="Age"\n  type="number"\n  variant="filled"\n/>',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"Address",autoComplete:"street-address",minLength:3,maxLength:80,mdxType:"TextField"}),Object(i.b)(d.a,{label:"Address",variant:"filled",autoComplete:"street-address",minLength:3,maxLength:80,mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,min:13,max:120,label:"Age",type:"number",mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,min:13,max:120,label:"Age",type:"number",variant:"filled",mdxType:"TextField"})),Object(i.b)("p",null,"üëâ Refer to the MDN reference for the full list of supported attributes of the\n",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text"},"text"),", ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email"},"email"),", ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number"},"number"),",\n",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel"},"tel"),", and ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password"},"password")," input types."),Object(i.b)("h2",{id:"invisible-label"},"Invisible Label"),Object(i.b)("p",null,"In some cases, it may be convenient to visually hide the field label. The label\nremains accessible to assistive technologies."),Object(i.b)("p",null,"While it may be acceptable for login screens with just a few fields or for other\nsimple forms, it's dangerous to hide labels from users in most cases. Keep in\nmind you should ",Object(i.b)("strong",{parentName:"p"},"provide another visual clue")," so users know what to fill into\nthe input."),Object(i.b)(r.c,{__position:7,__code:'<TextField\n  label="User name"\n  isLabelVisible={false}\n  placeholder="Eg. john@example.com"\n/>\n<TextField\n  label="User name"\n  isLabelVisible={false}\n  variant="filled"\n  placeholder="Eg. john@example.com"\n/>',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"User name",isLabelVisible:!1,placeholder:"Eg. john@example.com",mdxType:"TextField"}),Object(i.b)(d.a,{label:"User name",isLabelVisible:!1,variant:"filled",placeholder:"Eg. john@example.com",mdxType:"TextField"})),Object(i.b)("h2",{id:"horizontal-layout"},"Horizontal Layout"),Object(i.b)("p",null,"The default vertical layout is very easy to use and work with. However, there\nare situations where horizontal layout suits better ‚Äî and that's why React UI\nsupports this kind of layout as well."),Object(i.b)(r.c,{__position:8,__code:'<TextField inputSize={3} label="Title" layout="horizontal" />\n<TextField inputSize={3} label="Title" layout="horizontal" variant="filled" />\n<TextField label="First name" layout="horizontal" />\n<TextField label="First name" layout="horizontal" variant="filled" />\n<TextField label="First name" layout="horizontal" fullWidth />\n<TextField\n  label="First name"\n  layout="horizontal"\n  variant="filled"\n  fullWidth\n/>\n<TextField\n  isLabelVisible={false}\n  label="First name"\n  layout="horizontal"\n  placeholder="First name"\n  fullWidth\n/>\n<TextField\n  isLabelVisible={false}\n  label="First name"\n  layout="horizontal"\n  placeholder="First name"\n  variant="filled"\n  fullWidth\n/>',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{inputSize:3,label:"Title",layout:"horizontal",mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,label:"Title",layout:"horizontal",variant:"filled",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",variant:"filled",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",fullWidth:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",variant:"filled",fullWidth:!0,mdxType:"TextField"}),Object(i.b)(d.a,{isLabelVisible:!1,label:"First name",layout:"horizontal",placeholder:"First name",fullWidth:!0,mdxType:"TextField"}),Object(i.b)(d.a,{isLabelVisible:!1,label:"First name",layout:"horizontal",placeholder:"First name",variant:"filled",fullWidth:!0,mdxType:"TextField"})),Object(i.b)("h2",{id:"help-text"},"Help Text"),Object(i.b)("p",null,"You may provide an additional help text to clarify how the input should be\nfilled."),Object(i.b)(r.c,{__position:9,__code:'<TextField\n  label="First name"\n  helpText="Choose one or more kinds of fruit to feel happy."\n/>\n<TextField\n  label="First name"\n  variant="filled"\n  helpText="Choose one or more kinds of fruit to feel happy."\n/>\n<TextField\n  label="First name"\n  layout="horizontal"\n  helpText="Choose one or more kinds of fruit to feel happy."\n/>\n<TextField\n  label="First name"\n  layout="horizontal"\n  helpText="Choose one or more kinds of fruit to feel happy."\n  variant="filled"\n/>\n<TextField\n  label="First name"\n  layout="horizontal"\n  helpText="Choose one or more kinds of fruit to feel happy."\n  fullWidth\n/>\n<TextField\n  label="First name"\n  layout="horizontal"\n  variant="filled"\n  helpText="Choose one or more kinds of fruit to feel happy."\n  fullWidth\n/>',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"First name",helpText:"Choose one or more kinds of fruit to feel happy.",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",variant:"filled",helpText:"Choose one or more kinds of fruit to feel happy.",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",helpText:"Choose one or more kinds of fruit to feel happy.",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",helpText:"Choose one or more kinds of fruit to feel happy.",variant:"filled",mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",helpText:"Choose one or more kinds of fruit to feel happy.",fullWidth:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",layout:"horizontal",variant:"filled",helpText:"Choose one or more kinds of fruit to feel happy.",fullWidth:!0,mdxType:"TextField"})),Object(i.b)("p",null,"Keep in mind that ",Object(i.b)("strong",{parentName:"p"},"long help texts don't play well with small input sizes,"),"\nespecially in vertical layout. To fix this at least for horizontal layout, help\ntext expands over the full field width when the desired input width (based on\n",Object(i.b)("inlineCode",{parentName:"p"},"inputSize")," option) is 10 characters or smaller."),Object(i.b)(r.c,{__position:10,__code:'<TextField\n  inputSize={3}\n  label="Title"\n  layout="horizontal"\n  helpText="What academic degree do you hold?"\n/>\n<TextField\n  inputSize={3}\n  label="Title"\n  layout="horizontal"\n  variant="filled"\n  helpText="What academic degree do you hold?"\n/>\n<TextField\n  label="Age"\n  layout="horizontal"\n  min={13}\n  max={120}\n  inputSize={3}\n  type="number"\n  helpText="How old do you see yourself?"\n/>\n<TextField\n  label="Age"\n  layout="horizontal"\n  min={13}\n  max={120}\n  inputSize={3}\n  variant="filled"\n  type="number"\n  helpText="How old do you see yourself?"\n/>',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{inputSize:3,label:"Title",layout:"horizontal",helpText:"What academic degree do you hold?",mdxType:"TextField"}),Object(i.b)(d.a,{inputSize:3,label:"Title",layout:"horizontal",variant:"filled",helpText:"What academic degree do you hold?",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Age",layout:"horizontal",min:13,max:120,inputSize:3,type:"number",helpText:"How old do you see yourself?",mdxType:"TextField"}),Object(i.b)(d.a,{label:"Age",layout:"horizontal",min:13,max:120,inputSize:3,variant:"filled",type:"number",helpText:"How old do you see yourself?",mdxType:"TextField"})),Object(i.b)("h2",{id:"states"},"States"),Object(i.b)("h3",{id:"validation-states"},"Validation States"),Object(i.b)("p",null,"Validation states visually present the result of validation of the input. You\nshould always ",Object(i.b)("strong",{parentName:"p"},"provide a validation message for states other than valid")," so\nusers know what happened and what action they should take or what options they\nhave."),Object(i.b)(r.c,{__position:11,__code:'<TextField\n  label="User name"\n  validationState="valid"\n  validationText="Looks good!"\n  value="johnny1986"\n  required\n/>\n<TextField\n  label="User name"\n  validationState="warning"\n  validationText="Account with this name already exists, pick a different one."\n  value="joe"\n  required\n/>\n<TextField\n  label="User name"\n  validationState="invalid"\n  validationText="Please enter a user name of your choice."\n  required\n/>\n<TextField\n  label="User name"\n  validationState="valid"\n  validationText="Looks good!"\n  variant="filled"\n  value="johnny1986"\n  required\n/>\n<TextField\n  label="User name"\n  validationState="warning"\n  validationText="Account with this name already exists, pick a different one."\n  variant="filled"\n  value="joe"\n  required\n/>\n<TextField\n  label="User name"\n  validationState="invalid"\n  validationText="Please enter a user name of your choice."\n  variant="filled"\n  required\n/>',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"User name",validationState:"valid",validationText:"Looks good!",value:"johnny1986",required:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"User name",validationState:"warning",validationText:"Account with this name already exists, pick a different one.",value:"joe",required:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"User name",validationState:"invalid",validationText:"Please enter a user name of your choice.",required:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"User name",validationState:"valid",validationText:"Looks good!",variant:"filled",value:"johnny1986",required:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"User name",validationState:"warning",validationText:"Account with this name already exists, pick a different one.",variant:"filled",value:"joe",required:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"User name",validationState:"invalid",validationText:"Please enter a user name of your choice.",variant:"filled",required:!0,mdxType:"TextField"})),Object(i.b)("h3",{id:"disabled-state"},"Disabled State"),Object(i.b)("p",null,"It's possible to disable the whole input."),Object(i.b)(r.c,{__position:12,__code:'<TextField label="First name" value="John" disabled />\n<TextField label="First name" variant="filled" value="John" disabled />',__scope:{props:a,DefaultLayout:o.a,Playground:r.c,Props:r.d,TextField:d.a,DefaultLayout:o.a,_frontmatter:p},mdxType:"Playground"},Object(i.b)(d.a,{label:"First name",value:"John",disabled:!0,mdxType:"TextField"}),Object(i.b)(d.a,{label:"First name",variant:"filled",value:"John",disabled:!0,mdxType:"TextField"})),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("p",null,"In addition to the options below, you can specify ",Object(i.b)("a",{parentName:"p",href:"https://reactjs.org/docs/events.html"},"React synthetic events")," or\nany custom HTML attributes that do not interfere with the API, and they will be\npassed to the ",Object(i.b)("inlineCode",{parentName:"p"},"input")," HTML element. This enables making the component\ninteractive and helps improve its ",Object(i.b)("a",{parentName:"p",href:"#forwarding-html-attributes"},"accessibility"),"."),Object(i.b)(r.d,{table:!0,of:d.a,mdxType:"Props"}),Object(i.b)("h2",{id:"theming"},"Theming"),Object(i.b)("p",null,"Head to ",Object(i.b)("a",{parentName:"p",href:"/customize/theming/forms"},"Forms Theming")," to see shared form theming options."))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/lib/components/TextField/README.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-lib-components-text-field-readme-mdx-d7198bbcdca37c399c2f.js.map