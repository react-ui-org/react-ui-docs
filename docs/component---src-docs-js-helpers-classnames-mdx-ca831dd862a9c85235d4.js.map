{"version":3,"sources":["webpack:///../src/docs/js-helpers/classnames.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","classNames","className","Date","now","toLocaleDateString","isMDXComponent"],"mappings":"iTAUaA,EAAe,Q,0OAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,cADR,cAIA,4BAAW,0BAAYC,WAAW,KAAvB,cAAX,+MAEgE,0BAAYA,WAAW,KAAvB,cAFhE,2EAIA,kBACE,GAAM,eADR,eAGA,+BAAc,0BAAYA,WAAW,KAAvB,cAAd,yCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,2DAIL,oCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sNAA6NC,QAAS,CACvQL,QACAH,kBACAS,eACAC,eACAV,kBACAH,gBACCO,QAAQ,cACb,mBAAKO,UAAWD,YAAW,iBAAkBE,KAAKC,MAAQ,YAAc,eAAgBD,KAAKC,MAAQ,WAAa,iBAAmB,QAClI,IAAID,MAAOE,6B,wOAOhBb,EAAWc,gBAAiB","file":"component---src-docs-js-helpers-classnames-mdx-ca831dd862a9c85235d4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui/react-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { classNames } from '../../lib';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"classnames\"\n    }}>{`Classnames`}</h1>\n\n    <p>{`The `}<inlineCode parentName=\"p\">{`classNames`}</inlineCode>{` helper joins all classnames you pass into the function as\nsingle classname. It automatically filters out empty strings and values that\nare not strings, so you can conditionally assemble classnames and `}<inlineCode parentName=\"p\">{`classNames`}</inlineCode>{`\nfunction will take care about the single format of classname for you.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`To use `}<inlineCode parentName=\"p\">{`classNames`}</inlineCode>{` helper, you need to import it first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { classNames } from '@react-ui-org/react-ui';\n`}</code></pre>\n    <p>{`And use it:`}</p>\n    <Playground __position={0} __code={'<div\\n  className={classNames(\\n    \\'d-inline-block\\',\\n    Date.now() > 1609455600 && \\'text-warning\\',\\n    Date.now() > 1622498400 ? \\'text-secondary\\' : null,\\n  )}\\n>\\n  {new Date().toLocaleDateString()}\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      classNames,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div className={classNames('d-inline-block', Date.now() > 1609455600 && 'text-warning', Date.now() > 1622498400 ? 'text-secondary' : null)}>\n    {new Date().toLocaleDateString()}\n  </div>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}